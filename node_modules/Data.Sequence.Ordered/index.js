// Generated by psc-make version 0.6.9.5
"use strict";
var Data_Sequence_Internal = require("Data.Sequence.Internal");
var Data_FingerTree = require("Data.FingerTree");
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Tuple = require("Data.Tuple");
var Data_Lazy = require("Data.Lazy");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Data_Unfoldable = require("Data.Unfoldable");
var Data_Array = require("Data.Array");
var OrdSeq = function (x) {
    return x;
};
var popLeast = function (__dict_Ord_0) {
    return function (_619) {
        var _2899 = Data_FingerTree.viewL(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(_619);
        if (_2899 instanceof Data_FingerTree.NilL) {
            return Data_Maybe.Nothing.value;
        };
        if (_2899 instanceof Data_FingerTree.ConsL) {
            return new Data_Maybe.Just(new Data_Tuple.Tuple(Data_Sequence_Internal.getElem(_2899.value0), Data_Lazy.force(_2899.value1)));
        };
        throw new Error("Failed pattern match");
    };
};
var popGreatest = function (__dict_Ord_1) {
    return function (_621) {
        var _2903 = Data_FingerTree.viewR(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(_621);
        if (_2903 instanceof Data_FingerTree.NilR) {
            return Data_Maybe.Nothing.value;
        };
        if (_2903 instanceof Data_FingerTree.SnocR) {
            return new Data_Maybe.Just(new Data_Tuple.Tuple(Data_Sequence_Internal.getElem(_2903.value1), Data_Lazy.force(_2903.value0)));
        };
        throw new Error("Failed pattern match");
    };
};
var partition = function (__dict_Ord_2) {
    return function (k) {
        return function (_611) {
            var t = Data_FingerTree.split(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(function (y) {
                return Prelude[">="](Data_Sequence_Internal.ordKey(__dict_Ord_2))(y)(new Data_Sequence_Internal.Key(k));
            })(_611);
            var r = Data_Tuple.snd(t);
            var l = Data_Tuple.fst(t);
            return new Data_Tuple.Tuple(Data_Lazy.force(l), Data_Lazy.force(r));
        };
    };
};
var $$null = function (_610) {
    if (_610 instanceof Data_FingerTree.Empty) {
        return true;
    };
    return false;
};
var merge = function (__dict_Ord_3) {
    return function (_614) {
        return function (_615) {
            var go = function (as) {
                return function (bs) {
                    var _2911 = Data_FingerTree.viewL(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(bs);
                    if (_2911 instanceof Data_FingerTree.NilL) {
                        return as;
                    };
                    if (_2911 instanceof Data_FingerTree.ConsL) {
                        var t = Data_FingerTree.split(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(function (c) {
                            return Prelude[">"](Data_Sequence_Internal.ordKey(__dict_Ord_3))(c)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredElemKey)(_2911.value0));
                        })(as);
                        var r = Data_Lazy.force(Data_Tuple.snd(t));
                        var l = Data_Lazy.force(Data_Tuple.fst(t));
                        return Prelude["<>"](Data_FingerTree.semigroupFingerTree(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey))(l)(Data_FingerTree.cons(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(_2911.value0)(go(Data_Lazy.force(_2911.value1))(r)));
                    };
                    throw new Error("Failed pattern match");
                };
            };
            return go(_614)(_615);
        };
    };
};
var semigroupOrdSeq = function (__dict_Ord_4) {
    return new Prelude.Semigroup(merge(__dict_Ord_4));
};
var least = function (__dict_Ord_5) {
    return function (_618) {
        var _2915 = Data_FingerTree.viewL(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(_618);
        if (_2915 instanceof Data_FingerTree.NilL) {
            return Data_Maybe.Nothing.value;
        };
        if (_2915 instanceof Data_FingerTree.ConsL) {
            return new Data_Maybe.Just(Data_Sequence_Internal.getElem(_2915.value0));
        };
        throw new Error("Failed pattern match");
    };
};
var intersection = function (__dict_Ord_6) {
    return function (_616) {
        return function (_617) {
            var go = function (as) {
                return function (bs) {
                    var _2920 = new Data_Tuple.Tuple(Data_FingerTree.viewL(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(as), Data_FingerTree.viewL(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(bs));
                    if (_2920.value0 instanceof Data_FingerTree.NilL) {
                        return Data_FingerTree.Empty.value;
                    };
                    if (_2920.value1 instanceof Data_FingerTree.NilL) {
                        return Data_FingerTree.Empty.value;
                    };
                    if (_2920.value0 instanceof Data_FingerTree.ConsL && _2920.value1 instanceof Data_FingerTree.ConsL) {
                        var _2925 = Prelude.compare(Data_Sequence_Internal.ordElem(__dict_Ord_6))(_2920.value0.value0)(_2920.value1.value0);
                        if (_2925 instanceof Prelude.LT) {
                            return go(Data_Lazy.force(_2920.value0.value1))(bs);
                        };
                        if (_2925 instanceof Prelude.EQ) {
                            return Data_FingerTree.cons(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(_2920.value0.value0)(go(Data_Lazy.force(_2920.value0.value1))(Data_Lazy.force(_2920.value1.value1)));
                        };
                        if (_2925 instanceof Prelude.GT) {
                            return go(as)(Data_Lazy.force(_2920.value1.value1));
                        };
                        throw new Error("Failed pattern match");
                    };
                    throw new Error("Failed pattern match");
                };
            };
            return go(_616)(_617);
        };
    };
};
var insert = function (__dict_Ord_7) {
    return function (x) {
        return function (_612) {
            var t = Data_FingerTree.split(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(function (y) {
                return Prelude[">="](Data_Sequence_Internal.ordKey(__dict_Ord_7))(y)(new Data_Sequence_Internal.Key(x));
            })(_612);
            var r = Data_Tuple.snd(t);
            var l = Data_Tuple.fst(t);
            return Data_FingerTree.append(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(Data_Lazy.force(l))(Data_FingerTree.cons(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(x)(Data_Lazy.force(r)));
        };
    };
};
var greatest = function (__dict_Ord_8) {
    return function (_620) {
        var _2935 = Data_FingerTree.viewR(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(_620);
        if (_2935 instanceof Data_FingerTree.NilR) {
            return Data_Maybe.Nothing.value;
        };
        if (_2935 instanceof Data_FingerTree.SnocR) {
            return new Data_Maybe.Just(Data_Sequence_Internal.getElem(_2935.value1));
        };
        throw new Error("Failed pattern match");
    };
};
var fromOrdSeqDescending = function (__dict_Functor_9) {
    return function (__dict_Unfoldable_10) {
        return function (_623) {
            return Data_Sequence_Internal.fmapGetElem(__dict_Functor_9)(Data_FingerTree.unfoldRight(__dict_Unfoldable_10)(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(_623));
        };
    };
};
var fromOrdSeq = function (__dict_Functor_11) {
    return function (__dict_Unfoldable_12) {
        return function (_622) {
            return Data_Sequence_Internal.fmapGetElem(__dict_Functor_11)(Data_FingerTree.unfoldLeft(__dict_Unfoldable_12)(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(_622));
        };
    };
};
var showOrdSeq = function (__dict_Show_13) {
    return new Prelude.Show(function (xs) {
        return "(toOrdSeq [" + (Data_Sequence_Internal.strJoin(__dict_Show_13)(",")(fromOrdSeq(Data_Array.functorArray)(Data_Unfoldable.unfoldableArray)(xs)) + "])");
    });
};
var foldableOrdSeq = new Data_Foldable.Foldable(function (__dict_Monoid_14) {
    return function (f) {
        return function (_628) {
            return Data_Foldable.foldMap(Data_FingerTree.foldableFingerTree)(__dict_Monoid_14)(Data_Sequence_Internal.liftElem(f))(_628);
        };
    };
}, function (f) {
    return function (z) {
        return function (_627) {
            return Data_Foldable.foldl(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.lift2Elem(f))(z)(_627);
        };
    };
}, function (f) {
    return function (z) {
        return function (_626) {
            return Data_Foldable.foldr(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.liftElem(f))(z)(_626);
        };
    };
});
var length = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Monoid_Additive.runAdditive)(Data_Foldable.foldMap(foldableOrdSeq)(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Prelude["const"](1)));
var fmapOrdSeq = function (__dict_Functor_15) {
    return Data_Sequence_Internal.unsafeCoerce;
};
var eqOrdSeq = function (__dict_Eq_16) {
    return new Prelude.Eq(function (x) {
        return function (y) {
            return !Prelude["=="](eqOrdSeq(__dict_Eq_16))(x)(y);
        };
    }, function (_624) {
        return function (_625) {
            return Data_FingerTree.eqFingerTree(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(Data_Sequence_Internal.eqElem(__dict_Eq_16))(_624)(_625);
        };
    });
};
var empty = Data_FingerTree.Empty.value;
var monoidOrdSeq = function (__dict_Ord_17) {
    return new Data_Monoid.Monoid(function () {
        return semigroupOrdSeq(__dict_Ord_17);
    }, empty);
};
var toOrdSeq = function (__dict_Foldable_18) {
    return function (__dict_Ord_19) {
        return Data_Foldable.foldr(__dict_Foldable_18)(insert(__dict_Ord_19))(empty);
    };
};
var sort = function (__dict_Functor_20) {
    return function (__dict_Foldable_21) {
        return function (__dict_Unfoldable_22) {
            return function (__dict_Ord_23) {
                return Prelude["<<<"](Prelude.semigroupoidArr)(fromOrdSeq(__dict_Functor_20)(__dict_Unfoldable_22))(toOrdSeq(__dict_Foldable_21)(__dict_Ord_23));
            };
        };
    };
};
var deleteAll = function (__dict_Ord_24) {
    return function (x) {
        return function (_613) {
            var t = Data_FingerTree.split(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(function (y) {
                return Prelude[">="](Data_Sequence_Internal.ordKey(__dict_Ord_24))(y)(new Data_Sequence_Internal.Key(x));
            })(_613);
            var r = Data_Lazy.force(Data_Tuple.snd(t));
            var t$prime = Data_FingerTree.split(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey)(function (y) {
                return Prelude[">"](Data_Sequence_Internal.ordKey(__dict_Ord_24))(y)(new Data_Sequence_Internal.Key(x));
            })(r);
            var r$prime = Data_Lazy.force(Data_Tuple.snd(t$prime));
            var l = Data_Lazy.force(Data_Tuple.fst(t));
            return Prelude["<>"](Data_FingerTree.semigroupFingerTree(Data_Sequence_Internal.monoidKey)(Data_Sequence_Internal.measuredElemKey))(l)(r$prime);
        };
    };
};
module.exports = {
    sort: sort, 
    fromOrdSeqDescending: fromOrdSeqDescending, 
    fromOrdSeq: fromOrdSeq, 
    deleteAll: deleteAll, 
    intersection: intersection, 
    merge: merge, 
    partition: partition, 
    popGreatest: popGreatest, 
    popLeast: popLeast, 
    greatest: greatest, 
    least: least, 
    length: length, 
    "null": $$null, 
    insert: insert, 
    toOrdSeq: toOrdSeq, 
    empty: empty, 
    eqOrdSeq: eqOrdSeq, 
    showOrdSeq: showOrdSeq, 
    semigroupOrdSeq: semigroupOrdSeq, 
    monoidOrdSeq: monoidOrdSeq, 
    foldableOrdSeq: foldableOrdSeq
};
