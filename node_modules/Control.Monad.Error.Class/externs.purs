-- Generated by psc-make version 0.6.9.5
module Control.Monad.Error.Class where
import Prelude ()
import Control.Monad.Error.Trans ()
import Control.Monad.Trans ()
import Control.Monad.Error.Class ()
import Control.Monad.Maybe.Trans ()
import Control.Monad.Reader.Trans ()
import Control.Monad.Writer.Trans ()
import Control.Monad.State.Trans ()
import Prim ()
import Prelude ()
import Control.Monad.Trans ()
import Control.Monad.Error ()
import Control.Monad.Error.Trans ()
import Control.Monad.Maybe.Trans ()
import Control.Monad.Reader.Trans ()
import Control.Monad.Writer.Trans ()
import Control.Monad.State.Trans ()
import Data.Either ()
import Data.Monoid ()
class MonadError e m where
  throwError :: forall a. e -> m a
  catchError :: forall a. m a -> (e -> m a) -> m a
foreign import instance monadErrorError :: (Control.Monad.Error.Error e) => Control.Monad.Error.Class.MonadError e (Data.Either.Either e)
foreign import instance monadErrorErrorT :: (Prelude.Monad m, Control.Monad.Error.Error e) => Control.Monad.Error.Class.MonadError e (Control.Monad.Error.Trans.ErrorT e m)
foreign import instance monadErrorMaybeT :: (Prelude.Monad m, Control.Monad.Error.Class.MonadError e m) => Control.Monad.Error.Class.MonadError e (Control.Monad.Maybe.Trans.MaybeT m)
foreign import instance monadErrorReaderT :: (Prelude.Monad m, Control.Monad.Error.Class.MonadError e m) => Control.Monad.Error.Class.MonadError e (Control.Monad.Reader.Trans.ReaderT r m)
foreign import instance monadErrorWriterT :: (Prelude.Monad m, Data.Monoid.Monoid w, Control.Monad.Error.Class.MonadError e m) => Control.Monad.Error.Class.MonadError e (Control.Monad.Writer.Trans.WriterT w m)
foreign import instance monadErrorStateT :: (Prelude.Monad m, Control.Monad.Error.Class.MonadError e m) => Control.Monad.Error.Class.MonadError e (Control.Monad.State.Trans.StateT s m)
