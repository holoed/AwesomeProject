// Generated by psc-make version 0.6.9.5
"use strict";
var Data_Sequence = require("Data.Sequence");
var Prelude = require("Prelude");
var Data_Tuple = require("Data.Tuple");
var Data_Maybe = require("Data.Maybe");
var Data_Foldable = require("Data.Foldable");
var Data_Traversable = require("Data.Traversable");
var Control_Alt = require("Control.Alt");
var Data_Unfoldable = require("Data.Unfoldable");
var Seq = (function () {
    function Seq(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Seq.create = function (value0) {
        return function (value1) {
            return new Seq(value0, value1);
        };
    };
    return Seq;
})();
var unsnoc = function (_683) {
    var _3131 = Data_Sequence.unsnoc(_683.value1);
    if (_3131 instanceof Data_Maybe.Nothing) {
        return new Data_Tuple.Tuple(Data_Sequence.empty, _683.value0);
    };
    if (_3131 instanceof Data_Maybe.Just) {
        return new Data_Tuple.Tuple(Data_Sequence.cons(_683.value0)(_3131.value0.value0), _3131.value0.value1);
    };
    throw new Error("Failed pattern match");
};
var uncons = function (_682) {
    return new Data_Tuple.Tuple(_682.value0, _682.value1);
};
var toPlain = function (_687) {
    return Data_Sequence.cons(_687.value0)(_687.value1);
};
var take = function (i) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Sequence.take(i))(toPlain);
};
var tail = function (_685) {
    return _685.value1;
};
var splitAt = function (i) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Sequence.splitAt(i))(toPlain);
};
var snoc = function (_676) {
    return function (y) {
        return new Seq(_676.value0, Data_Sequence.snoc(_676.value1)(y));
    };
};
var singleton = function (x) {
    return new Seq(x, Data_Sequence.empty);
};
var showSeq = function (__dict_Show_0) {
    return new Prelude.Show(function (_692) {
        return "(Seq " + (Prelude.show(__dict_Show_0)(_692.value0) + (" " + (Prelude.show(Data_Sequence.showSeq(__dict_Show_0))(_692.value1) + ")")));
    });
};
var semigroupSeq = new Prelude.Semigroup(function (_698) {
    return function (_699) {
        return new Seq(_698.value0, Prelude["<>"](Data_Sequence.semigroupSeq)(Data_Sequence.snoc(_698.value1)(_699.value0))(_699.value1));
    };
});
var length = function (_679) {
    return Data_Sequence.length(_679.value1) + 1;
};
var last = function (_686) {
    return Data_Maybe.maybe(_686.value0)(Prelude.id(Prelude.categoryArr))(Data_Sequence.last(_686.value1));
};
var init = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Tuple.fst)(unsnoc);
var index = function (_688) {
    return function (_689) {
        if (_689 === 0) {
            return new Data_Maybe.Just(_688.value0);
        };
        return Data_Sequence.index(_688.value1)(_689 - 1);
    };
};
var inBounds = function (_680) {
    return function (_681) {
        if (_681 === 0) {
            return true;
        };
        return Data_Sequence.inBounds(_680.value1)(_681 - 1);
    };
};
var head = function (_684) {
    return _684.value0;
};
var functorSeq = new Prelude.Functor(function (f) {
    return function (_697) {
        return new Seq(f(_697.value0), Prelude["<$>"](Data_Sequence.functorSeq)(f)(_697.value1));
    };
});
var fromSeq = function (__dict_Functor_2) {
    return function (__dict_Unfoldable_3) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Sequence.fromSeq(__dict_Functor_2)(__dict_Unfoldable_3))(toPlain);
    };
};
var fromPlainUnsafe = function (xs) {
    var _3182 = Data_Sequence.uncons(xs);
    if (_3182 instanceof Data_Maybe.Just) {
        return new Seq(_3182.value0.value0, _3182.value0.value1);
    };
    throw new Error("Failed pattern match");
};
var foldableSeq = new Data_Foldable.Foldable(function (__dict_Monoid_4) {
    return function (f) {
        return Prelude[">>>"](Prelude.semigroupoidArr)(toPlain)(Data_Foldable.foldMap(Data_Sequence.foldableSeq)(__dict_Monoid_4)(f));
    };
}, function (f) {
    return function (z) {
        return Prelude[">>>"](Prelude.semigroupoidArr)(toPlain)(Data_Foldable.foldl(Data_Sequence.foldableSeq)(f)(z));
    };
}, function (f) {
    return function (z) {
        return Prelude[">>>"](Prelude.semigroupoidArr)(toPlain)(Data_Foldable.foldr(Data_Sequence.foldableSeq)(f)(z));
    };
});
var fmap = Prelude["<$>"];
var traversableSeq = new Data_Traversable.Traversable(function () {
    return foldableSeq;
}, function () {
    return functorSeq;
}, function (__dict_Applicative_5) {
    return Prelude[">>>"](Prelude.semigroupoidArr)(toPlain)(Prelude[">>>"](Prelude.semigroupoidArr)(Data_Traversable.sequence(Data_Sequence.traversableSeq)(__dict_Applicative_5))(fmap((__dict_Applicative_5["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(fromPlainUnsafe)));
}, function (__dict_Applicative_6) {
    return function (f) {
        return Prelude[">>>"](Prelude.semigroupoidArr)(toPlain)(Prelude[">>>"](Prelude.semigroupoidArr)(Data_Traversable.traverse(Data_Sequence.traversableSeq)(__dict_Applicative_6)(f))(fmap((__dict_Applicative_6["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(fromPlainUnsafe)));
    };
});
var filter = function (p) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Sequence.filter(p))(toPlain);
};
var eqSeq = function (__dict_Eq_7) {
    return new Prelude.Eq(function (x) {
        return function (y) {
            return !Prelude["=="](eqSeq(__dict_Eq_7))(x)(y);
        };
    }, function (_693) {
        return function (_694) {
            return Prelude["=="](__dict_Eq_7)(_693.value0)(_694.value0) && Prelude["=="](Data_Sequence.eqSeq(__dict_Eq_7))(_693.value1)(_694.value1);
        };
    });
};
var ordSeq = function (__dict_Ord_1) {
    return new Prelude.Ord(function () {
        return eqSeq(__dict_Ord_1["__superclass_Prelude.Eq_0"]());
    }, function (_695) {
        return function (_696) {
            var _3194 = Prelude.compare(__dict_Ord_1)(_695.value0)(_696.value0);
            if (_3194 instanceof Prelude.EQ) {
                return Prelude.compare(Data_Sequence.ordSeq(__dict_Ord_1))(_695.value1)(_696.value1);
            };
            return _3194;
        };
    });
};
var drop = function (i) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Sequence.drop(i))(toPlain);
};
var cons = function (x) {
    return function (_675) {
        return new Seq(x, Data_Sequence.cons(_675.value0)(_675.value1));
    };
};
var applySeq = new Prelude.Apply(function (fs) {
    return function (xs) {
        return fromPlainUnsafe(Prelude["<*>"](Data_Sequence.applySeq)(toPlain(fs))(toPlain(xs)));
    };
}, function () {
    return functorSeq;
});
var bindSeq = new Prelude.Bind(function (xs) {
    return function (f) {
        return fromPlainUnsafe(Prelude[">>="](Data_Sequence.bindSeq)(toPlain(xs))(Prelude["<<<"](Prelude.semigroupoidArr)(toPlain)(f)));
    };
}, function () {
    return applySeq;
});
var applicativeSeq = new Prelude.Applicative(function () {
    return applySeq;
}, function (x) {
    return new Seq(x, Data_Sequence.empty);
});
var monadSeq = new Prelude.Monad(function () {
    return applicativeSeq;
}, function () {
    return bindSeq;
});
var append = function (_677) {
    return function (_678) {
        return new Seq(_677.value0, Prelude["<>"](Data_Sequence.semigroupSeq)(Data_Sequence.snoc(_677.value1)(_678.value0))(_678.value1));
    };
};
var altSeq = new Control_Alt.Alt(Prelude["<>"](semigroupSeq), function () {
    return functorSeq;
});
var adjust = function (f) {
    return function (_690) {
        return function (_691) {
            if (_690 === 0) {
                return new Seq(f(_691.value0), _691.value1);
            };
            return new Seq(_691.value0, Data_Sequence.adjust(f)(_690 - 1)(_691.value1));
        };
    };
};
var replace = function (x) {
    return adjust(Prelude["const"](x));
};
module.exports = {
    Seq: Seq, 
    fromSeq: fromSeq, 
    replace: replace, 
    adjust: adjust, 
    index: index, 
    filter: filter, 
    drop: drop, 
    take: take, 
    splitAt: splitAt, 
    toPlain: toPlain, 
    last: last, 
    init: init, 
    tail: tail, 
    head: head, 
    unsnoc: unsnoc, 
    uncons: uncons, 
    inBounds: inBounds, 
    length: length, 
    append: append, 
    snoc: snoc, 
    cons: cons, 
    singleton: singleton, 
    showSeq: showSeq, 
    eqSeq: eqSeq, 
    ordSeq: ordSeq, 
    functorSeq: functorSeq, 
    applySeq: applySeq, 
    applicativeSeq: applicativeSeq, 
    bindSeq: bindSeq, 
    monadSeq: monadSeq, 
    semigroupSeq: semigroupSeq, 
    altSeq: altSeq, 
    foldableSeq: foldableSeq, 
    traversableSeq: traversableSeq
};
