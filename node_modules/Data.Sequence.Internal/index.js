// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude_Unsafe = require("Prelude.Unsafe");
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Monoid = require("Data.Monoid");
var Data_Lazy = require("Data.Lazy");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var Data_Traversable = require("Data.Traversable");
var Data_Array = require("Data.Array");

  function unsafeCoerce(x) {
    return x
  } ;
var NoKey = (function () {
    function NoKey() {

    };
    NoKey.value = new NoKey();
    return NoKey;
})();
var Key = (function () {
    function Key(value0) {
        this.value0 = value0;
    };
    Key.create = function (value0) {
        return new Key(value0);
    };
    return Key;
})();
var Elem = function (x) {
    return x;
};
var Measured = function (measure) {
    this.measure = measure;
};
var $less$dollar$dollar$greater = function (__dict_Functor_0) {
    return function (__dict_Functor_1) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](__dict_Functor_0))(Prelude["<$>"](__dict_Functor_1));
    };
};
var $less$dollar$dollar$dollar$greater = function (__dict_Functor_2) {
    return function (__dict_Functor_3) {
        return function (__dict_Functor_4) {
            return Prelude["<<<"](Prelude.semigroupoidArr)($less$dollar$dollar$greater(__dict_Functor_2)(__dict_Functor_3))(Prelude["<$>"](__dict_Functor_4));
        };
    };
};
var $times$times$times = function (fa) {
    return function (fb) {
        return function (_444) {
            return new Data_Tuple.Tuple(fa(_444.value0), fb(_444.value1));
        };
    };
};
var $bang = Prelude_Unsafe.unsafeIndex;
var showKey = function (__dict_Show_5) {
    return new Prelude.Show(function (_459) {
        if (_459 instanceof Key) {
            return "(Key " + (Prelude.show(__dict_Show_5)(_459.value0) + ")");
        };
        if (_459 instanceof NoKey) {
            return "NoKey";
        };
        throw new Error("Failed pattern match");
    });
};
var semigroupKey = new Prelude.Semigroup(function (k) {
    return function (_460) {
        if (_460 instanceof NoKey) {
            return k;
        };
        return _460;
    };
});
var monoidKey = new Data_Monoid.Monoid(function () {
    return semigroupKey;
}, NoKey.value);
var measuredElemKey = new Measured(function (_463) {
    return new Key(_463);
});
var measuredElem = new Measured(function (_446) {
    return 1;
});
var measure = function (dict) {
    return dict.measure;
};
var measuredArray = function (__dict_Monoid_8) {
    return function (__dict_Measured_9) {
        return new Measured(function (xs) {
            return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (i) {
                return function (a) {
                    return Prelude["<>"](__dict_Monoid_8["__superclass_Prelude.Semigroup_0"]())(i)(measure(__dict_Measured_9)(a));
                };
            })(Data_Monoid.mempty(__dict_Monoid_8))(xs);
        });
    };
};
var measuredLazy = function (__dict_Monoid_10) {
    return function (__dict_Measured_11) {
        return new Measured(function (s) {
            return measure(__dict_Measured_11)(Data_Lazy.force(s));
        });
    };
};
var liftElem = unsafeCoerce;
var lift2Elem = unsafeCoerce;
var getElem = function (_445) {
    return _445;
};
var showElem = function (__dict_Show_12) {
    return new Prelude.Show(function (x) {
        return "Elem (" + (Prelude.show(__dict_Show_12)(getElem(x)) + ")");
    });
};
var functorElem = new Prelude.Functor(function (f) {
    return function (_454) {
        return f(_454);
    };
});
var foldableElem = new Data_Foldable.Foldable(function (__dict_Monoid_13) {
    return function (f) {
        return function (_453) {
            return f(_453);
        };
    };
}, function (f) {
    return function (z) {
        return function (_452) {
            return f(z)(_452);
        };
    };
}, function (f) {
    return function (z) {
        return function (_451) {
            return f(_451)(z);
        };
    };
});
var fmapGetElem = function (__dict_Functor_14) {
    return unsafeCoerce;
};
var fmapElem = function (__dict_Functor_15) {
    return unsafeCoerce;
};
var traversableElem = new Data_Traversable.Traversable(function () {
    return foldableElem;
}, function () {
    return functorElem;
}, function (__dict_Applicative_17) {
    return function (_456) {
        return fmapElem((__dict_Applicative_17["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(_456);
    };
}, function (__dict_Applicative_16) {
    return function (f) {
        return function (_455) {
            return fmapElem((__dict_Applicative_16["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f(_455));
        };
    };
});
var fmap = function (__dict_Functor_18) {
    return Prelude["<$>"](__dict_Functor_18);
};
var strJoin = function (__dict_Show_19) {
    return function (glue) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(glue))(fmap(Data_Array.functorArray)(Prelude.show(__dict_Show_19)));
    };
};
var eqKey = function (__dict_Eq_20) {
    return new Prelude.Eq(function (x) {
        return function (y) {
            return !Prelude["=="](eqKey(__dict_Eq_20))(x)(y);
        };
    }, function (_457) {
        return function (_458) {
            if (_457 instanceof Key && _458 instanceof Key) {
                return Prelude["=="](__dict_Eq_20)(_457.value0)(_458.value0);
            };
            if (_457 instanceof NoKey && _458 instanceof NoKey) {
                return true;
            };
            return false;
        };
    });
};
var ordKey = function (__dict_Ord_6) {
    return new Prelude.Ord(function () {
        return eqKey(__dict_Ord_6["__superclass_Prelude.Eq_0"]());
    }, function (_461) {
        return function (_462) {
            if (_461 instanceof NoKey) {
                return Prelude.LT.value;
            };
            if (_462 instanceof NoKey) {
                return Prelude.GT.value;
            };
            if (_461 instanceof Key && _462 instanceof Key) {
                return Prelude.compare(__dict_Ord_6)(_461.value0)(_462.value0);
            };
            throw new Error("Failed pattern match");
        };
    });
};
var eqElem = function (__dict_Eq_21) {
    return new Prelude.Eq(function (x) {
        return function (y) {
            return !Prelude["=="](eqElem(__dict_Eq_21))(x)(y);
        };
    }, function (_447) {
        return function (_448) {
            return Prelude["=="](__dict_Eq_21)(_447)(_448);
        };
    });
};
var ordElem = function (__dict_Ord_7) {
    return new Prelude.Ord(function () {
        return eqElem(__dict_Ord_7["__superclass_Prelude.Eq_0"]());
    }, function (_449) {
        return function (_450) {
            return Prelude.compare(__dict_Ord_7)(_449)(_450);
        };
    });
};
module.exports = {
    NoKey: NoKey, 
    Key: Key, 
    Elem: Elem, 
    Measured: Measured, 
    liftElem: liftElem, 
    lift2Elem: lift2Elem, 
    fmapGetElem: fmapGetElem, 
    fmapElem: fmapElem, 
    getElem: getElem, 
    measure: measure, 
    unsafeCoerce: unsafeCoerce, 
    strJoin: strJoin, 
    "<$$$>": $less$dollar$dollar$dollar$greater, 
    "<$$>": $less$dollar$dollar$greater, 
    fmap: fmap, 
    "***": $times$times$times, 
    "!": $bang, 
    measuredArray: measuredArray, 
    measuredLazy: measuredLazy, 
    measuredElem: measuredElem, 
    showElem: showElem, 
    eqElem: eqElem, 
    ordElem: ordElem, 
    foldableElem: foldableElem, 
    functorElem: functorElem, 
    traversableElem: traversableElem, 
    eqKey: eqKey, 
    showKey: showKey, 
    semigroupKey: semigroupKey, 
    ordKey: ordKey, 
    monoidKey: monoidKey, 
    measuredElemKey: measuredElemKey
};
