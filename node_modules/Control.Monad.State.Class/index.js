// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_Monad_RWS = require("Control.Monad.RWS");
var Control_Monad_State_Trans = require("Control.Monad.State.Trans");
var Control_Monad_Error = require("Control.Monad.Error");
var Control_Monad_Error_Trans = require("Control.Monad.Error.Trans");
var Control_Monad_Maybe_Trans = require("Control.Monad.Maybe.Trans");
var Control_Monad_Reader_Trans = require("Control.Monad.Reader.Trans");
var Control_Monad_RWS_Trans = require("Control.Monad.RWS.Trans");
var Control_Monad_Writer_Trans = require("Control.Monad.Writer.Trans");
var Data_Monoid = require("Data.Monoid");
var Data_Tuple = require("Data.Tuple");
var MonadState = function (state) {
    this.state = state;
};
var state = function (dict) {
    return dict.state;
};
var put = function (__dict_Monad_0) {
    return function (__dict_MonadState_1) {
        return function (s) {
            return state(__dict_MonadState_1)(function (_397) {
                return new Data_Tuple.Tuple(Prelude.unit, s);
            });
        };
    };
};
var monadStateWriterT = function (__dict_Monad_2) {
    return function (__dict_Monoid_3) {
        return function (__dict_MonadState_4) {
            return new MonadState(function (f) {
                return Control_Monad_Trans.lift(Control_Monad_Writer_Trans.monadTransWriterT(__dict_Monoid_3))(__dict_Monad_2)(state(__dict_MonadState_4)(f));
            });
        };
    };
};
var monadStateStateT1 = function (__dict_Monad_5) {
    return function (__dict_MonadState_6) {
        return new MonadState(function (f) {
            return Control_Monad_Trans.lift(Control_Monad_State_Trans.monadTransStateT)(__dict_Monad_5)(state(__dict_MonadState_6)(f));
        });
    };
};
var monadStateStateT = function (__dict_Monad_7) {
    return new MonadState(function (f) {
        return Control_Monad_State_Trans.StateT(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["return"](__dict_Monad_7))(f));
    });
};
var monadStateReaderT = function (__dict_Monad_8) {
    return function (__dict_MonadState_9) {
        return new MonadState(function (f) {
            return Control_Monad_Trans.lift(Control_Monad_Reader_Trans.monadTransReaderT)(__dict_Monad_8)(state(__dict_MonadState_9)(f));
        });
    };
};
var monadStateRWST = function (__dict_Monad_10) {
    return function (__dict_Monoid_11) {
        return new MonadState(Control_Monad_RWS.state(__dict_Monad_10["__superclass_Prelude.Applicative_0"]())(__dict_Monoid_11));
    };
};
var monadStateMaybeT = function (__dict_Monad_12) {
    return function (__dict_MonadState_13) {
        return new MonadState(function (f) {
            return Control_Monad_Trans.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(__dict_Monad_12)(state(__dict_MonadState_13)(f));
        });
    };
};
var monadStateErrorT = function (__dict_Monad_14) {
    return function (__dict_MonadState_15) {
        return new MonadState(function (f) {
            return Control_Monad_Trans.lift(Control_Monad_Error_Trans.monadTransErrorT)(__dict_Monad_14)(state(__dict_MonadState_15)(f));
        });
    };
};
var modify = function (__dict_Monad_16) {
    return function (__dict_MonadState_17) {
        return function (f) {
            return state(__dict_MonadState_17)(function (s) {
                return new Data_Tuple.Tuple(Prelude.unit, f(s));
            });
        };
    };
};
var gets = function (__dict_Monad_18) {
    return function (__dict_MonadState_19) {
        return function (f) {
            return state(__dict_MonadState_19)(function (s) {
                return new Data_Tuple.Tuple(f(s), s);
            });
        };
    };
};
var get = function (__dict_Monad_20) {
    return function (__dict_MonadState_21) {
        return state(__dict_MonadState_21)(function (s) {
            return new Data_Tuple.Tuple(s, s);
        });
    };
};
module.exports = {
    MonadState: MonadState, 
    modify: modify, 
    put: put, 
    gets: gets, 
    get: get, 
    state: state, 
    monadStateStateT: monadStateStateT, 
    monadStateStateT1: monadStateStateT1, 
    monadStateErrorT: monadStateErrorT, 
    monadStateMaybeT: monadStateMaybeT, 
    monadStateReaderT: monadStateReaderT, 
    monadStateWriterT: monadStateWriterT, 
    monadStateRWST: monadStateRWST
};
