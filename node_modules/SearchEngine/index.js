// Generated by psc-make version 0.6.9.5
"use strict";
var Control_Apply = require("Control.Apply");
var Prelude = require("Prelude");
var Data_String = require("Data.String");
var Data_Array = require("Data.Array");
var Data_Tuple = require("Data.Tuple");
var Data_Char = require("Data.Char");
var Data_Foldable = require("Data.Foldable");
var Data_Map = require("Data.Map");
var Data_Array_Unsafe = require("Data.Array.Unsafe");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var Data_Maybe = require("Data.Maybe");
var Data_Function = require("Data.Function");
var D = (function () {
    function D(value0) {
        this.value0 = value0;
    };
    D.create = function (value0) {
        return new D(value0);
    };
    return D;
})();
var IndexedWord = (function () {
    function IndexedWord(value0) {
        this.value0 = value0;
    };
    IndexedWord.create = function (value0) {
        return new IndexedWord(value0);
    };
    return IndexedWord;
})();
var words = function (s) {
    return Prelude["<$>"](Data_Array.functorArray)(Data_String.trim)(Data_String.split(" ")(s));
};
var word = function (_11) {
    return _11.value0.word;
};
var searchTermsFromPartial = function (s) {
    return function (d) {
        var flattenValues = Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](Data_Array.functorArray)(Prelude["++"](Data_Array.semigroupArray)(s)))(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.concatMap(Data_Tuple.fst))(Data_Map.values));
        var findTerms = function (__copy__15) {
            return function (__copy__16) {
                var _15 = __copy__15;
                var _16 = __copy__16;
                tco: while (true) {
                    if (_15.length === 0) {
                        return new Data_Tuple.Tuple(true, flattenValues(_16.value0));
                    };
                    if (_15.length >= 1) {
                        var _31 = _15.slice(1);
                        var _25 = Data_Map.lookup(Data_Char.ordChar)(_15[0])(_16.value0);
                        if (_25 instanceof Data_Maybe.Just) {
                            _15 = _31;
                            _16 = _25.value0.value1;
                            continue tco;
                        };
                        if (_25 instanceof Data_Maybe.Nothing) {
                            return new Data_Tuple.Tuple(false, flattenValues(_16.value0));
                        };
                        throw new Error("Failed pattern match");
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
        return findTerms(s)(d);
    };
};
var pos = function (_9) {
    return _9.value0.pos;
};
var numLines = function (doc) {
    var ns = Data_Array.range(0)(Data_Array.length(doc));
    return Prelude.flip(Data_Tuple.zip)(ns)(doc);
};
var makeLists = Prelude["<$>"](Data_Array.functorArray)(function (_4) {
    return new Data_Tuple.Tuple(_4.value0, [ new Data_Tuple.Tuple(_4.value1.value0, _4.value1.value1) ]);
});
var lines = function (s) {
    return Prelude["<$>"](Data_Array.functorArray)(Data_String.trim)(Data_String.split("\n")(s));
};
var line = function (_10) {
    return _10.value0.line;
};
var toTuple = function (iw) {
    return new Data_Tuple.Tuple(word(iw), new Data_Tuple.Tuple(pos(iw), line(iw)));
};
var isUpperCaseLetter = function (ch) {
    return Data_Char.toCharCode(ch) >= 65 && Data_Char.toCharCode(ch) <= 90;
};
var isLowerCaseLetter = function (ch) {
    return Data_Char.toCharCode(ch) >= 97 && Data_Char.toCharCode(ch) <= 122;
};
var isLetter = function (ch) {
    return isUpperCaseLetter(ch) || isLowerCaseLetter(ch);
};
var isAscii = function (ch) {
    return Data_Char.toCharCode(ch) >= 0 && Data_Char.toCharCode(ch) <= 127;
};
var groupByLine = Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](Data_Array.functorArray)(Data_Array.sortBy(Data_Function.on(Prelude.compare(Prelude.ordNumber))(pos))))(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.groupBy(Data_Function.on(Prelude["=="](Prelude.eqNumber))(line)))(Data_Array.sortBy(Data_Function.on(Prelude.compare(Prelude.ordNumber))(line))));
var getWordIndex = function (_8) {
    return function (w) {
        var matches = searchTermsFromPartial(Data_String.toCharArray(w))(_8.value1);
        var partialResults = (function () {
            var _49 = Data_Tuple.fst(matches);
            if (_49) {
                return Data_Array.concatMap(function (m) {
                    return Data_Maybe_Unsafe.fromJust(Data_Map.lookup(Prelude.ordString)(m)(_8.value0));
                })(Prelude["<$>"](Data_Array.functorArray)(Data_String.fromCharArray)(Data_Tuple.snd(matches)));
            };
            if (!_49) {
                return [  ];
            };
            throw new Error("Failed pattern match");
        })();
        return Data_Maybe.fromMaybe(partialResults)(Prelude["<$>"](Data_Maybe.functorMaybe)(function (_1) {
            return Prelude["++"](Data_Array.semigroupArray)(_1)(partialResults);
        })(Data_Map.lookup(Prelude.ordString)(w)(_8.value0)));
    };
};
var getIndexedWords = function (i) {
    return Data_Array.concatMap(function (w) {
        return Prelude["<$>"](Data_Array.functorArray)(function (_7) {
            return new IndexedWord({
                word: w, 
                pos: _7.value0, 
                line: _7.value1
            });
        })(getWordIndex(i)(w));
    });
};
var equalTermsAndResults = function (ws) {
    return function (rs) {
        var ws$prime = Prelude["<$>"](Data_Array.functorArray)(word)(rs);
        return Data_Array.length(ws) <= Data_Array.length(ws$prime) && Data_String.indexOf(Data_String.joinWith(",")(Data_Array.sort(Prelude.ordString)(ws)))(Data_String.joinWith(",")(Data_Array.sort(Prelude.ordString)(ws$prime))) > -1;
    };
};
var createPartialTermIndex = (function () {
    var createPartialTermIndex$prime = function (_14) {
        if (_14.length === 0) {
            return new D(Data_Map.empty);
        };
        return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Foldable.foldl(Data_Foldable.foldableArray)(function (_6) {
            return function (_5) {
                return D.create(Data_Map.insert(Data_Char.ordChar)(_5.value0)(new Data_Tuple.Tuple(_5.value1, createPartialTermIndex$prime(Prelude["<$>"](Data_Array.functorArray)(Data_Array.drop(1))(_5.value1))))(_6.value0));
            };
        })(new D(Data_Map.empty)))(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](Data_Array.functorArray)(function (ws$prime) {
            return new Data_Tuple.Tuple(Data_Array_Unsafe.head(Data_Array_Unsafe.head(ws$prime)), ws$prime);
        }))(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.groupBy(Data_Function.on(Prelude["=="](Data_Char.eqChar))(Data_Array_Unsafe.head)))(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.sortBy(Data_Function.on(Prelude.compare(Data_Char.ordChar))(Data_Array_Unsafe.head)))(Data_Array.filter(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(Data_Array["null"]))))))(_14);
    };
    return Prelude["<<<"](Prelude.semigroupoidArr)(createPartialTermIndex$prime)(Prelude["<$>"](Data_Array.functorArray)(Data_String.toCharArray));
})();
var both = Control_Apply.lift2(Prelude.applyArr)(Prelude["&&"](Prelude.boolLikeBoolean));
var cleanWords = Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](Data_Array.functorArray)(Data_String.toLower))(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](Data_Array.functorArray)(Data_String.fromCharArray))(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.filter(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(Data_Array["null"])))(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](Data_Array.functorArray)(Data_Array.filter(both(isLetter)(isAscii))))(Prelude["<$>"](Data_Array.functorArray)(Data_String.toCharArray)))));
var numWords = function (line_1) {
    var ws = cleanWords(words(line_1));
    var ns = Data_Array.range(0)(Data_Array.length(ws));
    return Prelude.flip(Data_Tuple.zip)(ns)(ws);
};
var search = function (i) {
    return function (s) {
        var cleaned_words = Prelude["<<<"](Prelude.semigroupoidArr)(cleanWords)(words)(s);
        var plwords = getIndexedWords(i)(cleaned_words);
        var predicate = equalTermsAndResults(cleaned_words);
        return Prelude["<$>"](Data_Array.functorArray)(toTuple)(Data_Array.concat(Data_Array.filter(predicate)(groupByLine(plwords))));
    };
};
var searchLineNumbers = function (i) {
    return function (s) {
        return Prelude["<$>"](Data_Array.functorArray)(Data_Array_Unsafe.head)(Data_Array.group(Prelude.eqNumber)(Data_Array.sort(Prelude.ordNumber)(Prelude["<$>"](Data_Array.functorArray)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Tuple.snd)(Data_Tuple.snd))(search(i)(s)))));
    };
};
var allNumWords = function (_0) {
    return Prelude[">>="](Data_Array.bindArray)(_0)(function (_3) {
        return Prelude["<$>"](Data_Array.functorArray)(function (_2) {
            return new Data_Tuple.Tuple(_2.value0, new Data_Tuple.Tuple(_2.value1, _3.value1));
        })(numWords(_3.value0));
    });
};
var accumulate = (function () {
    var f = function (_12) {
        return function (_13) {
            if (_12.length === 0) {
                return [ _13 ];
            };
            if (_12.length >= 1) {
                var _75 = _12.slice(1);
                if (_13.value1.length === 1 && (_12[0]).value0 === _13.value0) {
                    return Prelude[":"](new Data_Tuple.Tuple((_12[0]).value0, Prelude[":"](_13.value1[0])((_12[0]).value1)))(_75);
                };
            };
            if (_12.length >= 1) {
                var _82 = _12.slice(1);
                if (_13.value1.length === 1 && (_12[0]).value0 !== _13.value0) {
                    return Prelude[":"](new Data_Tuple.Tuple(_13.value0, [ _13.value1[0] ]))(Prelude[":"](new Data_Tuple.Tuple((_12[0]).value0, (_12[0]).value1))(_82));
                };
            };
            throw new Error("Failed pattern match");
        };
    };
    return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)([  ]);
})();
var createTermIndex = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Map.fromList(Prelude.ordString))(Prelude["<<<"](Prelude.semigroupoidArr)(accumulate)(Prelude["<<<"](Prelude.semigroupoidArr)(makeLists)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.sort(Data_Tuple.ordTuple(Prelude.ordString)(Data_Tuple.ordTuple(Prelude.ordNumber)(Prelude.ordNumber))))(Prelude["<<<"](Prelude.semigroupoidArr)(allNumWords)(numLines)))));
var createIndex = function (doc) {
    var index = createTermIndex(doc);
    return new Data_Tuple.Tuple(index, createPartialTermIndex(Data_Map.keys(index)));
};
module.exports = {
    D: D, 
    IndexedWord: IndexedWord, 
    searchLineNumbers: searchLineNumbers, 
    search: search, 
    toTuple: toTuple, 
    equalTermsAndResults: equalTermsAndResults, 
    groupByLine: groupByLine, 
    getIndexedWords: getIndexedWords, 
    word: word, 
    line: line, 
    pos: pos, 
    getWordIndex: getWordIndex, 
    createIndex: createIndex, 
    searchTermsFromPartial: searchTermsFromPartial, 
    createPartialTermIndex: createPartialTermIndex, 
    createTermIndex: createTermIndex, 
    accumulate: accumulate, 
    makeLists: makeLists, 
    allNumWords: allNumWords, 
    cleanWords: cleanWords, 
    isAscii: isAscii, 
    isLetter: isLetter, 
    isLowerCaseLetter: isLowerCaseLetter, 
    isUpperCaseLetter: isUpperCaseLetter, 
    numWords: numWords, 
    numLines: numLines, 
    words: words, 
    lines: lines, 
    both: both
};
