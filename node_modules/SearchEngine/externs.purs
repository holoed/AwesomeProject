-- Generated by psc-make version 0.6.9.5
module SearchEngine where
import Control.Apply ()
import Prelude ()
import Data.String ()
import Data.Array ()
import Data.Tuple ()
import SearchEngine ()
import Data.Char ()
import Data.Foldable ()
import Data.Map ()
import Data.Array.Unsafe ()
import Data.Maybe.Unsafe ()
import Data.Maybe ()
import Prim ()
import Prelude ()
import Data.Maybe.Unsafe ()
import Data.Map ()
import Control.Apply ()
import Data.Tuple ()
import Data.String ()
import Data.Char ()
import Data.Array ()
import Data.Foldable ()
import Data.Maybe ()
import Data.Function ()
import Data.Array.Unsafe ()
data PartialTermIndex = D (Data.Map.Map Data.Char.Char (Data.Tuple.Tuple [[Data.Char.Char]] SearchEngine.PartialTermIndex))
data IndexedWord = IndexedWord { line :: SearchEngine.LineNumber, pos :: SearchEngine.Pos, word :: SearchEngine.Word }
type Index = Data.Map.Map SearchEngine.Word [Data.Tuple.Tuple SearchEngine.Pos SearchEngine.LineNumber]
type Pos = Prim.Number
type LineNumber = Prim.Number
type Word = Prim.String
type Line = Prim.String
type Doc = [SearchEngine.Line]
foreign import searchLineNumbers :: Data.Tuple.Tuple SearchEngine.Index SearchEngine.PartialTermIndex -> Prim.String -> [SearchEngine.LineNumber]
foreign import search :: Data.Tuple.Tuple SearchEngine.Index SearchEngine.PartialTermIndex -> Prim.String -> [Data.Tuple.Tuple SearchEngine.Word (Data.Tuple.Tuple SearchEngine.Pos SearchEngine.LineNumber)]
foreign import toTuple :: SearchEngine.IndexedWord -> Data.Tuple.Tuple SearchEngine.Word (Data.Tuple.Tuple SearchEngine.Pos SearchEngine.LineNumber)
foreign import consecutiveWords :: [SearchEngine.IndexedWord] -> Prim.Boolean
foreign import equalTermsAndResults :: [SearchEngine.Word] -> [SearchEngine.IndexedWord] -> Prim.Boolean
foreign import groupByLine :: [SearchEngine.IndexedWord] -> [[SearchEngine.IndexedWord]]
foreign import getIndexedWords :: Data.Tuple.Tuple SearchEngine.Index SearchEngine.PartialTermIndex -> [SearchEngine.Word] -> [SearchEngine.IndexedWord]
foreign import word :: SearchEngine.IndexedWord -> SearchEngine.Word
foreign import line :: SearchEngine.IndexedWord -> SearchEngine.LineNumber
foreign import pos :: SearchEngine.IndexedWord -> SearchEngine.Pos
foreign import getWordIndex :: Data.Tuple.Tuple SearchEngine.Index SearchEngine.PartialTermIndex -> Prim.String -> [Data.Tuple.Tuple SearchEngine.Pos SearchEngine.LineNumber]
foreign import createIndex :: SearchEngine.Doc -> Data.Tuple.Tuple SearchEngine.Index SearchEngine.PartialTermIndex
foreign import searchTermsFromPartial :: [Data.Char.Char] -> SearchEngine.PartialTermIndex -> Data.Tuple.Tuple Prim.Boolean [[Data.Char.Char]]
foreign import createPartialTermIndex :: [Prim.String] -> SearchEngine.PartialTermIndex
foreign import createTermIndex :: SearchEngine.Doc -> SearchEngine.Index
foreign import accumulate :: [Data.Tuple.Tuple SearchEngine.Word [Data.Tuple.Tuple SearchEngine.Pos SearchEngine.LineNumber]] -> [Data.Tuple.Tuple SearchEngine.Word [Data.Tuple.Tuple SearchEngine.Pos SearchEngine.LineNumber]]
foreign import makeLists :: [Data.Tuple.Tuple SearchEngine.Word (Data.Tuple.Tuple SearchEngine.Pos SearchEngine.LineNumber)] -> [Data.Tuple.Tuple SearchEngine.Word [Data.Tuple.Tuple SearchEngine.Pos SearchEngine.LineNumber]]
foreign import allNumWords :: [Data.Tuple.Tuple SearchEngine.Line SearchEngine.LineNumber] -> [Data.Tuple.Tuple SearchEngine.Word (Data.Tuple.Tuple SearchEngine.Pos SearchEngine.LineNumber)]
foreign import cleanWords :: [SearchEngine.Word] -> [SearchEngine.Word]
foreign import isAscii :: Data.Char.Char -> Prim.Boolean
foreign import isLetter :: Data.Char.Char -> Prim.Boolean
foreign import isLowerCaseLetter :: Data.Char.Char -> Prim.Boolean
foreign import isUpperCaseLetter :: Data.Char.Char -> Prim.Boolean
foreign import numWords :: SearchEngine.Line -> [Data.Tuple.Tuple SearchEngine.Word SearchEngine.Pos]
foreign import numLines :: SearchEngine.Doc -> [Data.Tuple.Tuple SearchEngine.Line SearchEngine.LineNumber]
foreign import words :: Prim.String -> [SearchEngine.Word]
foreign import lines :: Prim.String -> [SearchEngine.Line]
foreign import both :: forall a. (a -> Prim.Boolean) -> (a -> Prim.Boolean) -> a -> Prim.Boolean
