// Generated by psc-make version 0.6.9.5
"use strict";
var Data_Sequence_Internal = require("Data.Sequence.Internal");
var Data_FingerTree = require("Data.FingerTree");
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Traversable = require("Data.Traversable");
var Data_Unfoldable = require("Data.Unfoldable");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Lazy = require("Data.Lazy");
var Data_Tuple = require("Data.Tuple");
var Data_Monoid = require("Data.Monoid");
var Data_Maybe = require("Data.Maybe");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var Data_Array = require("Data.Array");
var Seq = function (x) {
    return x;
};
var unsnoc = function (_648) {
    var _3082 = Data_FingerTree.viewR(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(_648);
    if (_3082 instanceof Data_FingerTree.NilR) {
        return Data_Maybe.Nothing.value;
    };
    if (_3082 instanceof Data_FingerTree.SnocR) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(Data_Lazy.force(_3082.value0), Data_Sequence_Internal.getElem(_3082.value1)));
    };
    throw new Error("Failed pattern match");
};
var unsafeIndex = function (_650) {
    return function (i) {
        var _3087 = Data_FingerTree.unsafeSplitTree(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(function (n) {
            return i < Data_Monoid_Additive.runAdditive(n);
        })(0)(_650);
        return Data_Sequence_Internal.getElem(_3087.value1);
    };
};
var unsafeAdjust = function (f) {
    return function (i) {
        return function (_651) {
            var _3094 = Data_FingerTree.unsafeSplitTree(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(function (n) {
                return i < Data_Monoid_Additive.runAdditive(n);
            })(0)(_651);
            var g = Data_Sequence_Internal.unsafeCoerce(f);
            var l$prime = Data_FingerTree.cons(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(g(_3094.value1))(Data_Lazy.force(_3094.value0));
            return Data_FingerTree.append(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(l$prime)(Data_Lazy.force(_3094.value2));
        };
    };
};
var uncons = function (_647) {
    var _3099 = Data_FingerTree.viewL(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(_647);
    if (_3099 instanceof Data_FingerTree.NilL) {
        return Data_Maybe.Nothing.value;
    };
    if (_3099 instanceof Data_FingerTree.ConsL) {
        return new Data_Maybe.Just(new Data_Tuple.Tuple(Data_Sequence_Internal.getElem(_3099.value0), Data_Lazy.force(_3099.value1)));
    };
    throw new Error("Failed pattern match");
};
var splitAt$prime = function (i) {
    return function (_649) {
        var tuple = Data_FingerTree.split(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(function (n) {
            return i < Data_Monoid_Additive.runAdditive(n);
        })(_649);
        var seqify = function (__dict_Functor_0) {
            return Data_Sequence_Internal.unsafeCoerce;
        };
        return seqify(Data_Lazy.functorLazy)(tuple);
    };
};
var take = function (i) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Lazy.force)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Tuple.fst)(splitAt$prime(i)));
};
var splitAt = function (i) {
    return function (xs) {
        var tuple = splitAt$prime(i)(xs);
        var forceBoth = Data_Sequence_Internal["***"](Data_Lazy.force)(Data_Lazy.force);
        return forceBoth(tuple);
    };
};
var snoc = function (_653) {
    return function (x) {
        return Data_FingerTree.snoc(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(_653)(x);
    };
};
var $$null = function (_646) {
    if (_646 instanceof Data_FingerTree.Empty) {
        return true;
    };
    return false;
};
var length = function (_645) {
    return Data_Monoid_Additive.runAdditive(Data_Sequence_Internal.measure(Data_FingerTree.measuredFingerTree(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem))(_645));
};
var last = function (_659) {
    return Data_Sequence_Internal.fmapGetElem(Data_Maybe.functorMaybe)(Data_FingerTree.last(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(_659));
};
var inBounds = function (seq) {
    return function (i) {
        return 0 <= i && i < length(seq);
    };
};
var index = function (xs) {
    return function (i) {
        var _3109 = inBounds(xs)(i);
        if (_3109) {
            return new Data_Maybe.Just(unsafeIndex(xs)(i));
        };
        if (!_3109) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
};
var head = function (_656) {
    return Data_Sequence_Internal.fmapGetElem(Data_Maybe.functorMaybe)(Data_FingerTree.head(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(_656));
};
var functorSeq = new Prelude.Functor(function (f) {
    return function (_670) {
        var g = Data_Sequence_Internal.unsafeCoerce(f);
        return Prelude["<$>"](Data_FingerTree.functorFingerTree)(g)(_670);
    };
});
var fromSeq = function (__dict_Functor_2) {
    return function (__dict_Unfoldable_3) {
        return function (_660) {
            return Data_Sequence_Internal.fmapGetElem(__dict_Functor_2)(Data_FingerTree.unfoldLeft(__dict_Unfoldable_3)(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(_660));
        };
    };
};
var showSeq = function (__dict_Show_4) {
    return new Prelude.Show(function (xs) {
        return "(toSeq [" + (Data_Sequence_Internal.strJoin(__dict_Show_4)(",")(fromSeq(Data_Array.functorArray)(Data_Unfoldable.unfoldableArray)(xs)) + "])");
    });
};
var foldableSeq = new Data_Foldable.Foldable(function (__dict_Monoid_5) {
    return function (f) {
        return function (_668) {
            return Data_Foldable.foldMap(Data_FingerTree.foldableFingerTree)(__dict_Monoid_5)(Data_Sequence_Internal.liftElem(f))(_668);
        };
    };
}, function (f) {
    return function (z) {
        return function (_667) {
            return Data_Foldable.foldl(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.lift2Elem(f))(z)(_667);
        };
    };
}, function (f) {
    return function (z) {
        return function (_666) {
            return Data_Foldable.foldr(Data_FingerTree.foldableFingerTree)(Data_Sequence_Internal.liftElem(f))(z)(_666);
        };
    };
});
var fmapSeq = function (__dict_Functor_6) {
    return Data_Sequence_Internal.unsafeCoerce;
};
var init = function (_658) {
    return fmapSeq(Data_Maybe.functorMaybe)(Data_FingerTree.init(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(_658));
};
var tail = function (_657) {
    return fmapSeq(Data_Maybe.functorMaybe)(Data_FingerTree.tail(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(_657));
};
var traversableSeq = new Data_Traversable.Traversable(function () {
    return foldableSeq;
}, function () {
    return functorSeq;
}, function (__dict_Applicative_8) {
    return Data_Traversable.traverse(traversableSeq)(__dict_Applicative_8)(Prelude.id(Prelude.categoryArr));
}, function (__dict_Applicative_7) {
    return function (f) {
        return function (_669) {
            return fmapSeq((__dict_Applicative_7["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Traversable.traverse(Data_FingerTree.traversableFingerTree)(__dict_Applicative_7)(Data_Traversable.traverse(Data_Sequence_Internal.traversableElem)(__dict_Applicative_7)(f))(_669));
        };
    };
});
var filter = function (p) {
    return function (_661) {
        var q = Data_Sequence_Internal.unsafeCoerce(p);
        return Data_FingerTree.filter(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(q)(_661);
    };
};
var eqSeq = function (__dict_Eq_9) {
    return new Prelude.Eq(function (xs) {
        return function (ys) {
            return !Prelude["=="](eqSeq(__dict_Eq_9))(xs)(ys);
        };
    }, function (_664) {
        return function (_665) {
            return Data_FingerTree.eqFingerTree(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(Data_Sequence_Internal.eqElem(__dict_Eq_9))(_664)(_665);
        };
    });
};
var ordSeq = function (__dict_Ord_1) {
    return new Prelude.Ord(function () {
        return eqSeq(__dict_Ord_1["__superclass_Prelude.Eq_0"]());
    }, function (_662) {
        return function (_663) {
            return Data_FingerTree.compareFingerTree(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(Data_Sequence_Internal.ordElem(__dict_Ord_1))(_662)(_663);
        };
    });
};
var empty = Data_FingerTree.Empty.value;
var drop = function (i) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Lazy.force)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Tuple.snd)(splitAt$prime(i)));
};
var cons = function (x) {
    return function (_652) {
        return Data_FingerTree.cons(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(x)(_652);
    };
};
var singleton = function (x) {
    return cons(x)(empty);
};
var toSeq = function (__dict_Foldable_10) {
    return Data_Foldable.foldr(__dict_Foldable_10)(cons)(empty);
};
var unfoldableSeq = new Data_Unfoldable.Unfoldable(function (f) {
    return function (xs) {
        var _3134 = f(xs);
        if (_3134 instanceof Data_Maybe.Just) {
            return cons(_3134.value0.value0)(Data_Unfoldable.unfoldr(unfoldableSeq)(f)(_3134.value0.value1));
        };
        if (_3134 instanceof Data_Maybe.Nothing) {
            return empty;
        };
        throw new Error("Failed pattern match");
    };
});
var append = function (_654) {
    return function (_655) {
        return Data_FingerTree.append(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Data_Sequence_Internal.measuredElem)(_654)(_655);
    };
};
var monadSeq = new Prelude.Monad(function () {
    return applicativeSeq;
}, function () {
    return bindSeq;
});
var bindSeq = new Prelude.Bind(function (xs) {
    return function (f) {
        var add = function (ys) {
            return function (x) {
                return append(ys)(f(x));
            };
        };
        return Data_Foldable.foldl(foldableSeq)(add)(empty)(xs);
    };
}, function () {
    return applySeq;
});
var applySeq = new Prelude.Apply(Prelude.ap(monadSeq), function () {
    return functorSeq;
});
var applicativeSeq = new Prelude.Applicative(function () {
    return applySeq;
}, singleton);
var semigroupSeq = new Prelude.Semigroup(append);
var monoidSeq = new Data_Monoid.Monoid(function () {
    return semigroupSeq;
}, empty);
var altSeq = new Control_Alt.Alt(append, function () {
    return functorSeq;
});
var plusSeq = new Control_Plus.Plus(function () {
    return altSeq;
}, empty);
var alternativeSeq = new Control_Alternative.Alternative(function () {
    return plusSeq;
}, function () {
    return applicativeSeq;
});
var monadPlusSeq = new Control_MonadPlus.MonadPlus(function () {
    return alternativeSeq;
}, function () {
    return monadSeq;
});
var adjust = function (f) {
    return function (i) {
        return function (xs) {
            var _3140 = inBounds(xs)(i);
            if (_3140) {
                return unsafeAdjust(f)(i)(xs);
            };
            if (!_3140) {
                return xs;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var replace = function (x) {
    return adjust(Prelude["const"](x));
};
module.exports = {
    fromSeq: fromSeq, 
    replace: replace, 
    adjust: adjust, 
    index: index, 
    filter: filter, 
    drop: drop, 
    take: take, 
    splitAt: splitAt, 
    last: last, 
    init: init, 
    tail: tail, 
    head: head, 
    unsnoc: unsnoc, 
    uncons: uncons, 
    inBounds: inBounds, 
    "null": $$null, 
    length: length, 
    toSeq: toSeq, 
    append: append, 
    snoc: snoc, 
    cons: cons, 
    singleton: singleton, 
    empty: empty, 
    ordSeq: ordSeq, 
    eqSeq: eqSeq, 
    showSeq: showSeq, 
    semigroupSeq: semigroupSeq, 
    monoidSeq: monoidSeq, 
    foldableSeq: foldableSeq, 
    traversableSeq: traversableSeq, 
    unfoldableSeq: unfoldableSeq, 
    functorSeq: functorSeq, 
    applySeq: applySeq, 
    applicativeSeq: applicativeSeq, 
    bindSeq: bindSeq, 
    monadSeq: monadSeq, 
    altSeq: altSeq, 
    plusSeq: plusSeq, 
    alternativeSeq: alternativeSeq, 
    monadPlusSeq: monadPlusSeq
};
