// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Comonad = require("Control.Comonad");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var First = function (x) {
    return x;
};
var showFirst = function (__dict_Show_0) {
    return new Prelude.Show(function (_313) {
        return "First (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_0))(_313) + ")");
    });
};
var semigroupFirst = new Prelude.Semigroup(function (_314) {
    return function (second) {
        if (_314 instanceof Data_Maybe.Just) {
            return _314;
        };
        return second;
    };
});
var runFirst = function (_302) {
    return _302;
};
var monoidFirst = new Data_Monoid.Monoid(function () {
    return semigroupFirst;
}, Data_Maybe.Nothing.value);
var functorFirst = new Prelude.Functor(function (f) {
    return function (_309) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(_309);
    };
});
var extendFirst = new Control_Extend.Extend(function (f) {
    return function (x) {
        return Control_Extend["<<="](extendFirst)(f)(x);
    };
}, function () {
    return functorFirst;
});
var eqFirst = function (__dict_Eq_2) {
    return new Prelude.Eq(function (_305) {
        return function (_306) {
            return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_2))(_305)(_306);
        };
    }, function (_303) {
        return function (_304) {
            return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_2))(_303)(_304);
        };
    });
};
var ordFirst = function (__dict_Ord_1) {
    return new Prelude.Ord(function () {
        return eqFirst(__dict_Ord_1["__superclass_Prelude.Eq_0"]());
    }, function (_307) {
        return function (_308) {
            return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_1))(_307)(_308);
        };
    });
};
var applyFirst = new Prelude.Apply(function (_310) {
    return function (_311) {
        return Prelude["<*>"](Data_Maybe.applyMaybe)(_310)(_311);
    };
}, function () {
    return functorFirst;
});
var bindFirst = new Prelude.Bind(function (_312) {
    return function (f) {
        return Prelude[">>="](Data_Maybe.bindMaybe)(_312)(Prelude["<<<"](Prelude.semigroupoidArr)(runFirst)(f));
    };
}, function () {
    return applyFirst;
});
var applicativeFirst = new Prelude.Applicative(function () {
    return applyFirst;
}, Prelude["<<<"](Prelude.semigroupoidArr)(First)(Prelude.pure(Data_Maybe.applicativeMaybe)));
var monadFirst = new Prelude.Monad(function () {
    return applicativeFirst;
}, function () {
    return bindFirst;
});
module.exports = {
    First: First, 
    runFirst: runFirst, 
    eqFirst: eqFirst, 
    ordFirst: ordFirst, 
    functorFirst: functorFirst, 
    applyFirst: applyFirst, 
    applicativeFirst: applicativeFirst, 
    bindFirst: bindFirst, 
    monadFirst: monadFirst, 
    extendFirst: extendFirst, 
    showFirst: showFirst, 
    semigroupFirst: semigroupFirst, 
    monoidFirst: monoidFirst
};
