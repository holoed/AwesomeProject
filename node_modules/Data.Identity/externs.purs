-- Generated by psc-make version 0.6.9.5
module Data.Identity where
import Prelude ()
import Data.Identity ()
import Prim ()
import Prelude ()
import Control.Comonad ()
import Control.Extend ()
import Data.Foldable ()
import Data.Traversable ()
newtype Identity (a :: *) = Identity a
foreign import runIdentity :: forall a. Data.Identity.Identity a -> a
foreign import instance eqIdentity :: (Prelude.Eq a) => Prelude.Eq (Data.Identity.Identity a)
foreign import instance ordIdentity :: (Prelude.Ord a) => Prelude.Ord (Data.Identity.Identity a)
foreign import instance showConst :: (Prelude.Show a) => Prelude.Show (Data.Identity.Identity a)
foreign import instance functorIdentity :: Prelude.Functor Data.Identity.Identity
foreign import instance applyIdentity :: Prelude.Apply Data.Identity.Identity
foreign import instance applicativeIdentity :: Prelude.Applicative Data.Identity.Identity
foreign import instance bindIdentity :: Prelude.Bind Data.Identity.Identity
foreign import instance monadIdentity :: Prelude.Monad Data.Identity.Identity
foreign import instance extendIdentity :: Control.Extend.Extend Data.Identity.Identity
foreign import instance comonadIdentity :: Control.Comonad.Comonad Data.Identity.Identity
foreign import instance foldableIdentity :: Data.Foldable.Foldable Data.Identity.Identity
foreign import instance traversableIdentity :: Data.Traversable.Traversable Data.Identity.Identity
