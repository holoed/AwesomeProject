// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Test_Spec_Errors = require("Test.Spec.Errors");
var Data_String = require("Data.String");
var Data_Foldable = require("Data.Foldable");
var Data_Array = require("Data.Array");
var Debug_Trace = require("Debug.Trace");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Exception = require("Control.Monad.Eff.Exception");
var Control_Monad_Extras = require("Control.Monad.Extras");
var Test_Spec = require("Test.Spec");
var Test_Spec_Console = require("Test.Spec.Console");
var Test_Spec_Summary = require("Test.Spec.Summary");
var Describe = (function () {
    function Describe(value0) {
        this.value0 = value0;
    };
    Describe.create = function (value0) {
        return new Describe(value0);
    };
    return Describe;
})();
var It = (function () {
    function It(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    It.create = function (value0) {
        return function (value1) {
            return new It(value0, value1);
        };
    };
    return It;
})();
var Pending = (function () {
    function Pending(value0) {
        this.value0 = value0;
    };
    Pending.create = function (value0) {
        return new Pending(value0);
    };
    return Pending;
})();
var showEntry = new Prelude.Show(function (_633) {
    if (_633 instanceof Describe) {
        return "Describe \"" + (Data_String.joinWith(" Â» ")(_633.value0) + "\"");
    };
    if (_633 instanceof It && _633.value1 instanceof Test_Spec.Success) {
        return "It \"" + (_633.value0 + "\" Success");
    };
    if (_633 instanceof It && _633.value1 instanceof Test_Spec.Failure) {
        return "It \"" + (_633.value0 + ("\" (Failure \"" + (Test_Spec_Errors.errorMessage(_633.value1.value0) + "\")")));
    };
    if (_633 instanceof Pending) {
        return "Pending \"" + (_633.value0 + "\"");
    };
    throw new Error("Failed pattern match");
});
var eqEntry = new Prelude.Eq(function (e1) {
    return function (e2) {
        return !Prelude["=="](eqEntry)(e1)(e2);
    };
}, function (_631) {
    return function (_632) {
        if (_631 instanceof Describe && _632 instanceof Describe) {
            return Prelude["=="](Prelude.eqArray(Prelude.eqString))(_631.value0)(_632.value0);
        };
        if (_631 instanceof It && (_631.value1 instanceof Test_Spec.Success && (_632 instanceof It && _632.value1 instanceof Test_Spec.Success))) {
            return _631.value0 === _632.value0;
        };
        if (_631 instanceof It && (_631.value1 instanceof Test_Spec.Failure && (_632 instanceof It && _632.value1 instanceof Test_Spec.Failure))) {
            return _631.value0 === _632.value0 && Test_Spec_Errors.errorMessage(_631.value1.value0) === Test_Spec_Errors.errorMessage(_632.value1.value0);
        };
        if (_631 instanceof It && _632 instanceof It) {
            return false;
        };
        if (_631 instanceof Pending && _632 instanceof Pending) {
            return _631.value0 === _632.value0;
        };
        throw new Error("Failed pattern match");
    };
});
var countDescribes = function (groups) {
    var f = function (c) {
        return function (_634) {
            if (_634 instanceof Describe) {
                return c + 1;
            };
            return c;
        };
    };
    return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(0)(groups);
};
var collapse = function (_630) {
    if (_630 instanceof Test_Spec.It) {
        return [ new It(_630.value0, _630.value1) ];
    };
    if (_630 instanceof Test_Spec.Pending) {
        return [ new Pending(_630.value0) ];
    };
    if (_630 instanceof Test_Spec.Describe) {
        var sub = Data_Array.concatMap(collapse)(_630.value1);
        var prependName = function (_635) {
            if (_635 instanceof Describe) {
                return new Describe(Prelude[":"](_630.value0)(_635.value0));
            };
            return _635;
        };
        var c = countDescribes(sub);
        var _3038 = c === 0;
        if (_3038) {
            return Prelude[":"](new Describe([ _630.value0 ]))(sub);
        };
        if (!_3038) {
            return Data_Array.map(prependName)(sub);
        };
        throw new Error("Failed pattern match");
    };
    throw new Error("Failed pattern match");
};
module.exports = {
    Describe: Describe, 
    It: It, 
    Pending: Pending, 
    collapse: collapse, 
    eqEntry: eqEntry, 
    showEntry: showEntry
};
