-- Generated by psc-make version 0.6.9.5
module Control.Monad.State where
import Prelude ()
import Data.Identity ()
import Control.Monad.State.Trans ()
import Data.Tuple ()
import Control.Monad.State ()
import Prim ()
import Prelude ()
import Control.Monad.State.Trans ()
import Data.Identity ()
import Data.Tuple ()
type State (s :: *) = Control.Monad.State.Trans.StateT s Data.Identity.Identity
foreign import withState :: forall s a. (s -> s) -> Control.Monad.State.State s a -> Control.Monad.State.State s a
foreign import mapState :: forall s a b. (Data.Tuple.Tuple a s -> Data.Tuple.Tuple b s) -> Control.Monad.State.State s a -> Control.Monad.State.State s b
foreign import execState :: forall s a. Control.Monad.State.State s a -> s -> s
foreign import evalState :: forall s a. Control.Monad.State.State s a -> s -> a
foreign import runState :: forall s a. Control.Monad.State.State s a -> s -> Data.Tuple.Tuple a s
