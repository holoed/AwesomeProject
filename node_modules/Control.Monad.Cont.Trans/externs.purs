-- Generated by psc-make version 0.6.9.5
module Control.Monad.Cont.Trans where
import Prelude ()
import Control.Monad.Cont.Trans ()
import Prim ()
import Prelude ()
import Control.Monad.Trans ()
newtype ContT (r :: *) (m :: * -> *) (a :: *) = ContT ((a -> m r) -> m r)
foreign import callCC :: forall r m a b. ((a -> Control.Monad.Cont.Trans.ContT r m b) -> Control.Monad.Cont.Trans.ContT r m a) -> Control.Monad.Cont.Trans.ContT r m a
foreign import withContT :: forall r m a b. ((b -> m r) -> a -> m r) -> Control.Monad.Cont.Trans.ContT r m a -> Control.Monad.Cont.Trans.ContT r m b
foreign import mapContT :: forall r m a. (m r -> m r) -> Control.Monad.Cont.Trans.ContT r m a -> Control.Monad.Cont.Trans.ContT r m a
foreign import runContT :: forall r m a. Control.Monad.Cont.Trans.ContT r m a -> (a -> m r) -> m r
foreign import instance functorContT :: (Prelude.Monad m) => Prelude.Functor (Control.Monad.Cont.Trans.ContT r m)
foreign import instance applyContT :: (Prelude.Functor m, Prelude.Monad m) => Prelude.Apply (Control.Monad.Cont.Trans.ContT r m)
foreign import instance applicativeContT :: (Prelude.Functor m, Prelude.Monad m) => Prelude.Applicative (Control.Monad.Cont.Trans.ContT r m)
foreign import instance bindContT :: (Prelude.Monad m) => Prelude.Bind (Control.Monad.Cont.Trans.ContT r m)
foreign import instance monadContT :: (Prelude.Monad m) => Prelude.Monad (Control.Monad.Cont.Trans.ContT r m)
foreign import instance monadTransContT :: Control.Monad.Trans.MonadTrans (Control.Monad.Cont.Trans.ContT r)
