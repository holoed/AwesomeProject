// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Lazy = require("Control.Lazy");
var Control_Extend = require("Control.Extend");
var Control_Comonad = require("Control.Comonad");
function defer(thunk) {    if (this instanceof defer) {      this.thunk = thunk;      return this;    } else {      return new defer(thunk);    }}defer.prototype.force = function () {    var value = this.thunk();    delete this.thunk;    this.force = function () {        return value;    };    return value;};;
function force(l) {  return l.force();};
var showLazy = function (__dict_Show_0) {
    return new Prelude.Show(function (x) {
        return "Lazy " + Prelude.show(__dict_Show_0)(force(x));
    });
};
var lazy1Lazy = new Control_Lazy.Lazy1(function (f) {
    return defer(function (_103) {
        return force(f(Prelude.unit));
    });
});
var functorLazy = new Prelude.Functor(function (f) {
    return function (l) {
        return defer(function (_98) {
            return f(force(l));
        });
    };
});
var extendLazy = new Control_Extend.Extend(function (f) {
    return function (x) {
        return defer(function (_102) {
            return f(x);
        });
    };
}, function () {
    return functorLazy;
});
var eqLazy = function (__dict_Eq_2) {
    return new Prelude.Eq(function (x) {
        return function (y) {
            return !Prelude["=="](eqLazy(__dict_Eq_2))(x)(y);
        };
    }, function (x) {
        return function (y) {
            return Prelude["=="](__dict_Eq_2)(force(x))(force(y));
        };
    });
};
var ordLazy = function (__dict_Ord_1) {
    return new Prelude.Ord(function () {
        return eqLazy(__dict_Ord_1["__superclass_Prelude.Eq_0"]());
    }, function (x) {
        return function (y) {
            return Prelude.compare(__dict_Ord_1)(force(x))(force(y));
        };
    });
};
var comonadLazy = new Control_Comonad.Comonad(function () {
    return extendLazy;
}, force);
var applyLazy = new Prelude.Apply(function (f) {
    return function (x) {
        return defer(function (_99) {
            return force(f)(force(x));
        });
    };
}, function () {
    return functorLazy;
});
var bindLazy = new Prelude.Bind(function (l) {
    return function (f) {
        return defer(function (_101) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(force)(Prelude["<<<"](Prelude.semigroupoidArr)(f)(force))(l);
        });
    };
}, function () {
    return applyLazy;
});
var applicativeLazy = new Prelude.Applicative(function () {
    return applyLazy;
}, function (a) {
    return defer(function (_100) {
        return a;
    });
});
var monadLazy = new Prelude.Monad(function () {
    return applicativeLazy;
}, function () {
    return bindLazy;
});
module.exports = {
    force: force, 
    defer: defer, 
    functorLazy: functorLazy, 
    applyLazy: applyLazy, 
    applicativeLazy: applicativeLazy, 
    bindLazy: bindLazy, 
    monadLazy: monadLazy, 
    extendLazy: extendLazy, 
    comonadLazy: comonadLazy, 
    eqLazy: eqLazy, 
    ordLazy: ordLazy, 
    showLazy: showLazy, 
    lazy1Lazy: lazy1Lazy
};
