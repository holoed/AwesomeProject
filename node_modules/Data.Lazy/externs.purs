-- Generated by psc-make version 0.6.9.5
module Data.Lazy where
import Prelude ()
import Data.Lazy ()
import Prim ()
import Prelude ()
import Control.Lazy ()
import Control.Extend ()
import Control.Comonad ()
--  | `Lazy a` represents lazily-computed values of type `a`.
--  |
--  | A lazy value is computed at most once - the result is saved
--  | after the first computation, and subsequent attempts to read
--  | the value simply return the saved value.
--  |
--  | `Lazy` values can be created with `defer`, or by using the provided
--  | type class instances.
--  |
--  | `Lazy` values can be evaluated by using the `force` function.
--  | Defer a computation, creating a `Lazy` value.
--  | Force evaluation of a `Lazy` value.
foreign import data Lazy :: * -> *
foreign import force :: forall a. Data.Lazy.Lazy a -> a
foreign import defer :: forall a. (Prelude.Unit -> a) -> Data.Lazy.Lazy a
foreign import instance functorLazy :: Prelude.Functor Data.Lazy.Lazy
foreign import instance applyLazy :: Prelude.Apply Data.Lazy.Lazy
foreign import instance applicativeLazy :: Prelude.Applicative Data.Lazy.Lazy
foreign import instance bindLazy :: Prelude.Bind Data.Lazy.Lazy
foreign import instance monadLazy :: Prelude.Monad Data.Lazy.Lazy
foreign import instance extendLazy :: Control.Extend.Extend Data.Lazy.Lazy
foreign import instance comonadLazy :: Control.Comonad.Comonad Data.Lazy.Lazy
foreign import instance eqLazy :: (Prelude.Eq a) => Prelude.Eq (Data.Lazy.Lazy a)
foreign import instance ordLazy :: (Prelude.Ord a) => Prelude.Ord (Data.Lazy.Lazy a)
foreign import instance showLazy :: (Prelude.Show a) => Prelude.Show (Data.Lazy.Lazy a)
foreign import instance lazy1Lazy :: Control.Lazy.Lazy1 Data.Lazy.Lazy
