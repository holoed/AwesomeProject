// Generated by psc-make version 0.6.9.5
"use strict";
var Control_Apply = require("Control.Apply");
var Prelude = require("Prelude");
var Data_String = require("Data.String");
var Data_Array = require("Data.Array");
var Data_Tuple = require("Data.Tuple");
var Data_Char = require("Data.Char");
var Data_Foldable = require("Data.Foldable");
var Data_Map = require("Data.Map");
var Data_Maybe = require("Data.Maybe");
var Debug_Trace = require("Debug.Trace");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var words = function (s) {
    return Prelude["<$>"](Data_Array.functorArray)(Data_String.trim)(Data_String.split(" ")(s));
};
var numLines = function (doc) {
    var ns = Data_Array.range(1)(Data_Array.length(doc));
    return Prelude.flip(Data_Tuple.zip)(ns)(doc);
};
var makeLists = Prelude["<$>"](Data_Array.functorArray)(function (_380) {
    return new Data_Tuple.Tuple(_380.value0, [ _380.value1 ]);
});
var main = Debug_Trace.trace("ready");
var lines = function (s) {
    return Prelude["<$>"](Data_Array.functorArray)(Data_String.trim)(Data_String.split("\n")(s));
};
var isUpperCaseLetter = function (ch) {
    return Data_Char.toCharCode(ch) >= 65 && Data_Char.toCharCode(ch) <= 90;
};
var isLowerCaseLetter = function (ch) {
    return Data_Char.toCharCode(ch) >= 97 && Data_Char.toCharCode(ch) <= 122;
};
var isLetter = function (ch) {
    return isUpperCaseLetter(ch) || isLowerCaseLetter(ch);
};
var isAscii = function (ch) {
    return Data_Char.toCharCode(ch) >= 0 && Data_Char.toCharCode(ch) <= 127;
};
var frequencies = function (__dict_Eq_0) {
    return function (__dict_Ord_1) {
        var count = function (_386) {
            return function (x) {
                if (_386.length === 0) {
                    return [ new Data_Tuple.Tuple(x, 1) ];
                };
                if (_386.length >= 1) {
                    var _1804 = _386.slice(1);
                    if (Prelude["=="](__dict_Eq_0)(x)((_386[0]).value0)) {
                        return Prelude[":"](new Data_Tuple.Tuple((_386[0]).value0, (_386[0]).value1 + 1))(_1804);
                    };
                };
                if (_386.length >= 1) {
                    var _1808 = _386.slice(1);
                    return Prelude[":"](new Data_Tuple.Tuple(x, 1))(Prelude[":"](new Data_Tuple.Tuple((_386[0]).value0, (_386[0]).value1))(_1808));
                };
                throw new Error("Failed pattern match");
            };
        };
        return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.sortBy(function (_382) {
            return function (_381) {
                return Prelude.compare(Prelude.ordNumber)(_381.value1)(_382.value1);
            };
        }))(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Foldable.foldl(Data_Foldable.foldableArray)(count)([  ]))(Data_Array.sort(__dict_Ord_1)));
    };
};
var both = Control_Apply.lift2(Prelude.applyArr)(Prelude["&&"](Prelude.boolLikeBoolean));
var cleanWords = Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](Data_Array.functorArray)(Data_String.toLower))(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](Data_Array.functorArray)(Data_String.fromCharArray))(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.filter(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(Data_Array["null"])))(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](Data_Array.functorArray)(Data_Array.filter(both(isLetter)(isAscii))))(Prelude["<$>"](Data_Array.functorArray)(Data_String.toCharArray)))));
var search = function (i) {
    return function (s) {
        var ws = cleanWords(words(s));
        var l = Data_Array.length(ws);
        var found = Data_Array.concat(Data_Array.concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(function (x) {
            return [ x ];
        }))(Prelude.flip(Data_Map.lookup(Prelude.ordString))(i)))(ws));
        return Prelude["<$>"](Data_Array.functorArray)(Data_Tuple.fst)(Data_Array.filter(function (_383) {
            return _383.value1 === l;
        })(frequencies(Prelude.eqNumber)(Prelude.ordNumber)(found)));
    };
};
var allNumWords = function (_0) {
    return Prelude[">>="](Data_Array.bindArray)(_0)(function (_379) {
        return Prelude["<$>"](Data_Array.functorArray)(function (w) {
            return new Data_Tuple.Tuple(w, _379.value1);
        })(cleanWords(words(_379.value0)));
    });
};
var accumulate = (function () {
    var f = function (_384) {
        return function (_385) {
            if (_384.length === 0) {
                return [ _385 ];
            };
            if (_384.length >= 1) {
                var _1829 = _384.slice(1);
                if (_385.value1.length === 1 && (_384[0]).value0 === _385.value0) {
                    return Prelude[":"](new Data_Tuple.Tuple((_384[0]).value0, Prelude[":"](_385.value1[0])((_384[0]).value1)))(_1829);
                };
            };
            if (_384.length >= 1) {
                var _1836 = _384.slice(1);
                if (_385.value1.length === 1 && (_384[0]).value0 !== _385.value0) {
                    return Prelude[":"](new Data_Tuple.Tuple(_385.value0, [ _385.value1[0] ]))(Prelude[":"](new Data_Tuple.Tuple((_384[0]).value0, (_384[0]).value1))(_1836));
                };
            };
            throw new Error("Failed pattern match");
        };
    };
    return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)([  ]);
})();
var createIndex = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Map.fromList(Prelude.ordString))(Prelude["<<<"](Prelude.semigroupoidArr)(accumulate)(Prelude["<<<"](Prelude.semigroupoidArr)(makeLists)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.sort(Data_Tuple.ordTuple(Prelude.ordString)(Prelude.ordNumber)))(Prelude["<<<"](Prelude.semigroupoidArr)(allNumWords)(numLines)))));
module.exports = {
    main: main, 
    search: search, 
    frequencies: frequencies, 
    createIndex: createIndex, 
    accumulate: accumulate, 
    makeLists: makeLists, 
    allNumWords: allNumWords, 
    cleanWords: cleanWords, 
    isAscii: isAscii, 
    isLetter: isLetter, 
    isLowerCaseLetter: isLowerCaseLetter, 
    isUpperCaseLetter: isUpperCaseLetter, 
    numLines: numLines, 
    words: words, 
    lines: lines, 
    both: both
};
