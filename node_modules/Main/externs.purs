-- Generated by psc-make version 0.6.9.5
module Main where
import Control.Apply ()
import Prelude ()
import Data.String ()
import Data.Array ()
import Data.Tuple ()
import Data.Char ()
import Main ()
import Data.Foldable ()
import Data.Map ()
import Data.Maybe ()
import Debug.Trace ()
import Prim ()
import Prelude ()
import Debug.Trace ()
import Data.Maybe.Unsafe ()
import Data.Map ()
import Control.Apply ()
import Data.Tuple ()
import Data.String ()
import Data.Char ()
import Data.Array ()
import Data.Foldable ()
import Data.Maybe ()
type Frequency = Prim.Number
type Index = Data.Map.Map Main.Word [Main.LineNumber]
type LineNumber = Prim.Number
type Word = Prim.String
type Line = Prim.String
type Doc = [Main.Line]
foreign import main :: forall t32. Control.Monad.Eff.Eff (trace :: Debug.Trace.Trace | t32) Prelude.Unit
foreign import search :: Main.Index -> Prim.String -> [Main.LineNumber]
foreign import frequencies :: forall a. (Prelude.Eq a, Prelude.Ord a) => [a] -> [Data.Tuple.Tuple a Main.Frequency]
foreign import createIndex :: Main.Doc -> Main.Index
foreign import accumulate :: [Data.Tuple.Tuple Main.Word [Main.LineNumber]] -> [Data.Tuple.Tuple Main.Word [Main.LineNumber]]
foreign import makeLists :: [Data.Tuple.Tuple Main.Word Main.LineNumber] -> [Data.Tuple.Tuple Main.Word [Main.LineNumber]]
foreign import allNumWords :: [Data.Tuple.Tuple Main.Line Main.LineNumber] -> [Data.Tuple.Tuple Main.Word Main.LineNumber]
foreign import cleanWords :: [Main.Word] -> [Main.Word]
foreign import isAscii :: Data.Char.Char -> Prim.Boolean
foreign import isLetter :: Data.Char.Char -> Prim.Boolean
foreign import isLowerCaseLetter :: Data.Char.Char -> Prim.Boolean
foreign import isUpperCaseLetter :: Data.Char.Char -> Prim.Boolean
foreign import numLines :: Main.Doc -> [Data.Tuple.Tuple Main.Line Main.LineNumber]
foreign import words :: Prim.String -> [Prim.String]
foreign import lines :: Prim.String -> [Prim.String]
foreign import both :: forall a. (a -> Prim.Boolean) -> (a -> Prim.Boolean) -> a -> Prim.Boolean
