// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Apply = require("Control.Apply");
var Control_Monad_Error = require("Control.Monad.Error");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_Plus = require("Control.Plus");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_MonadPlus = require("Control.MonadPlus");
var Data_Either = require("Data.Either");
var Data_Monoid = require("Data.Monoid");
var Data_Tuple = require("Data.Tuple");
var ErrorT = function (x) {
    return x;
};
var runErrorT = function (_223) {
    return _223;
};
var monadTransErrorT = function (__dict_Error_2) {
    return new Control_Monad_Trans.MonadTrans(function (__dict_Monad_3) {
        return function (m) {
            return ErrorT(Prelude[">>="](__dict_Monad_3["__superclass_Prelude.Bind_1"]())(m)(function (_10) {
                return Prelude["return"](__dict_Monad_3)(new Data_Either.Right(_10));
            }));
        };
    });
};
var mapErrorT = function (f) {
    return function (m) {
        return ErrorT(f(runErrorT(m)));
    };
};
var liftPassError = function (__dict_Monad_8) {
    return function (pass) {
        return mapErrorT(function (m) {
            return pass(Prelude[">>="](__dict_Monad_8["__superclass_Prelude.Bind_1"]())(m)(function (_12) {
                return Prelude["return"](__dict_Monad_8)((function () {
                    if (_12 instanceof Data_Either.Left) {
                        return new Data_Tuple.Tuple(new Data_Either.Left(_12.value0), Prelude.id(Prelude.categoryArr));
                    };
                    if (_12 instanceof Data_Either.Right) {
                        return new Data_Tuple.Tuple(new Data_Either.Right(_12.value0.value0), _12.value0.value1);
                    };
                    throw new Error("Failed pattern match");
                })());
            }));
        });
    };
};
var liftListenError = function (__dict_Monad_9) {
    return function (listen) {
        return mapErrorT(function (m) {
            return Prelude[">>="](__dict_Monad_9["__superclass_Prelude.Bind_1"]())(listen(m))(function (_11) {
                return Prelude["return"](__dict_Monad_9)(Prelude["<$>"](Data_Either.functorEither)(function (r) {
                    return new Data_Tuple.Tuple(r, _11.value1);
                })(_11.value0));
            });
        });
    };
};
var liftCallCCError = function (callCC) {
    return function (f) {
        return ErrorT(callCC(function (c) {
            return runErrorT(f(function (a) {
                return ErrorT(c(new Data_Either.Right(a)));
            }));
        }));
    };
};
var functorErrorT = function (__dict_Functor_10) {
    return new Prelude.Functor(function (f) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(ErrorT)(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](__dict_Functor_10)(Prelude["<$>"](Data_Either.functorEither)(f)))(runErrorT));
    });
};
var applyErrorT = function (__dict_Apply_13) {
    return new Prelude.Apply(function (_224) {
        return function (_225) {
            return ErrorT(Prelude["<*>"](__dict_Apply_13)(Prelude["<$>"](__dict_Apply_13["__superclass_Prelude.Functor_0"]())(Control_Apply.lift2(Data_Either.applyEither)(Prelude["$"]))(_224))(_225));
        };
    }, function () {
        return functorErrorT(__dict_Apply_13["__superclass_Prelude.Functor_0"]());
    });
};
var bindErrorT = function (__dict_Monad_11) {
    return function (__dict_Error_12) {
        return new Prelude.Bind(function (m) {
            return function (f) {
                return ErrorT(Prelude[">>="](__dict_Monad_11["__superclass_Prelude.Bind_1"]())(runErrorT(m))(function (_9) {
                    if (_9 instanceof Data_Either.Left) {
                        return Prelude["return"](__dict_Monad_11)(new Data_Either.Left(_9.value0));
                    };
                    if (_9 instanceof Data_Either.Right) {
                        return runErrorT(f(_9.value0));
                    };
                    throw new Error("Failed pattern match");
                }));
            };
        }, function () {
            return applyErrorT((__dict_Monad_11["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]());
        });
    };
};
var applicativeErrorT = function (__dict_Applicative_14) {
    return new Prelude.Applicative(function () {
        return applyErrorT(__dict_Applicative_14["__superclass_Prelude.Apply_0"]());
    }, function (a) {
        return ErrorT(Prelude.pure(__dict_Applicative_14)(new Data_Either.Right(a)));
    });
};
var monadErrorT = function (__dict_Monad_6) {
    return function (__dict_Error_7) {
        return new Prelude.Monad(function () {
            return applicativeErrorT(__dict_Monad_6["__superclass_Prelude.Applicative_0"]());
        }, function () {
            return bindErrorT(__dict_Monad_6)(__dict_Error_7);
        });
    };
};
var altErrorT = function (__dict_Monad_17) {
    return function (__dict_Error_18) {
        return new Control_Alt.Alt(function (x) {
            return function (y) {
                return ErrorT(Prelude[">>="](__dict_Monad_17["__superclass_Prelude.Bind_1"]())(runErrorT(x))(function (e) {
                    if (e instanceof Data_Either.Left) {
                        return runErrorT(y);
                    };
                    return Prelude["return"](__dict_Monad_17)(e);
                }));
            };
        }, function () {
            return functorErrorT(((__dict_Monad_17["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
        });
    };
};
var plusErrorT = function (__dict_Monad_0) {
    return function (__dict_Error_1) {
        return new Control_Plus.Plus(function () {
            return altErrorT(__dict_Monad_0)(__dict_Error_1);
        }, Prelude["return"](__dict_Monad_0)(Data_Either.Left.create(Control_Monad_Error.strMsg(__dict_Error_1)("No alternative"))));
    };
};
var alternativeErrorT = function (__dict_Monad_15) {
    return function (__dict_Error_16) {
        return new Control_Alternative.Alternative(function () {
            return plusErrorT(__dict_Monad_15)(__dict_Error_16);
        }, function () {
            return applicativeErrorT(__dict_Monad_15["__superclass_Prelude.Applicative_0"]());
        });
    };
};
var monadPlusErrorT = function (__dict_Monad_4) {
    return function (__dict_Error_5) {
        return new Control_MonadPlus.MonadPlus(function () {
            return alternativeErrorT(__dict_Monad_4)(__dict_Error_5);
        }, function () {
            return monadErrorT(__dict_Monad_4)(__dict_Error_5);
        });
    };
};
module.exports = {
    ErrorT: ErrorT, 
    liftCallCCError: liftCallCCError, 
    liftPassError: liftPassError, 
    liftListenError: liftListenError, 
    mapErrorT: mapErrorT, 
    runErrorT: runErrorT, 
    functorErrorT: functorErrorT, 
    applyErrorT: applyErrorT, 
    applicativeErrorT: applicativeErrorT, 
    altErrorT: altErrorT, 
    plusErrorT: plusErrorT, 
    alternativeErrorT: alternativeErrorT, 
    bindErrorT: bindErrorT, 
    monadErrorT: monadErrorT, 
    monadPlusErrorT: monadPlusErrorT, 
    monadTransErrorT: monadTransErrorT
};
