-- Generated by psc-make version 0.6.9.5
module Data.Monoid.Last where
import Prelude ()
import Data.Monoid.Last ()
import Control.Extend ()
import Prim ()
import Prelude ()
import Control.Comonad ()
import Control.Extend ()
import Data.Maybe ()
import Data.Monoid ()
--  | Monoid returning the last (right-most) non-Nothing value.
--  |
--  | ``` purescript
--  | Last (Just x) <> Last (Just y) == Last (Just y)
--  | Last (Just x) <> Nothing == Last (Just x)
--  | Last Nothing <> Nothing == Last Nothing
--  | mempty :: Last _ == Last Nothing
--  | ```
newtype Last (a :: *) = Last (Data.Maybe.Maybe a)
foreign import runLast :: forall a. Data.Monoid.Last.Last a -> Data.Maybe.Maybe a
foreign import instance eqLast :: (Prelude.Eq a) => Prelude.Eq (Data.Monoid.Last.Last a)
foreign import instance ordLast :: (Prelude.Ord a) => Prelude.Ord (Data.Monoid.Last.Last a)
foreign import instance functorLast :: Prelude.Functor Data.Monoid.Last.Last
foreign import instance applyLast :: Prelude.Apply Data.Monoid.Last.Last
foreign import instance applicativeLast :: Prelude.Applicative Data.Monoid.Last.Last
foreign import instance bindLast :: Prelude.Bind Data.Monoid.Last.Last
foreign import instance monadLast :: Prelude.Monad Data.Monoid.Last.Last
foreign import instance extendLast :: Control.Extend.Extend Data.Monoid.Last.Last
foreign import instance showLast :: (Prelude.Show a) => Prelude.Show (Data.Monoid.Last.Last a)
foreign import instance semigroupLast :: Prelude.Semigroup (Data.Monoid.Last.Last a)
foreign import instance monoidLast :: Data.Monoid.Monoid (Data.Monoid.Last.Last a)
