// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Function = require("Data.Function");
var Data_Array = require("Data.Array");
var Data_Either = require("Data.Either");

  function parseJSONImpl(left, right, str) {
    try {
      return right(JSON.parse(str));
    } catch (e) {
      return left(e.toString());
    }
  }
  ;

  function toForeign(value) {
    return value;
  }
  ;

  function unsafeFromForeign(value) {
    return value;
  }
  ;

  function typeOf(value) {
    return typeof value;
  }
  ;

  function tagOf(value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  }
  ;

  function isNull(value) {
    return value === null;
  }
  ;

  function isUndefined(value) {
    return value === undefined;
  }
  ;

  var isArray = Array.isArray || function(value) {
    return Object.prototype.toString.call(value) === '[object Array]';
  };
  ;
var TypeMismatch = (function () {
    function TypeMismatch(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TypeMismatch.create = function (value0) {
        return function (value1) {
            return new TypeMismatch(value0, value1);
        };
    };
    return TypeMismatch;
})();
var ErrorAtIndex = (function () {
    function ErrorAtIndex(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtIndex.create = function (value0) {
        return function (value1) {
            return new ErrorAtIndex(value0, value1);
        };
    };
    return ErrorAtIndex;
})();
var ErrorAtProperty = (function () {
    function ErrorAtProperty(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtProperty.create = function (value0) {
        return function (value1) {
            return new ErrorAtProperty(value0, value1);
        };
    };
    return ErrorAtProperty;
})();
var JSONError = (function () {
    function JSONError(value0) {
        this.value0 = value0;
    };
    JSONError.create = function (value0) {
        return new JSONError(value0);
    };
    return JSONError;
})();
var unsafeReadTagged = function (tag) {
    return function (value) {
        if (tagOf(value) === tag) {
            return Prelude.pure(Data_Either.applicativeEither)(unsafeFromForeign(value));
        };
        return new Data_Either.Left(new TypeMismatch(tag, tagOf(value)));
    };
};
var showForeignError = new Prelude.Show(function (_149) {
    if (_149 instanceof TypeMismatch) {
        return "Type mismatch: expected " + (_149.value0 + (", found " + _149.value1));
    };
    if (_149 instanceof ErrorAtIndex) {
        return "Error at array index " + (Prelude.show(Prelude.showNumber)(_149.value0) + (": " + Prelude.show(showForeignError)(_149.value1)));
    };
    if (_149 instanceof ErrorAtProperty) {
        return "Error at property " + (Prelude.show(Prelude.showString)(_149.value0) + (": " + Prelude.show(showForeignError)(_149.value1)));
    };
    if (_149 instanceof JSONError) {
        return "JSON error: " + _149.value0;
    };
    throw new Error("Failed pattern match");
});
var readString = unsafeReadTagged("String");
var readNumber = unsafeReadTagged("Number");
var readBoolean = unsafeReadTagged("Boolean");
var readArray = function (value) {
    if (isArray(value)) {
        return Prelude.pure(Data_Either.applicativeEither)(unsafeFromForeign(value));
    };
    return new Data_Either.Left(new TypeMismatch("array", tagOf(value)));
};
var parseJSON = function (json) {
    return parseJSONImpl(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Either.Left.create)(JSONError.create), Data_Either.Right.create, json);
};
var eqForeignError = new Prelude.Eq(function (a) {
    return function (b) {
        return !Prelude["=="](eqForeignError)(a)(b);
    };
}, function (_150) {
    return function (_151) {
        if (_150 instanceof TypeMismatch && _151 instanceof TypeMismatch) {
            return _150.value0 === _151.value0 && _150.value1 === _151.value1;
        };
        if (_150 instanceof ErrorAtIndex && _151 instanceof ErrorAtIndex) {
            return _150.value0 === _151.value0 && Prelude["=="](eqForeignError)(_150.value1)(_151.value1);
        };
        if (_150 instanceof ErrorAtProperty && _151 instanceof ErrorAtProperty) {
            return _150.value0 === _151.value0 && Prelude["=="](eqForeignError)(_150.value1)(_151.value1);
        };
        if (_150 instanceof JSONError && _151 instanceof JSONError) {
            return _150.value0 === _151.value0;
        };
        return false;
    };
});
module.exports = {
    TypeMismatch: TypeMismatch, 
    ErrorAtIndex: ErrorAtIndex, 
    ErrorAtProperty: ErrorAtProperty, 
    JSONError: JSONError, 
    readArray: readArray, 
    readNumber: readNumber, 
    readBoolean: readBoolean, 
    readString: readString, 
    isArray: isArray, 
    isUndefined: isUndefined, 
    isNull: isNull, 
    tagOf: tagOf, 
    typeOf: typeOf, 
    unsafeReadTagged: unsafeReadTagged, 
    unsafeFromForeign: unsafeFromForeign, 
    toForeign: toForeign, 
    parseJSON: parseJSON, 
    showForeignError: showForeignError, 
    eqForeignError: eqForeignError
};
