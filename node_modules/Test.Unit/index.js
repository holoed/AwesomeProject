// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Eff_Ref = require("Control.Monad.Eff.Ref");
var Control_Monad_Cont_Trans = require("Control.Monad.Cont.Trans");
var Control_Monad_Error_Trans = require("Control.Monad.Error.Trans");
var Control_Timer = require("Control.Timer");
var Test_Unit_Console = require("Test.Unit.Console");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Data_Either = require("Data.Either");

  function exit(rv) {
    return function() {
      try { process.exit(rv); } catch (e) {
        try { phantom.exit(rv); } catch (e) {}
      }
    }
  };
var testC = function (c) {
    return Control_Monad_Error_Trans.ErrorT(function (cb) {
        return Control_Monad_Cont_Trans.runContT(c)(cb);
    });
};
var testFn = function (f) {
    return testC(f);
};
var success = new Data_Either.Right(Prelude.unit);
var runWithStderr = function (l) {
    return function (t) {
        return function (cb) {
            var handler = function (_228) {
                if (_228 instanceof Data_Either.Right) {
                    return function __do() {
                        Test_Unit_Console.restorePos();
                        Test_Unit_Console.eraseLine();
                        Test_Unit_Console.printPass("\u2713 Passed: ")();
                        Test_Unit_Console.printLabel(l)();
                        Test_Unit_Console.print("\n")();
                        return cb(success)();
                    };
                };
                if (_228 instanceof Data_Either.Left) {
                    return function __do() {
                        Test_Unit_Console.restorePos();
                        Test_Unit_Console.eraseLine();
                        Test_Unit_Console.printFail("\u2620 Failed: ")();
                        Test_Unit_Console.printLabel(l)();
                        Test_Unit_Console.print(" because ")();
                        Test_Unit_Console.printFail(_228.value0)();
                        Test_Unit_Console.print("\n")();
                        return cb(_228)();
                    };
                };
                throw new Error("Failed pattern match");
            };
            return function __do() {
                Test_Unit_Console.savePos();
                Test_Unit_Console.print("\u2192 Running: ")();
                Test_Unit_Console.printLabel(l)();
                return Control_Monad_Cont_Trans.runContT(Control_Monad_Error_Trans.runErrorT(t))(handler)();
            };
        };
    };
};
var runWithConsole = function (l) {
    return function (t) {
        return function (cb) {
            var handler = function (_229) {
                if (_229 instanceof Data_Either.Right) {
                    return function __do() {
                        Test_Unit_Console.consoleLog("\u2713 Passed: " + l)();
                        return cb(success)();
                    };
                };
                if (_229 instanceof Data_Either.Left) {
                    return function __do() {
                        Test_Unit_Console.consoleError("\u2620 Failed: " + (l + (" because " + _229.value0)))();
                        return cb(_229)();
                    };
                };
                throw new Error("Failed pattern match");
            };
            return Control_Monad_Cont_Trans.runContT(Control_Monad_Error_Trans.runErrorT(t))(handler);
        };
    };
};
var test = function (l) {
    return function (t) {
        return Control_Monad_Error_Trans.ErrorT((function () {
            if (Test_Unit_Console.hasStderr) {
                return runWithStderr(l)(t);
            };
            if (!Test_Unit_Console.hasStderr) {
                return runWithConsole(l)(t);
            };
            throw new Error("Failed pattern match");
        })());
    };
};
var runTest = function (t) {
    var handler = function (_230) {
        if (_230 instanceof Data_Either.Left) {
            return exit(1);
        };
        return exit(0);
    };
    return Control_Monad_Cont_Trans.runContT(Control_Monad_Error_Trans.runErrorT(t))(handler);
};
var pickFirst = function (t1) {
    return function (t2) {
        return Control_Monad_Error_Trans.ErrorT(Control_Monad_Cont_Trans.ContT(function (cb) {
            return function __do() {
                var _14 = Control_Monad_Eff_Ref.newRef(false)();
                return (function () {
                    var $$yield = function (t) {
                        return Control_Monad_Cont_Trans.runContT(Control_Monad_Error_Trans.runErrorT(t))(function (res) {
                            return function __do() {
                                var _13 = Control_Monad_Eff_Ref.readRef(_14)();
                                Control_Monad_Eff_Ref.writeRef(_14)(true)();
                                if (_13) {
                                    return Prelude.unit;
                                };
                                if (!_13) {
                                    return cb(res)();
                                };
                                throw new Error("Failed pattern match");
                            };
                        });
                    };
                    return function __do() {
                        $$yield(t1)();
                        return $$yield(t2)();
                    };
                })()();
            };
        }));
    };
};
var failure = Data_Either.Left.create;
var timeout = function (time) {
    return function (test_1) {
        return pickFirst(test_1)(Control_Monad_Error_Trans.ErrorT(function (cb) {
            return function __do() {
                Control_Timer.timeout(time)(cb(failure("test timed out after " + (Prelude.show(Prelude.showNumber)(time) + "ms"))))();
                return Prelude.unit;
            };
        }));
    };
};
var assertFalse = function (reason) {
    return function (_227) {
        if (!_227) {
            return Control_Monad_Error_Trans.ErrorT(function (cb) {
                return cb(success);
            });
        };
        if (_227) {
            return Control_Monad_Error_Trans.ErrorT(function (cb) {
                return cb(failure(reason));
            });
        };
        throw new Error("Failed pattern match");
    };
};
var assertC = function (reason) {
    return function (c) {
        return Control_Monad_Error_Trans.ErrorT(function (cb) {
            return Control_Monad_Cont_Trans.runContT(c)(function (res) {
                if (res) {
                    return cb(new Data_Either.Right(Prelude.unit));
                };
                if (!res) {
                    return cb(new Data_Either.Left(reason));
                };
                throw new Error("Failed pattern match");
            });
        });
    };
};
var assertFn = function (reason) {
    return function (f) {
        return assertC(reason)(f);
    };
};
var assert = function (reason) {
    return function (_226) {
        if (_226) {
            return Control_Monad_Error_Trans.ErrorT(function (cb) {
                return cb(success);
            });
        };
        if (!_226) {
            return Control_Monad_Error_Trans.ErrorT(function (cb) {
                return cb(failure(reason));
            });
        };
        throw new Error("Failed pattern match");
    };
};
module.exports = {
    runTest: runTest, 
    test: test, 
    assertFn: assertFn, 
    assertC: assertC, 
    testFn: testFn, 
    testC: testC, 
    assertFalse: assertFalse, 
    assert: assert, 
    timeout: timeout, 
    pickFirst: pickFirst, 
    failure: failure, 
    success: success
};
