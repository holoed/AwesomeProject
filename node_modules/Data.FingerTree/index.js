// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Sequence_Internal = require("Data.Sequence.Internal");
var Data_Foldable = require("Data.Foldable");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Data_Lazy = require("Data.Lazy");
var Data_Array = require("Data.Array");
var Data_Array_Unsafe = require("Data.Array.Unsafe");
var Data_Unfoldable = require("Data.Unfoldable");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var NilR = (function () {
    function NilR() {

    };
    NilR.value = new NilR();
    return NilR;
})();
var SnocR = (function () {
    function SnocR(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    SnocR.create = function (value0) {
        return function (value1) {
            return new SnocR(value0, value1);
        };
    };
    return SnocR;
})();
var NilL = (function () {
    function NilL() {

    };
    NilL.value = new NilL();
    return NilL;
})();
var ConsL = (function () {
    function ConsL(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ConsL.create = function (value0) {
        return function (value1) {
            return new ConsL(value0, value1);
        };
    };
    return ConsL;
})();
var Split = (function () {
    function Split(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Split.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Split(value0, value1, value2);
            };
        };
    };
    return Split;
})();
var Node2 = (function () {
    function Node2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Node2.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Node2(value0, value1, value2);
            };
        };
    };
    return Node2;
})();
var Node3 = (function () {
    function Node3(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Node3.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Node3(value0, value1, value2, value3);
                };
            };
        };
    };
    return Node3;
})();
var LazySplit = (function () {
    function LazySplit(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    LazySplit.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new LazySplit(value0, value1, value2);
            };
        };
    };
    return LazySplit;
})();
var Empty = (function () {
    function Empty() {

    };
    Empty.value = new Empty();
    return Empty;
})();
var Single = (function () {
    function Single(value0) {
        this.value0 = value0;
    };
    Single.create = function (value0) {
        return new Single(value0);
    };
    return Single;
})();
var Deep = (function () {
    function Deep(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Deep.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Deep(value0, value1, value2, value3);
                };
            };
        };
    };
    return Deep;
})();
var tailDigit = Data_Array_Unsafe.tail;
var splitDigit = function (__dict_Monoid_4) {
    return function (__dict_Measured_5) {
        return function (p) {
            return function (i) {
                return function (as) {
                    var _2398 = Data_Array.length(as);
                    if (_2398 === 1) {
                        return new Split([  ], Data_Sequence_Internal["!"](as)(0), [  ]);
                    };
                    var bs = Data_Array.drop(1)(as);
                    var a = Data_Sequence_Internal["!"](as)(0);
                    var i$prime = Prelude["<>"](__dict_Monoid_4["__superclass_Prelude.Semigroup_0"]())(i)(Data_Sequence_Internal.measure(__dict_Measured_5)(a));
                    var _2399 = p(i$prime);
                    if (_2399) {
                        return new Split([  ], a, bs);
                    };
                    if (!_2399) {
                        var _2400 = splitDigit(__dict_Monoid_4)(__dict_Measured_5)(p)(i$prime)(bs);
                        return new Split(Prelude[":"](a)(_2400.value0), _2400.value1, _2400.value2);
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
};
var showNode = function (__dict_Show_6) {
    return function (__dict_Show_7) {
        return new Prelude.Show(function (_538) {
            if (_538 instanceof Node2) {
                return "Node2 (" + (Prelude.show(__dict_Show_7)(_538.value0) + (") (" + (Prelude.show(__dict_Show_6)(_538.value1) + (") (" + (Prelude.show(__dict_Show_6)(_538.value2) + ")")))));
            };
            if (_538 instanceof Node3) {
                return "Node3 (" + (Prelude.show(__dict_Show_7)(_538.value0) + (") (" + (Prelude.show(__dict_Show_6)(_538.value1) + (") (" + (Prelude.show(__dict_Show_6)(_538.value2) + (") (" + (Prelude.show(__dict_Show_6)(_538.value3) + ")")))))));
            };
            throw new Error("Failed pattern match");
        });
    };
};
var showFingerTree = function (__dict_Show_8) {
    return function (__dict_Show_9) {
        return new Prelude.Show(function (_544) {
            if (_544 instanceof Empty) {
                return "Empty";
            };
            if (_544 instanceof Single) {
                return "Single (" + (Prelude.show(__dict_Show_9)(_544.value0) + ")");
            };
            if (_544 instanceof Deep) {
                return "Deep (" + (Prelude.show(Data_Lazy.showLazy(__dict_Show_8))(_544.value0) + (") (" + (Prelude.show(Prelude.showArray(__dict_Show_9))(_544.value1) + (") (" + (Prelude.show(Data_Lazy.showLazy(showFingerTree(__dict_Show_8)(showNode(__dict_Show_9)(__dict_Show_8))))(_544.value2) + (") (" + (Prelude.show(Prelude.showArray(__dict_Show_9))(_544.value3) + ")")))))));
            };
            throw new Error("Failed pattern match");
        });
    };
};
var nodeToDigit = function (_526) {
    if (_526 instanceof Node2) {
        return [ _526.value1, _526.value2 ];
    };
    if (_526 instanceof Node3) {
        return [ _526.value1, _526.value2, _526.value3 ];
    };
    throw new Error("Failed pattern match");
};
var node3 = function (__dict_Monoid_10) {
    return function (__dict_Measured_11) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return new Node3(Prelude["<>"](__dict_Monoid_10["__superclass_Prelude.Semigroup_0"]())(Data_Sequence_Internal.measure(__dict_Measured_11)(a))(Prelude["<>"](__dict_Monoid_10["__superclass_Prelude.Semigroup_0"]())(Data_Sequence_Internal.measure(__dict_Measured_11)(b))(Data_Sequence_Internal.measure(__dict_Measured_11)(c))), a, b, c);
                };
            };
        };
    };
};
var node2 = function (__dict_Monoid_12) {
    return function (__dict_Measured_13) {
        return function (a) {
            return function (b) {
                return new Node2(Prelude["<>"](__dict_Monoid_12["__superclass_Prelude.Semigroup_0"]())(Data_Sequence_Internal.measure(__dict_Measured_13)(a))(Data_Sequence_Internal.measure(__dict_Measured_13)(b)), a, b);
            };
        };
    };
};
var nodes = function (__dict_Monoid_14) {
    return function (__dict_Measured_15) {
        return function (_535) {
            if (_535.length === 2) {
                return [ node2(__dict_Monoid_14)(__dict_Measured_15)(_535[0])(_535[1]) ];
            };
            if (_535.length === 3) {
                return [ node3(__dict_Monoid_14)(__dict_Measured_15)(_535[0])(_535[1])(_535[2]) ];
            };
            if (_535.length === 4) {
                return [ node2(__dict_Monoid_14)(__dict_Measured_15)(_535[0])(_535[1]), node2(__dict_Monoid_14)(__dict_Measured_15)(_535[2])(_535[3]) ];
            };
            return Prelude[":"](node3(__dict_Monoid_14)(__dict_Measured_15)(Data_Sequence_Internal["!"](_535)(0))(Data_Sequence_Internal["!"](_535)(1))(Data_Sequence_Internal["!"](_535)(2)))(nodes(__dict_Monoid_14)(__dict_Measured_15)(Data_Array.drop(3)(_535)));
        };
    };
};
var measuredNode = new Data_Sequence_Internal.Measured(function (_543) {
    if (_543 instanceof Node2) {
        return _543.value0;
    };
    if (_543 instanceof Node3) {
        return _543.value0;
    };
    throw new Error("Failed pattern match");
});
var measuredFingerTree = function (__dict_Monoid_16) {
    return function (__dict_Measured_17) {
        return new Data_Sequence_Internal.Measured(function (_549) {
            if (_549 instanceof Empty) {
                return Data_Monoid.mempty(__dict_Monoid_16);
            };
            if (_549 instanceof Single) {
                return Data_Sequence_Internal.measure(__dict_Measured_17)(_549.value0);
            };
            if (_549 instanceof Deep) {
                return Data_Lazy.force(_549.value0);
            };
            throw new Error("Failed pattern match");
        });
    };
};
var lazyEmpty = Data_Lazy.defer(function (_512) {
    return Empty.value;
});
var lastDigit = Data_Array_Unsafe.last;
var initDigit = Data_Array_Unsafe.init;
var headDigit = Data_Array_Unsafe.head;
var functorViewL = function (__dict_Functor_18) {
    return new Prelude.Functor(function (f) {
        return function (_550) {
            if (_550 instanceof NilL) {
                return NilL.value;
            };
            if (_550 instanceof ConsL) {
                return new ConsL(f(_550.value0), Prelude["<$>"](Data_Lazy.functorLazy)(Prelude["<$>"](__dict_Functor_18)(f))(_550.value1));
            };
            throw new Error("Failed pattern match");
        };
    });
};
var functorNode = new Prelude.Functor(function (f) {
    return function (_539) {
        if (_539 instanceof Node2) {
            return new Node2(_539.value0, f(_539.value1), f(_539.value2));
        };
        if (_539 instanceof Node3) {
            return new Node3(_539.value0, f(_539.value1), f(_539.value2), f(_539.value3));
        };
        throw new Error("Failed pattern match");
    };
});
var functorFingerTree = new Prelude.Functor(function (f) {
    return function (_545) {
        if (_545 instanceof Empty) {
            return Empty.value;
        };
        if (_545 instanceof Single) {
            return new Single(f(_545.value0));
        };
        if (_545 instanceof Deep) {
            return new Deep(_545.value0, Prelude["<$>"](Data_Array.functorArray)(f)(_545.value1), Data_Sequence_Internal["<$$$>"](Data_Lazy.functorLazy)(functorFingerTree)(functorNode)(f)(_545.value2), Prelude["<$>"](Data_Array.functorArray)(f)(_545.value3));
        };
        throw new Error("Failed pattern match");
    };
});
var foldableNode = new Data_Foldable.Foldable(function (__dict_Monoid_19) {
    return function (f) {
        return function (xs) {
            return Data_Foldable.foldr(foldableNode)(function (x) {
                return function (acc) {
                    return Prelude["<>"](__dict_Monoid_19["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                };
            })(Data_Monoid.mempty(__dict_Monoid_19))(xs);
        };
    };
}, function ($greater$minus) {
    return function (z) {
        return function (_541) {
            if (_541 instanceof Node2) {
                return $greater$minus($greater$minus(z)(_541.value1))(_541.value2);
            };
            if (_541 instanceof Node3) {
                return $greater$minus($greater$minus($greater$minus(z)(_541.value1))(_541.value2))(_541.value3);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function ($minus$less) {
    return function (z) {
        return function (_540) {
            if (_540 instanceof Node2) {
                return $minus$less(_540.value1)($minus$less(_540.value2)(z));
            };
            if (_540 instanceof Node3) {
                return $minus$less(_540.value1)($minus$less(_540.value2)($minus$less(_540.value3)(z)));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var traversableNode = new Data_Traversable.Traversable(function () {
    return foldableNode;
}, function () {
    return functorNode;
}, function (__dict_Applicative_1) {
    return Data_Traversable.traverse(traversableNode)(__dict_Applicative_1)(Prelude.id(Prelude.categoryArr));
}, function (__dict_Applicative_0) {
    return function (f) {
        return function (_542) {
            if (_542 instanceof Node2) {
                return Prelude["<*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Node2.create(_542.value0))(f(_542.value1)))(f(_542.value2));
            };
            if (_542 instanceof Node3) {
                return Prelude["<*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]())(Prelude["<*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Node3.create(_542.value0))(f(_542.value1)))(f(_542.value2)))(f(_542.value3));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var foldableFingerTree = new Data_Foldable.Foldable(function (__dict_Monoid_20) {
    return function (f) {
        return function (xs) {
            return Data_Foldable.foldr(foldableFingerTree)(function (x) {
                return function (acc) {
                    return Prelude["<>"](__dict_Monoid_20["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                };
            })(Data_Monoid.mempty(__dict_Monoid_20))(xs);
        };
    };
}, function ($greater$minus) {
    return function (z) {
        return function (_547) {
            if (_547 instanceof Empty) {
                return z;
            };
            if (_547 instanceof Single) {
                return $greater$minus(z)(_547.value0);
            };
            if (_547 instanceof Deep) {
                var $greater$greater$greater$minus = Data_Foldable.foldl(foldableFingerTree)(Data_Foldable.foldl(foldableNode)($greater$minus));
                var $greater$greater$minus = Data_Foldable.foldl(Data_Foldable.foldableArray)($greater$minus);
                return $greater$greater$minus($greater$greater$greater$minus($greater$greater$minus(z)(_547.value1))(Data_Lazy.force(_547.value2)))(_547.value3);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function ($minus$less) {
    return function (z) {
        return function (_546) {
            if (_546 instanceof Empty) {
                return z;
            };
            if (_546 instanceof Single) {
                return $minus$less(_546.value0)(z);
            };
            if (_546 instanceof Deep) {
                var $minus$less$less$less = Prelude.flip(Data_Foldable.foldr(foldableFingerTree)(Prelude.flip(Data_Foldable.foldr(foldableNode)($minus$less))));
                var $minus$less$less = Prelude.flip(Data_Foldable.foldr(Data_Foldable.foldableArray)($minus$less));
                var $plus$less$less = Prelude.flip(Data_Foldable.foldr(Data_Foldable.foldableArray)($minus$less));
                return $plus$less$less(_546.value1)($minus$less$less$less(Data_Lazy.force(_546.value2))($minus$less$less(_546.value3)(z)));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var traversableFingerTree = new Data_Traversable.Traversable(function () {
    return foldableFingerTree;
}, function () {
    return functorFingerTree;
}, function (__dict_Applicative_3) {
    return Data_Traversable.traverse(traversableFingerTree)(__dict_Applicative_3)(Prelude.id(Prelude.categoryArr));
}, function (__dict_Applicative_2) {
    return function (f) {
        return function (_548) {
            if (_548 instanceof Empty) {
                return Prelude.pure(__dict_Applicative_2)(Empty.value);
            };
            if (_548 instanceof Single) {
                return Prelude["<$>"]((__dict_Applicative_2["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Single.create)(f(_548.value0));
            };
            if (_548 instanceof Deep) {
                var l = Data_Traversable.traverse(traversableFingerTree)(__dict_Applicative_2)(Data_Traversable.traverse(traversableNode)(__dict_Applicative_2)(f))(Data_Lazy.force(_548.value2));
                var kl = Prelude["<$>"]((__dict_Applicative_2["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude["const"])(l);
                return Prelude["<*>"](__dict_Applicative_2["__superclass_Prelude.Apply_0"]())(Prelude["<*>"](__dict_Applicative_2["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_2["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Deep.create(_548.value0))(Data_Traversable.traverse(Data_Traversable.traversableArray)(__dict_Applicative_2)(f)(_548.value1)))(Prelude["<$>"]((__dict_Applicative_2["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Lazy.defer)(kl)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(__dict_Applicative_2)(f)(_548.value3));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var deep = function (__dict_Monoid_21) {
    return function (__dict_Measured_22) {
        return function (pr) {
            return function (m) {
                return function (sf) {
                    return new Deep(Data_Lazy.defer(function (_513) {
                        return Prelude["<>"](__dict_Monoid_21["__superclass_Prelude.Semigroup_0"]())(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredArray(__dict_Monoid_21)(__dict_Measured_22))(pr))(Prelude["<>"](__dict_Monoid_21["__superclass_Prelude.Semigroup_0"]())(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(__dict_Monoid_21)(measuredFingerTree(__dict_Monoid_21)(measuredNode)))(m))(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredArray(__dict_Monoid_21)(__dict_Measured_22))(sf)));
                    }), pr, m, sf);
                };
            };
        };
    };
};
var snoc = function (__dict_Monoid_23) {
    return function (__dict_Measured_24) {
        return function (_528) {
            return function (a) {
                if (_528 instanceof Empty) {
                    return new Single(a);
                };
                if (_528 instanceof Single) {
                    return deep(__dict_Monoid_23)(__dict_Measured_24)([ _528.value0 ])(lazyEmpty)([ a ]);
                };
                if (_528 instanceof Deep && _528.value3.length === 4) {
                    var forcedM = Data_Lazy.force(_528.value2);
                    return deep(__dict_Monoid_23)(__dict_Measured_24)(_528.value1)(Data_Lazy.defer(function (_515) {
                        return snoc(__dict_Monoid_23)(measuredNode)(forcedM)(node3(__dict_Monoid_23)(__dict_Measured_24)(_528.value3[0])(_528.value3[1])(_528.value3[2]));
                    }))([ _528.value3[3], a ]);
                };
                if (_528 instanceof Deep) {
                    return deep(__dict_Monoid_23)(__dict_Measured_24)(_528.value1)(_528.value2)(Data_Array.snoc(_528.value3)(a));
                };
                throw new Error("Failed pattern match");
            };
        };
    };
};
var snocAll = function (__dict_Monoid_25) {
    return function (__dict_Measured_26) {
        return function (__dict_Foldable_27) {
            return Data_Foldable.foldl(__dict_Foldable_27)(snoc(__dict_Monoid_25)(__dict_Measured_26));
        };
    };
};
var toFingerTree = function (__dict_Monoid_28) {
    return function (__dict_Measured_29) {
        return function (__dict_Foldable_30) {
            return function (s) {
                return snocAll(__dict_Monoid_28)(__dict_Measured_29)(__dict_Foldable_30)(Empty.value)(s);
            };
        };
    };
};
var viewL = function (__dict_Monoid_31) {
    return function (__dict_Measured_32) {
        return function (_529) {
            if (_529 instanceof Empty) {
                return NilL.value;
            };
            if (_529 instanceof Single) {
                return new ConsL(_529.value0, lazyEmpty);
            };
            if (_529 instanceof Deep) {
                return new ConsL(headDigit(_529.value1), Data_Lazy.defer(function (_516) {
                    return deepL(__dict_Monoid_31)(__dict_Measured_32)(tailDigit(_529.value1))(_529.value2)(_529.value3);
                }));
            };
            throw new Error("Failed pattern match");
        };
    };
};
var deepL = function (__dict_Monoid_33) {
    return function (__dict_Measured_34) {
        return function (_530) {
            return function (m) {
                return function (sf) {
                    if (_530.length === 0) {
                        var _2550 = viewL(__dict_Monoid_33)(measuredNode)(Data_Lazy.force(m));
                        if (_2550 instanceof NilL) {
                            return toFingerTree(__dict_Monoid_33)(__dict_Measured_34)(Data_Foldable.foldableArray)(sf);
                        };
                        if (_2550 instanceof ConsL) {
                            return deep(__dict_Monoid_33)(__dict_Measured_34)(nodeToDigit(_2550.value0))(_2550.value1)(sf);
                        };
                        throw new Error("Failed pattern match");
                    };
                    return deep(__dict_Monoid_33)(__dict_Measured_34)(_530)(m)(sf);
                };
            };
        };
    };
};
var eqFingerTree = function (__copy___dict_Monoid_35) {
    return function (__copy___dict_Measured_36) {
        return function (__copy___dict_Eq_37) {
            return function (__copy_xs) {
                return function (__copy_ys) {
                    var __dict_Monoid_35 = __copy___dict_Monoid_35;
                    var __dict_Measured_36 = __copy___dict_Measured_36;
                    var __dict_Eq_37 = __copy___dict_Eq_37;
                    var xs = __copy_xs;
                    var ys = __copy_ys;
                    tco: while (true) {
                        var _2553 = new Data_Tuple.Tuple(viewL(__dict_Monoid_35)(__dict_Measured_36)(xs), viewL(__dict_Monoid_35)(__dict_Measured_36)(ys));
                        if (_2553.value0 instanceof NilL && _2553.value1 instanceof NilL) {
                            return true;
                        };
                        if (_2553.value0 instanceof NilL) {
                            return false;
                        };
                        if (_2553.value1 instanceof NilL) {
                            return false;
                        };
                        if (_2553.value0 instanceof ConsL && _2553.value1 instanceof ConsL) {
                            var _2560 = Prelude["=="](__dict_Eq_37)(_2553.value0.value0)(_2553.value1.value0);
                            if (_2560) {
                                var ys$prime$prime = Data_Lazy.force(_2553.value1.value1);
                                var xs$prime$prime = Data_Lazy.force(_2553.value0.value1);
                                var __tco___dict_Monoid_35 = __dict_Monoid_35;
                                var __tco___dict_Measured_36 = __dict_Measured_36;
                                var __tco___dict_Eq_37 = __dict_Eq_37;
                                __dict_Monoid_35 = __tco___dict_Monoid_35;
                                __dict_Measured_36 = __tco___dict_Measured_36;
                                __dict_Eq_37 = __tco___dict_Eq_37;
                                xs = xs$prime$prime;
                                ys = ys$prime$prime;
                                continue tco;
                            };
                            if (!_2560) {
                                return false;
                            };
                            throw new Error("Failed pattern match");
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
    };
};
var head = function (__dict_Monoid_38) {
    return function (__dict_Measured_39) {
        return function (x) {
            var _2567 = viewL(__dict_Monoid_38)(__dict_Measured_39)(x);
            if (_2567 instanceof ConsL) {
                return new Data_Maybe.Just(_2567.value0);
            };
            if (_2567 instanceof NilL) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isEmpty = function (__dict_Monoid_40) {
    return function (__dict_Measured_41) {
        return function (x) {
            var _2570 = viewL(__dict_Monoid_40)(__dict_Measured_41)(x);
            if (_2570 instanceof NilL) {
                return true;
            };
            if (_2570 instanceof ConsL) {
                return false;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var tail = function (__dict_Monoid_42) {
    return function (__dict_Measured_43) {
        return function (x) {
            var _2573 = viewL(__dict_Monoid_42)(__dict_Measured_43)(x);
            if (_2573 instanceof ConsL) {
                return new Data_Maybe.Just(Data_Lazy.force(_2573.value1));
            };
            if (_2573 instanceof NilL) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var unfoldLeft = function (__dict_Unfoldable_44) {
    return function (__dict_Monoid_45) {
        return function (__dict_Measured_46) {
            var step = function (tree) {
                var _2576 = viewL(__dict_Monoid_45)(__dict_Measured_46)(tree);
                if (_2576 instanceof ConsL) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(_2576.value0, Data_Lazy.force(_2576.value1)));
                };
                if (_2576 instanceof NilL) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match");
            };
            return Data_Unfoldable.unfoldr(__dict_Unfoldable_44)(step);
        };
    };
};
var viewR = function (__dict_Monoid_47) {
    return function (__dict_Measured_48) {
        return function (_531) {
            if (_531 instanceof Empty) {
                return NilR.value;
            };
            if (_531 instanceof Single) {
                return new SnocR(lazyEmpty, _531.value0);
            };
            if (_531 instanceof Deep) {
                return new SnocR(Data_Lazy.defer(function (_517) {
                    return deepR(__dict_Monoid_47)(__dict_Measured_48)(_531.value1)(_531.value2)(initDigit(_531.value3));
                }), lastDigit(_531.value3));
            };
            throw new Error("Failed pattern match");
        };
    };
};
var deepR = function (__dict_Monoid_49) {
    return function (__dict_Measured_50) {
        return function (pr) {
            return function (m) {
                return function (_532) {
                    if (_532.length === 0) {
                        var _2589 = viewR(__dict_Monoid_49)(measuredNode)(Data_Lazy.force(m));
                        if (_2589 instanceof NilR) {
                            return toFingerTree(__dict_Monoid_49)(__dict_Measured_50)(Data_Foldable.foldableArray)(pr);
                        };
                        if (_2589 instanceof SnocR) {
                            return deep(__dict_Monoid_49)(__dict_Measured_50)(pr)(_2589.value0)(nodeToDigit(_2589.value1));
                        };
                        throw new Error("Failed pattern match");
                    };
                    return deep(__dict_Monoid_49)(__dict_Measured_50)(pr)(m)(_532);
                };
            };
        };
    };
};
var init = function (__dict_Monoid_51) {
    return function (__dict_Measured_52) {
        return function (x) {
            var _2592 = viewR(__dict_Monoid_51)(__dict_Measured_52)(x);
            if (_2592 instanceof SnocR) {
                return new Data_Maybe.Just(Data_Lazy.force(_2592.value0));
            };
            if (_2592 instanceof NilR) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var last = function (__dict_Monoid_53) {
    return function (__dict_Measured_54) {
        return function (x) {
            var _2595 = viewR(__dict_Monoid_53)(__dict_Measured_54)(x);
            if (_2595 instanceof SnocR) {
                return new Data_Maybe.Just(_2595.value1);
            };
            if (_2595 instanceof NilR) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var unfoldRight = function (__dict_Unfoldable_55) {
    return function (__dict_Monoid_56) {
        return function (__dict_Measured_57) {
            var step = function (tree) {
                var _2598 = viewR(__dict_Monoid_56)(__dict_Measured_57)(tree);
                if (_2598 instanceof SnocR) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(_2598.value1, Data_Lazy.force(_2598.value0)));
                };
                if (_2598 instanceof NilR) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match");
            };
            return Data_Unfoldable.unfoldr(__dict_Unfoldable_55)(step);
        };
    };
};
var unsafeSplitTree = function (__dict_Monoid_58) {
    return function (__dict_Measured_59) {
        return function (p) {
            return function (i) {
                return function (_536) {
                    if (_536 instanceof Single) {
                        return new LazySplit(lazyEmpty, _536.value0, lazyEmpty);
                    };
                    if (_536 instanceof Deep) {
                        var vpr = Prelude["<>"](__dict_Monoid_58["__superclass_Prelude.Semigroup_0"]())(i)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredArray(__dict_Monoid_58)(__dict_Measured_59))(_536.value1));
                        var _2605 = p(vpr);
                        if (_2605) {
                            var _2606 = splitDigit(__dict_Monoid_58)(__dict_Measured_59)(p)(i)(_536.value1);
                            return new LazySplit(Data_Lazy.defer(function (_518) {
                                return toFingerTree(__dict_Monoid_58)(__dict_Measured_59)(Data_Foldable.foldableArray)(_2606.value0);
                            }), _2606.value1, Data_Lazy.defer(function (_519) {
                                return deepL(__dict_Monoid_58)(__dict_Measured_59)(_2606.value2)(_536.value2)(_536.value3);
                            }));
                        };
                        if (!_2605) {
                            var vm = Prelude["<>"](__dict_Monoid_58["__superclass_Prelude.Semigroup_0"]())(vpr)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(__dict_Monoid_58)(measuredFingerTree(__dict_Monoid_58)(measuredNode)))(_536.value2));
                            var _2612 = p(vm);
                            if (_2612) {
                                var _2613 = unsafeSplitTree(__dict_Monoid_58)(measuredNode)(p)(vpr)(Data_Lazy.force(_536.value2));
                                var _2614 = splitDigit(__dict_Monoid_58)(__dict_Measured_59)(p)(Prelude["<>"](__dict_Monoid_58["__superclass_Prelude.Semigroup_0"]())(vpr)(Data_Sequence_Internal.measure(Data_Sequence_Internal.measuredLazy(__dict_Monoid_58)(measuredFingerTree(__dict_Monoid_58)(measuredNode)))(_2613.value0)))(nodeToDigit(_2613.value1));
                                return new LazySplit(Data_Lazy.defer(function (_520) {
                                    return deepR(__dict_Monoid_58)(__dict_Measured_59)(_536.value1)(_2613.value0)(_2614.value0);
                                }), _2614.value1, Data_Lazy.defer(function (_521) {
                                    return deepL(__dict_Monoid_58)(__dict_Measured_59)(_2614.value2)(_2613.value2)(_536.value3);
                                }));
                            };
                            if (!_2612) {
                                var _2623 = splitDigit(__dict_Monoid_58)(__dict_Measured_59)(p)(vm)(_536.value3);
                                return new LazySplit(Data_Lazy.defer(function (_522) {
                                    return deepR(__dict_Monoid_58)(__dict_Measured_59)(_536.value1)(_536.value2)(_2623.value0);
                                }), _2623.value1, Data_Lazy.defer(function (_523) {
                                    return toFingerTree(__dict_Monoid_58)(__dict_Measured_59)(Data_Foldable.foldableArray)(_2623.value2);
                                }));
                            };
                            throw new Error("Failed pattern match");
                        };
                        throw new Error("Failed pattern match");
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
};
var cons = function (__dict_Monoid_60) {
    return function (__dict_Measured_61) {
        return function (a) {
            return function (_527) {
                if (_527 instanceof Empty) {
                    return new Single(a);
                };
                if (_527 instanceof Single) {
                    return deep(__dict_Monoid_60)(__dict_Measured_61)([ a ])(lazyEmpty)([ _527.value0 ]);
                };
                if (_527 instanceof Deep && _527.value1.length === 4) {
                    var forcedM = Data_Lazy.force(_527.value2);
                    return deep(__dict_Monoid_60)(__dict_Measured_61)([ a, _527.value1[0] ])(Data_Lazy.defer(function (_514) {
                        return cons(__dict_Monoid_60)(measuredNode)(node3(__dict_Monoid_60)(__dict_Measured_61)(_527.value1[1])(_527.value1[2])(_527.value1[3]))(forcedM);
                    }))(_527.value3);
                };
                if (_527 instanceof Deep) {
                    return deep(__dict_Monoid_60)(__dict_Measured_61)(Prelude[":"](a)(_527.value1))(_527.value2)(_527.value3);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
};
var consAll = function (__dict_Monoid_62) {
    return function (__dict_Measured_63) {
        return function (__dict_Foldable_64) {
            return Prelude.flip(Data_Foldable.foldr(__dict_Foldable_64)(cons(__dict_Monoid_62)(__dict_Measured_63)));
        };
    };
};
var filter = function (__dict_Monoid_65) {
    return function (__dict_Measured_66) {
        return function (p) {
            return Data_Foldable.foldr(foldableFingerTree)(function (x) {
                return function (acc) {
                    var _2649 = p(x);
                    if (_2649) {
                        return cons(__dict_Monoid_65)(__dict_Measured_66)(x)(acc);
                    };
                    if (!_2649) {
                        return acc;
                    };
                    throw new Error("Failed pattern match");
                };
            })(Empty.value);
        };
    };
};
var split = function (__dict_Monoid_67) {
    return function (__dict_Measured_68) {
        return function (p) {
            return function (_537) {
                if (_537 instanceof Empty) {
                    return new Data_Tuple.Tuple(lazyEmpty, lazyEmpty);
                };
                var _2652 = p(Data_Sequence_Internal.measure(measuredFingerTree(__dict_Monoid_67)(__dict_Measured_68))(_537));
                if (_2652) {
                    var _2653 = unsafeSplitTree(__dict_Monoid_67)(__dict_Measured_68)(p)(Data_Monoid.mempty(__dict_Monoid_67))(_537);
                    return new Data_Tuple.Tuple(_2653.value0, Data_Lazy.defer(function (_524) {
                        return cons(__dict_Monoid_67)(__dict_Measured_68)(_2653.value1)(Data_Lazy.force(_2653.value2));
                    }));
                };
                if (!_2652) {
                    return new Data_Tuple.Tuple(Data_Lazy.defer(function (_525) {
                        return _537;
                    }), lazyEmpty);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
};
var compareFingerTree = function (__copy___dict_Monoid_69) {
    return function (__copy___dict_Measured_70) {
        return function (__copy___dict_Ord_71) {
            return function (__copy_xs) {
                return function (__copy_ys) {
                    var __dict_Monoid_69 = __copy___dict_Monoid_69;
                    var __dict_Measured_70 = __copy___dict_Measured_70;
                    var __dict_Ord_71 = __copy___dict_Ord_71;
                    var xs = __copy_xs;
                    var ys = __copy_ys;
                    tco: while (true) {
                        var _2659 = new Data_Tuple.Tuple(viewL(__dict_Monoid_69)(__dict_Measured_70)(xs), viewL(__dict_Monoid_69)(__dict_Measured_70)(ys));
                        if (_2659.value0 instanceof NilL && _2659.value1 instanceof NilL) {
                            return Prelude.EQ.value;
                        };
                        if (_2659.value0 instanceof NilL) {
                            return Prelude.LT.value;
                        };
                        if (_2659.value1 instanceof NilL) {
                            return Prelude.GT.value;
                        };
                        if (_2659.value0 instanceof ConsL && _2659.value1 instanceof ConsL) {
                            var _2666 = Prelude.compare(__dict_Ord_71)(_2659.value0.value0)(_2659.value1.value0);
                            if (_2666 instanceof Prelude.EQ) {
                                var ys$prime$prime = Data_Lazy.force(_2659.value1.value1);
                                var xs$prime$prime = Data_Lazy.force(_2659.value0.value1);
                                var __tco___dict_Monoid_69 = __dict_Monoid_69;
                                var __tco___dict_Measured_70 = __dict_Measured_70;
                                var __tco___dict_Ord_71 = __dict_Ord_71;
                                __dict_Monoid_69 = __tco___dict_Monoid_69;
                                __dict_Measured_70 = __tco___dict_Measured_70;
                                __dict_Ord_71 = __tco___dict_Ord_71;
                                xs = xs$prime$prime;
                                ys = ys$prime$prime;
                                continue tco;
                            };
                            return _2666;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
    };
};
var app3 = function (__dict_Monoid_72) {
    return function (__dict_Measured_73) {
        return function (_533) {
            return function (ts) {
                return function (_534) {
                    if (_533 instanceof Empty) {
                        return consAll(__dict_Monoid_72)(__dict_Measured_73)(Data_Foldable.foldableArray)(ts)(_534);
                    };
                    if (_534 instanceof Empty) {
                        return snocAll(__dict_Monoid_72)(__dict_Measured_73)(Data_Foldable.foldableArray)(_533)(ts);
                    };
                    if (_533 instanceof Single) {
                        return cons(__dict_Monoid_72)(__dict_Measured_73)(_533.value0)(consAll(__dict_Monoid_72)(__dict_Measured_73)(Data_Foldable.foldableArray)(ts)(_534));
                    };
                    if (_534 instanceof Single) {
                        return snoc(__dict_Monoid_72)(__dict_Measured_73)(snocAll(__dict_Monoid_72)(__dict_Measured_73)(Data_Foldable.foldableArray)(_533)(ts))(_534.value0);
                    };
                    if (_533 instanceof Deep && _534 instanceof Deep) {
                        var computeM$prime = function (_551) {
                            return app3(__dict_Monoid_72)(measuredNode)(Data_Lazy.force(_533.value2))(nodes(__dict_Monoid_72)(__dict_Measured_73)(Prelude["<>"](Data_Array.semigroupArray)(_533.value3)(Prelude["<>"](Data_Array.semigroupArray)(ts)(_534.value1))))(Data_Lazy.force(_534.value2));
                        };
                        return deep(__dict_Monoid_72)(__dict_Measured_73)(_533.value1)(Data_Lazy.defer(computeM$prime))(_534.value3);
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
};
var append = function (__dict_Monoid_74) {
    return function (__dict_Measured_75) {
        return function (xs) {
            return function (ys) {
                return app3(__dict_Monoid_74)(__dict_Measured_75)(xs)([  ])(ys);
            };
        };
    };
};
var semigroupFingerTree = function (__dict_Monoid_76) {
    return function (__dict_Measured_77) {
        return new Prelude.Semigroup(append(__dict_Monoid_76)(__dict_Measured_77));
    };
};
module.exports = {
    LazySplit: LazySplit, 
    Split: Split, 
    NilR: NilR, 
    SnocR: SnocR, 
    NilL: NilL, 
    ConsL: ConsL, 
    Empty: Empty, 
    Single: Single, 
    Deep: Deep, 
    Node2: Node2, 
    Node3: Node3, 
    unfoldRight: unfoldRight, 
    unfoldLeft: unfoldLeft, 
    filter: filter, 
    split: split, 
    unsafeSplitTree: unsafeSplitTree, 
    splitDigit: splitDigit, 
    append: append, 
    nodes: nodes, 
    app3: app3, 
    init: init, 
    last: last, 
    deepR: deepR, 
    viewR: viewR, 
    initDigit: initDigit, 
    lastDigit: lastDigit, 
    tail: tail, 
    head: head, 
    isEmpty: isEmpty, 
    deepL: deepL, 
    viewL: viewL, 
    tailDigit: tailDigit, 
    headDigit: headDigit, 
    toFingerTree: toFingerTree, 
    snocAll: snocAll, 
    consAll: consAll, 
    snoc: snoc, 
    cons: cons, 
    compareFingerTree: compareFingerTree, 
    eqFingerTree: eqFingerTree, 
    deep: deep, 
    lazyEmpty: lazyEmpty, 
    nodeToDigit: nodeToDigit, 
    node3: node3, 
    node2: node2, 
    showNode: showNode, 
    functorNode: functorNode, 
    foldableNode: foldableNode, 
    traversableNode: traversableNode, 
    measuredNode: measuredNode, 
    showFingerTree: showFingerTree, 
    semigroupFingerTree: semigroupFingerTree, 
    functorFingerTree: functorFingerTree, 
    foldableFingerTree: foldableFingerTree, 
    traversableFingerTree: traversableFingerTree, 
    measuredFingerTree: measuredFingerTree, 
    functorViewL: functorViewL
};
