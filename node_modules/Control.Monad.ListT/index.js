// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Lazy = require("Data.Lazy");
var Data_Array = require("Data.Array");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var Data_Monoid = require("Data.Monoid");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Data_Unfoldable = require("Data.Unfoldable");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Monad = require("Control.Monad");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Yield = (function () {
    function Yield(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Yield.create = function (value0) {
        return function (value1) {
            return new Yield(value0, value1);
        };
    };
    return Yield;
})();
var Skip = (function () {
    function Skip(value0) {
        this.value0 = value0;
    };
    Skip.create = function (value0) {
        return new Skip(value0);
    };
    return Skip;
})();
var Done = (function () {
    function Done() {

    };
    Done.value = new Done();
    return Done;
})();
var ListT = (function () {
    function ListT(value0) {
        this.value0 = value0;
    };
    ListT.create = function (value0) {
        return new ListT(value0);
    };
    return ListT;
})();
var ZipListT = function (x) {
    return x;
};
var zipList = ZipListT;
var wrapLazy = function (__dict_Monad_0) {
    return function (v) {
        return ListT.create(Prelude.pure(__dict_Monad_0["__superclass_Prelude.Applicative_0"]())(new Skip(v)));
    };
};
var wrapEffect = function (__dict_Monad_1) {
    return function (v) {
        return ListT.create(Prelude["<$>"](((__dict_Monad_1["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude["<<<"](Prelude.semigroupoidArr)(Skip.create)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Lazy.defer)(Prelude["const"])))(v));
    };
};
var unfold = function (__dict_Monad_2) {
    return function (f) {
        return function (z) {
            var g = function (_488) {
                if (_488 instanceof Data_Maybe.Just) {
                    return new Yield(_488.value0.value1, Data_Lazy.defer(function (_480) {
                        return unfold(__dict_Monad_2)(f)(_488.value0.value0);
                    }));
                };
                if (_488 instanceof Data_Maybe.Nothing) {
                    return Done.value;
                };
                throw new Error("Failed pattern match");
            };
            return ListT.create(Prelude["<$>"](((__dict_Monad_2["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g)(f(z)));
        };
    };
};
var runListT = function (_483) {
    return _483.value0;
};
var scanl = function (__dict_Monad_4) {
    return function (f) {
        return function (b) {
            return function (l) {
                var g = function (_498) {
                    var h = function (_499) {
                        if (_499 instanceof Yield) {
                            var b$prime = f(_498.value0)(_499.value0);
                            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(b$prime, Data_Lazy.force(_499.value1)), b$prime));
                        };
                        if (_499 instanceof Skip) {
                            return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(_498.value0, Data_Lazy.force(_499.value0)), _498.value0));
                        };
                        if (_499 instanceof Done) {
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match");
                    };
                    return Prelude["<$>"](((__dict_Monad_4["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(h)(runListT(_498.value1));
                };
                return unfold(__dict_Monad_4)(g)(new Data_Tuple.Tuple(b, l));
            };
        };
    };
};
var stepMap = function (__dict_Functor_5) {
    return function (f) {
        return function (l) {
            return ListT.create(Prelude["<$>"](__dict_Functor_5)(f)(runListT(l)));
        };
    };
};
var takeWhile = function (__dict_Applicative_6) {
    return function (f) {
        var g = function (_490) {
            if (_490 instanceof Yield) {
                var ifThenElse = function (p) {
                    return function (a_1) {
                        return function (b) {
                            if (p) {
                                return a_1;
                            };
                            if (!p) {
                                return b;
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
                return ifThenElse(f(_490.value0))(new Yield(_490.value0, Prelude["<$>"](Data_Lazy.functorLazy)(takeWhile(__dict_Applicative_6)(f))(_490.value1)))(Done.value);
            };
            if (_490 instanceof Skip) {
                return Skip.create(Prelude["<$>"](Data_Lazy.functorLazy)(takeWhile(__dict_Applicative_6)(f))(_490.value0));
            };
            if (_490 instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match");
        };
        return stepMap((__dict_Applicative_6["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g);
    };
};
var uncons = function (__dict_Monad_7) {
    return function (l) {
        var g = function (_495) {
            if (_495 instanceof Yield) {
                return Prelude.pure(__dict_Monad_7["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Just.create(new Data_Tuple.Tuple(_495.value0, Data_Lazy.force(_495.value1))));
            };
            if (_495 instanceof Skip) {
                return uncons(__dict_Monad_7)(Data_Lazy.force(_495.value0));
            };
            if (_495 instanceof Done) {
                return Prelude.pure(__dict_Monad_7["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Nothing.value);
            };
            throw new Error("Failed pattern match");
        };
        return Prelude[">>="](__dict_Monad_7["__superclass_Prelude.Bind_1"]())(runListT(l))(g);
    };
};
var tail = function (__dict_Monad_8) {
    return function (l) {
        return Prelude["<$>"](((__dict_Monad_8["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Tuple.snd))(uncons(__dict_Monad_8)(l));
    };
};
var prepend$prime = function (__dict_Applicative_9) {
    return function (h) {
        return function (t) {
            return ListT.create(Prelude.pure(__dict_Applicative_9)(new Yield(h, t)));
        };
    };
};
var prepend = function (__dict_Applicative_10) {
    return function (h) {
        return function (t) {
            return prepend$prime(__dict_Applicative_10)(h)(Data_Lazy.defer(Prelude["const"](t)));
        };
    };
};
var nil = function (__dict_Applicative_12) {
    return ListT.create(Prelude.pure(__dict_Applicative_12)(Done.value));
};
var singleton = function (__dict_Applicative_14) {
    return function (a) {
        return prepend(__dict_Applicative_14)(a)(nil(__dict_Applicative_14));
    };
};
var take = function (__dict_Applicative_15) {
    return function (_484) {
        return function (fa) {
            if (_484 === 0) {
                return nil(__dict_Applicative_15);
            };
            var f = function (_489) {
                if (_489 instanceof Yield) {
                    var s$prime = Prelude["<$>"](Data_Lazy.functorLazy)(take(__dict_Applicative_15)(_484 - 1))(_489.value1);
                    return new Yield(_489.value0, s$prime);
                };
                if (_489 instanceof Skip) {
                    var s$prime = Prelude["<$>"](Data_Lazy.functorLazy)(take(__dict_Applicative_15)(_484))(_489.value0);
                    return new Skip(s$prime);
                };
                if (_489 instanceof Done) {
                    return Done.value;
                };
                throw new Error("Failed pattern match");
            };
            return stepMap((__dict_Applicative_15["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f)(fa);
        };
    };
};
var zipWith$prime = function (__dict_Monad_16) {
    return function (f) {
        var loop = function (fa) {
            return function (fb) {
                var g = function (_500) {
                    return function (_501) {
                        if (_501 instanceof Data_Maybe.Nothing) {
                            return Prelude.pure(__dict_Monad_16["__superclass_Prelude.Applicative_0"]())(nil(__dict_Monad_16["__superclass_Prelude.Applicative_0"]()));
                        };
                        if (_500 instanceof Data_Maybe.Nothing) {
                            return Prelude.pure(__dict_Monad_16["__superclass_Prelude.Applicative_0"]())(nil(__dict_Monad_16["__superclass_Prelude.Applicative_0"]()));
                        };
                        if (_500 instanceof Data_Maybe.Just && _501 instanceof Data_Maybe.Just) {
                            return Prelude["<$>"](((__dict_Monad_16["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude.flip(prepend$prime(__dict_Monad_16["__superclass_Prelude.Applicative_0"]()))(Data_Lazy.defer(function (_481) {
                                return zipWith$prime(__dict_Monad_16)(f)(_500.value0.value1)(_501.value0.value1);
                            })))(f(_500.value0.value0)(_501.value0.value0));
                        };
                        throw new Error("Failed pattern match");
                    };
                };
                return wrapEffect(__dict_Monad_16)(Prelude[">>="](__dict_Monad_16["__superclass_Prelude.Bind_1"]())(uncons(__dict_Monad_16)(fa))(function (_55) {
                    return Prelude[">>="](__dict_Monad_16["__superclass_Prelude.Bind_1"]())(uncons(__dict_Monad_16)(fb))(function (_54) {
                        return g(_55)(_54);
                    });
                }));
            };
        };
        return loop;
    };
};
var zipWith = function (__dict_Monad_17) {
    return function (f) {
        var g = function (a) {
            return function (b) {
                return Prelude.pure(__dict_Monad_17["__superclass_Prelude.Applicative_0"]())(f(a)(b));
            };
        };
        return zipWith$prime(__dict_Monad_17)(g);
    };
};
var mapMaybe = function (__dict_Functor_22) {
    return function (f) {
        var g = function (_494) {
            if (_494 instanceof Yield) {
                return Data_Maybe.fromMaybe(Skip.create)(Prelude["<$>"](Data_Maybe.functorMaybe)(Yield.create)(f(_494.value0)))(Prelude["<$>"](Data_Lazy.functorLazy)(mapMaybe(__dict_Functor_22)(f))(_494.value1));
            };
            if (_494 instanceof Skip) {
                return Skip.create(Prelude["<$>"](Data_Lazy.functorLazy)(mapMaybe(__dict_Functor_22)(f))(_494.value0));
            };
            if (_494 instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match");
        };
        return stepMap(__dict_Functor_22)(g);
    };
};
var iterate = function (__dict_Monad_23) {
    return function (f) {
        return function (a) {
            var g = function (a_1) {
                return Prelude.pure(__dict_Monad_23["__superclass_Prelude.Applicative_0"]())(new Data_Maybe.Just(new Data_Tuple.Tuple(f(a_1), a_1)));
            };
            return unfold(__dict_Monad_23)(g)(a);
        };
    };
};
var repeat = function (__dict_Monad_24) {
    return iterate(__dict_Monad_24)(Prelude.id(Prelude.categoryArr));
};
var head = function (__dict_Monad_25) {
    return function (l) {
        return Prelude["<$>"](((__dict_Monad_25["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Tuple.fst))(uncons(__dict_Monad_25)(l));
    };
};
var functorListT = function (__dict_Functor_27) {
    return new Prelude.Functor(function (f) {
        var g = function (_504) {
            if (_504 instanceof Yield) {
                return new Yield(f(_504.value0), Prelude["<$>"](Data_Lazy.functorLazy)(Prelude["<$>"](functorListT(__dict_Functor_27))(f))(_504.value1));
            };
            if (_504 instanceof Skip) {
                return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(Prelude["<$>"](functorListT(__dict_Functor_27))(f))(_504.value0));
            };
            if (_504 instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match");
        };
        return stepMap(__dict_Functor_27)(g);
    });
};
var functorZipListT = function (__dict_Functor_26) {
    return new Prelude.Functor(function (f) {
        return function (_505) {
            return ZipListT(Prelude["<$>"](functorListT(__dict_Functor_26))(f)(_505));
        };
    });
};
var fromEffect = function (__dict_Applicative_28) {
    return function (fa) {
        return ListT.create(Prelude["<$>"]((__dict_Applicative_28["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude.flip(Yield.create)(Data_Lazy.defer(function (_479) {
            return nil(__dict_Applicative_28);
        })))(fa));
    };
};
var monadTransListT = new Control_Monad_Trans.MonadTrans(function (__dict_Monad_29) {
    return fromEffect(__dict_Monad_29["__superclass_Prelude.Applicative_0"]());
});
var fromArray = function (__dict_Monad_30) {
    return function (xs) {
        var f = function (n) {
            return Prelude.pure(__dict_Monad_30["__superclass_Prelude.Applicative_0"]())(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create(n + 1))(Data_Array["!!"](xs)(n)));
        };
        return unfold(__dict_Monad_30)(f)(0);
    };
};
var foldl$prime = function (__dict_Monad_31) {
    return function (f) {
        var loop = function (b) {
            return function (l) {
                var g = function (_496) {
                    if (_496 instanceof Data_Maybe.Nothing) {
                        return Prelude.pure(__dict_Monad_31["__superclass_Prelude.Applicative_0"]())(b);
                    };
                    if (_496 instanceof Data_Maybe.Just) {
                        return Prelude[">>="](__dict_Monad_31["__superclass_Prelude.Bind_1"]())(f(b)(_496.value0.value0))(Prelude.flip(loop)(_496.value0.value1));
                    };
                    throw new Error("Failed pattern match");
                };
                return Prelude[">>="](__dict_Monad_31["__superclass_Prelude.Bind_1"]())(uncons(__dict_Monad_31)(l))(g);
            };
        };
        return loop;
    };
};
var foldl = function (__dict_Monad_32) {
    return function (f) {
        var loop = function (b) {
            return function (l) {
                var g = function (_497) {
                    if (_497 instanceof Data_Maybe.Nothing) {
                        return Prelude.pure(__dict_Monad_32["__superclass_Prelude.Applicative_0"]())(b);
                    };
                    if (_497 instanceof Data_Maybe.Just) {
                        return loop(f(b)(_497.value0.value0))(_497.value0.value1);
                    };
                    throw new Error("Failed pattern match");
                };
                return Prelude[">>="](__dict_Monad_32["__superclass_Prelude.Bind_1"]())(uncons(__dict_Monad_32)(l))(g);
            };
        };
        return loop;
    };
};
var toArray = function (__dict_Monad_33) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["<$>"](((__dict_Monad_33["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Array.reverse))(foldl(__dict_Monad_33)(Prelude.flip(Prelude[":"]))([  ]));
};
var filter = function (__dict_Functor_34) {
    return function (f) {
        var g = function (_493) {
            if (_493 instanceof Yield) {
                var s$prime = Prelude["<$>"](Data_Lazy.functorLazy)(filter(__dict_Functor_34)(f))(_493.value1);
                var _2361 = f(_493.value0);
                if (_2361) {
                    return new Yield(_493.value0, s$prime);
                };
                if (!_2361) {
                    return new Skip(s$prime);
                };
                throw new Error("Failed pattern match");
            };
            if (_493 instanceof Skip) {
                var s$prime = Prelude["<$>"](Data_Lazy.functorLazy)(filter(__dict_Functor_34)(f))(_493.value0);
                return new Skip(s$prime);
            };
            if (_493 instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match");
        };
        return stepMap(__dict_Functor_34)(g);
    };
};
var dropWhile = function (__dict_Applicative_35) {
    return function (f) {
        var g = function (_492) {
            if (_492 instanceof Yield) {
                var _2366 = f(_492.value0);
                if (_2366) {
                    return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(dropWhile(__dict_Applicative_35)(f))(_492.value1));
                };
                if (!_2366) {
                    return new Yield(_492.value0, _492.value1);
                };
                throw new Error("Failed pattern match");
            };
            if (_492 instanceof Skip) {
                return Skip.create(Prelude["<$>"](Data_Lazy.functorLazy)(dropWhile(__dict_Applicative_35)(f))(_492.value0));
            };
            if (_492 instanceof Done) {
                return Done.value;
            };
            throw new Error("Failed pattern match");
        };
        return stepMap((__dict_Applicative_35["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g);
    };
};
var drop = function (__dict_Applicative_36) {
    return function (_485) {
        return function (fa) {
            if (_485 === 0) {
                return fa;
            };
            var f = function (_491) {
                if (_491 instanceof Yield) {
                    var s$prime = Prelude["<$>"](Data_Lazy.functorLazy)(drop(__dict_Applicative_36)(_485 - 1))(_491.value1);
                    return new Skip(s$prime);
                };
                if (_491 instanceof Skip) {
                    var s$prime = Prelude["<$>"](Data_Lazy.functorLazy)(drop(__dict_Applicative_36)(_485))(_491.value0);
                    return new Skip(s$prime);
                };
                if (_491 instanceof Done) {
                    return Done.value;
                };
                throw new Error("Failed pattern match");
            };
            return stepMap((__dict_Applicative_36["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f)(fa);
        };
    };
};
var cons$prime = function (__dict_Applicative_37) {
    return function (lh) {
        return function (t) {
            var f = function (_486) {
                return new Yield(Data_Lazy.force(lh), t);
            };
            return ListT.create(Prelude["<$>"]((__dict_Applicative_37["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f)(Prelude.pure(__dict_Applicative_37)(Prelude.unit)));
        };
    };
};
var unfoldableListT = function (__dict_Monad_38) {
    return new Data_Unfoldable.Unfoldable(function (f) {
        return function (b) {
            var go = function (_506) {
                if (_506 instanceof Data_Maybe.Nothing) {
                    return nil(__dict_Monad_38["__superclass_Prelude.Applicative_0"]());
                };
                if (_506 instanceof Data_Maybe.Just) {
                    return cons$prime(__dict_Monad_38["__superclass_Prelude.Applicative_0"]())(Prelude.pure(Data_Lazy.applicativeLazy)(_506.value0.value0))(Data_Lazy.defer(function (_482) {
                        return go(f(_506.value0.value1));
                    }));
                };
                throw new Error("Failed pattern match");
            };
            return go(f(b));
        };
    });
};
var semigroupListT = function (__dict_Applicative_40) {
    return new Prelude.Semigroup(concat(__dict_Applicative_40));
};
var concat = function (__dict_Applicative_39) {
    return function (x) {
        return function (y) {
            var f = function (_487) {
                if (_487 instanceof Yield) {
                    return new Yield(_487.value0, Prelude["<$>"](Data_Lazy.functorLazy)(Prelude.flip(Prelude["<>"](semigroupListT(__dict_Applicative_39)))(y))(_487.value1));
                };
                if (_487 instanceof Skip) {
                    return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(Prelude.flip(Prelude["<>"](semigroupListT(__dict_Applicative_39)))(y))(_487.value0));
                };
                if (_487 instanceof Done) {
                    return new Skip(Data_Lazy.defer(Prelude["const"](y)));
                };
                throw new Error("Failed pattern match");
            };
            return stepMap((__dict_Applicative_39["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f)(x);
        };
    };
};
var monoidListT = function (__dict_Applicative_19) {
    return new Data_Monoid.Monoid(function () {
        return semigroupListT(__dict_Applicative_19);
    }, nil(__dict_Applicative_19));
};
var semigroupZipListT = function (__dict_Applicative_3) {
    return new Prelude.Semigroup(function (_502) {
        return function (_503) {
            return ZipListT(Prelude["<>"](semigroupListT(__dict_Applicative_3))(_502)(_503));
        };
    });
};
var monoidZipListT = function (__dict_Applicative_18) {
    return new Data_Monoid.Monoid(function () {
        return semigroupZipListT(__dict_Applicative_18);
    }, Data_Monoid.mempty(monoidListT(__dict_Applicative_18)));
};
var catMaybes = function (__dict_Functor_41) {
    return mapMaybe(__dict_Functor_41)(Prelude.id(Prelude.categoryArr));
};
var applyZipListT = function (__dict_Monad_43) {
    return new Prelude.Apply(function (_507) {
        return function (_508) {
            var g = function (f) {
                return function (x) {
                    return f(x);
                };
            };
            return ZipListT(zipWith(__dict_Monad_43)(g)(_507)(_508));
        };
    }, function () {
        return functorZipListT(((__dict_Monad_43["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
    });
};
var monadListT = function (__dict_Monad_21) {
    return new Prelude.Monad(function () {
        return applicativeListT(__dict_Monad_21);
    }, function () {
        return bindListT(__dict_Monad_21);
    });
};
var bindListT = function (__dict_Monad_42) {
    return new Prelude.Bind(function (fa) {
        return function (f) {
            var g = function (_509) {
                if (_509 instanceof Yield) {
                    var h = function (s_1) {
                        return concat(__dict_Monad_42["__superclass_Prelude.Applicative_0"]())(f(_509.value0))(Prelude[">>="](bindListT(__dict_Monad_42))(s_1)(f));
                    };
                    return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(h)(_509.value1));
                };
                if (_509 instanceof Skip) {
                    var h = function (s_2) {
                        return Prelude[">>="](bindListT(__dict_Monad_42))(s_2)(f);
                    };
                    return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(h)(_509.value0));
                };
                if (_509 instanceof Done) {
                    return Done.value;
                };
                throw new Error("Failed pattern match");
            };
            return stepMap(((__dict_Monad_42["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g)(fa);
        };
    }, function () {
        return applyListT(__dict_Monad_42);
    });
};
var applyListT = function (__dict_Monad_44) {
    return new Prelude.Apply(function (f) {
        return function (x) {
            return Prelude[">>="](bindListT(__dict_Monad_44))(f)(function (_57) {
                return Prelude[">>="](bindListT(__dict_Monad_44))(x)(function (_56) {
                    return Prelude["return"](monadListT(__dict_Monad_44))(_57(_56));
                });
            });
        };
    }, function () {
        return functorListT(((__dict_Monad_44["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
    });
};
var applicativeListT = function (__dict_Monad_46) {
    return new Prelude.Applicative(function () {
        return applyListT(__dict_Monad_46);
    }, singleton(__dict_Monad_46["__superclass_Prelude.Applicative_0"]()));
};
var applicativeZipListT = function (__dict_Monad_45) {
    return new Prelude.Applicative(function () {
        return applyZipListT(__dict_Monad_45);
    }, Prelude["<<<"](Prelude.semigroupoidArr)(ZipListT)(Prelude.pure(applicativeListT(__dict_Monad_45))));
};
var altListT = function (__dict_Applicative_50) {
    return new Control_Alt.Alt(concat(__dict_Applicative_50), function () {
        return functorListT((__dict_Applicative_50["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
    });
};
var altZipListT = function (__dict_Applicative_49) {
    return new Control_Alt.Alt(function (_510) {
        return function (_511) {
            return ZipListT(Control_Alt["<|>"](altListT(__dict_Applicative_49))(_510)(_511));
        };
    }, function () {
        return functorZipListT((__dict_Applicative_49["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
    });
};
var plusListT = function (__dict_Monad_13) {
    return new Control_Plus.Plus(function () {
        return altListT(__dict_Monad_13["__superclass_Prelude.Applicative_0"]());
    }, nil(__dict_Monad_13["__superclass_Prelude.Applicative_0"]()));
};
var alternativeListT = function (__dict_Monad_48) {
    return new Control_Alternative.Alternative(function () {
        return plusListT(__dict_Monad_48);
    }, function () {
        return applicativeListT(__dict_Monad_48);
    });
};
var monadPlusListT = function (__dict_Monad_20) {
    return new Control_MonadPlus.MonadPlus(function () {
        return alternativeListT(__dict_Monad_20);
    }, function () {
        return monadListT(__dict_Monad_20);
    });
};
var plusZipListT = function (__dict_Monad_11) {
    return new Control_Plus.Plus(function () {
        return altZipListT(__dict_Monad_11["__superclass_Prelude.Applicative_0"]());
    }, Control_Plus.empty(plusListT(__dict_Monad_11)));
};
var alternativeZipListT = function (__dict_Monad_47) {
    return new Control_Alternative.Alternative(function () {
        return plusZipListT(__dict_Monad_47);
    }, function () {
        return applicativeZipListT(__dict_Monad_47);
    });
};
module.exports = {
    zipList: zipList, 
    "zipWith'": zipWith$prime, 
    zipWith: zipWith, 
    wrapLazy: wrapLazy, 
    wrapEffect: wrapEffect, 
    unfold: unfold, 
    uncons: uncons, 
    toArray: toArray, 
    takeWhile: takeWhile, 
    take: take, 
    tail: tail, 
    singleton: singleton, 
    scanl: scanl, 
    repeat: repeat, 
    "prepend'": prepend$prime, 
    prepend: prepend, 
    nil: nil, 
    mapMaybe: mapMaybe, 
    iterate: iterate, 
    head: head, 
    fromEffect: fromEffect, 
    fromArray: fromArray, 
    "foldl'": foldl$prime, 
    foldl: foldl, 
    filter: filter, 
    dropWhile: dropWhile, 
    drop: drop, 
    "cons'": cons$prime, 
    catMaybes: catMaybes, 
    semigroupListT: semigroupListT, 
    semigroupZipListT: semigroupZipListT, 
    monoidListT: monoidListT, 
    monoidZipListT: monoidZipListT, 
    functorListT: functorListT, 
    functorZipListT: functorZipListT, 
    unfoldableListT: unfoldableListT, 
    applyListT: applyListT, 
    applyZipListT: applyZipListT, 
    applicativeListT: applicativeListT, 
    applicativeZipListT: applicativeZipListT, 
    bindListT: bindListT, 
    monadListT: monadListT, 
    monadTransListT: monadTransListT, 
    altListT: altListT, 
    altZipListT: altZipListT, 
    plusListT: plusListT, 
    plusZipListT: plusZipListT, 
    alternativeListT: alternativeListT, 
    alternativeZipListT: alternativeZipListT, 
    monadPlusListT: monadPlusListT
};
