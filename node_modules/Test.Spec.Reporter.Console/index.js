// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Test_Spec_Console = require("Test.Spec.Console");
var Test_Spec_Summary = require("Test.Spec.Summary");
var Debug_Trace = require("Debug.Trace");
var Test_Spec_Errors = require("Test.Spec.Errors");
var Control_Monad_Extras = require("Control.Monad.Extras");
var Data_Array = require("Data.Array");
var Test_Spec_Reporter = require("Test.Spec.Reporter");
var Data_String = require("Data.String");
var Data_Foldable = require("Data.Foldable");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Exception = require("Control.Monad.Eff.Exception");
var Test_Spec = require("Test.Spec");
var printEntry = function (_638) {
    if (_638 instanceof Test_Spec_Reporter.It && _638.value1 instanceof Test_Spec.Success) {
        return Test_Spec_Console.withAttrs([ 32 ])(Test_Spec_Console.writeln("\u2713\ufe0e " + _638.value0));
    };
    if (_638 instanceof Test_Spec_Reporter.Pending) {
        return Test_Spec_Console.withAttrs([ 33 ])(Test_Spec_Console.writeln("~ " + _638.value0));
    };
    if (_638 instanceof Test_Spec_Reporter.It && _638.value1 instanceof Test_Spec.Failure) {
        return function __do() {
            Test_Spec_Console.withAttrs([ 31 ])(Test_Spec_Console.writeln("\u2717 " + (_638.value0 + ":")))();
            Debug_Trace.trace("")();
            return Test_Spec_Console.withAttrs([ 31 ])(Test_Spec_Console.writeln("  " + Test_Spec_Errors.errorMessage(_638.value1.value0)))();
        };
    };
    if (_638 instanceof Test_Spec_Reporter.Describe) {
        var printNames = function (_639) {
            if (_639.length === 0) {
                return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
            };
            if (_639.length === 1) {
                return Test_Spec_Console.withAttrs([ 1, 35 ])(Test_Spec_Console.writeln(_639[0]));
            };
            if (_639.length >= 1) {
                var _3051 = _639.slice(1);
                return function __do() {
                    Test_Spec_Console.withAttrs([ 1 ])(function __do() {
                        Test_Spec_Console.write(_639[0])();
                        return Test_Spec_Console.write(" Â» ")();
                    })();
                    return printNames(_3051)();
                };
            };
            throw new Error("Failed pattern match");
        };
        return function __do() {
            Test_Spec_Console.writeln("")();
            return printNames(_638.value0)();
        };
    };
    throw new Error("Failed pattern match");
};
var pluralize = function (s) {
    return function (_636) {
        if (_636 === 1) {
            return s;
        };
        return s + "s";
    };
};
var printPassedFailed = function (p) {
    return function (f) {
        var total = p + f;
        var testStr = pluralize("test")(total);
        var attrs = (function () {
            var _3055 = f > 0;
            if (_3055) {
                return [ 31 ];
            };
            if (!_3055) {
                return [ 32 ];
            };
            throw new Error("Failed pattern match");
        })();
        var amount = Prelude.show(Prelude.showNumber)(p) + ("/" + (Prelude.show(Prelude.showNumber)(total) + (" " + (testStr + " passed"))));
        return Test_Spec_Console.withAttrs(attrs)(Test_Spec_Console.writeln(amount));
    };
};
var printPending = function (p) {
    var _3056 = p > 0;
    if (_3056) {
        return Test_Spec_Console.withAttrs([ 33 ])(function __do() {
            Test_Spec_Console.write(Prelude.show(Prelude.showNumber)(p))();
            Test_Spec_Console.write(" ")();
            Test_Spec_Console.write(pluralize("test")(p))();
            return Test_Spec_Console.writeln(" pending")();
        });
    };
    if (!_3056) {
        return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
    };
    throw new Error("Failed pattern match");
};
var printSummary$prime = function (_637) {
    return function __do() {
        Test_Spec_Console.writeln("")();
        Test_Spec_Console.withAttrs([ 1 ])(Test_Spec_Console.writeln("Summary"))();
        printPassedFailed(_637.value0)(_637.value1)();
        printPending(_637.value2)();
        return Test_Spec_Console.writeln("")();
    };
};
var printSummary = function (groups) {
    return printSummary$prime(Test_Spec_Summary.summarize(groups));
};
var consoleReporter = function (groups) {
    return function __do() {
        Control_Monad_Extras.mapM_(Control_Monad_Eff.monadEff)(printEntry)(Data_Array.concatMap(Test_Spec_Reporter.collapse)(groups))();
        return printSummary(groups)();
    };
};
module.exports = {
    consoleReporter: consoleReporter
};
