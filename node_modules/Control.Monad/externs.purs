-- Generated by psc-make version 0.6.9.5
module Control.Monad where
import Prelude ()
import Control.Monad ()
import Prim ()
import Prelude ()
--  | Perform a monadic action when a condition is true.
--  | Perform a monadic action unless a condition is true.
--  | Perform a monadic action `n` times collecting all of the results.
--  | Perform a fold using a monadic step function.
--  | Filter where the predicate returns a monadic `Boolean`.
--  |
--  | For example: 
--  |
--  | ```purescript
--  | powerSet :: forall a. [a] -> [[a]]
--  | powerSet = filterM (const [true, false])
--  | ```
foreign import filterM :: forall a m. (Prelude.Monad m) => (a -> m Prim.Boolean) -> [a] -> m [a]
foreign import unless :: forall m. (Prelude.Monad m) => Prim.Boolean -> m Prelude.Unit -> m Prelude.Unit
foreign import when :: forall m. (Prelude.Monad m) => Prim.Boolean -> m Prelude.Unit -> m Prelude.Unit
foreign import foldM :: forall m a b. (Prelude.Monad m) => (a -> b -> m a) -> a -> [b] -> m a
foreign import replicateM :: forall m a. (Prelude.Monad m) => Prim.Number -> m a -> m [a]
