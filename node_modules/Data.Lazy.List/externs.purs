-- Generated by psc-make version 0.6.9.5
module Data.Lazy.List where
import Prelude ()
import Data.Lazy ()
import Data.Lazy.List ()
import Data.Array ()
import Data.Foldable ()
import Prim ()
import Prelude ()
import Data.Array ()
import Data.Foldable ()
import Data.Lazy ()
import Data.Monoid ()
import Data.Traversable ()
--  | A lazy linked list type.
--  | 
--  | This type is strict in its head element, but lazy in its tail.
--  |
--  | Various operations on lazy lists require evaluation of the entire list,
--  | so care is needed when defining and using infinite lists.
--  | Convert a lazy list into an immutable array. This function will
--  | attempt to evaluate the entire list, so should only be used on
--  | finite inputs.
--  | 
--  | Running time: `O(n)` where `n` is the number of elements in the list.
--  | Take the specified number of elements from the start of a lazy list, creating a new
--  | lazy list.
--  | Create an infinite lazy list which repeats the same value indefinitely.
--  | Create a lazy list from an immutable array.
--  | 
--  | Running time: `O(n)` where `n` is the number of elements in the array.
--  | Drop the specified number of elements from the start of a lazy list, creating a new
--  | lazy list.
data List (a :: *) = Nil  | Cons a (Data.Lazy.Lazy (Data.Lazy.List.List a))
foreign import drop :: forall a. Prim.Number -> Data.Lazy.List.List a -> Data.Lazy.List.List a
foreign import take :: forall a. Prim.Number -> Data.Lazy.List.List a -> Data.Lazy.List.List a
foreign import repeat :: forall a. a -> Data.Lazy.List.List a
foreign import fromArray :: forall a. [a] -> Data.Lazy.List.List a
foreign import toArray :: forall a. Data.Lazy.List.List a -> [a]
foreign import instance eqList :: (Prelude.Eq a) => Prelude.Eq (Data.Lazy.List.List a)
foreign import instance showList :: (Prelude.Show a) => Prelude.Show (Data.Lazy.List.List a)
foreign import instance semigroupList :: Prelude.Semigroup (Data.Lazy.List.List a)
foreign import instance monoidList :: Data.Monoid.Monoid (Data.Lazy.List.List a)
foreign import instance functorList :: Prelude.Functor Data.Lazy.List.List
foreign import instance applyList :: Prelude.Apply Data.Lazy.List.List
foreign import instance applicativeList :: Prelude.Applicative Data.Lazy.List.List
foreign import instance bindList :: Prelude.Bind Data.Lazy.List.List
foreign import instance monadList :: Prelude.Monad Data.Lazy.List.List
