// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Lazy = require("Data.Lazy");
var Data_Array = require("Data.Array");
var Data_Foldable = require("Data.Foldable");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
function showItems (l) {  return l.join(', ');};
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var $less$dot$greater = function (_414) {
    return function (ys) {
        if (_414 instanceof Nil) {
            return Data_Lazy.force(ys);
        };
        if (_414 instanceof Cons) {
            return new Cons(_414.value0, Prelude["<$>"](Data_Lazy.functorLazy)(function (xs$prime) {
                return $less$dot$greater(xs$prime)(ys);
            })(_414.value1));
        };
        throw new Error("Failed pattern match");
    };
};
var toArray = function (_415) {
    if (_415 instanceof Nil) {
        return [  ];
    };
    if (_415 instanceof Cons) {
        return Prelude[":"](_415.value0)(toArray(Data_Lazy.force(_415.value1)));
    };
    throw new Error("Failed pattern match");
};
var take = function (n) {
    return function (_416) {
        if (n < 1) {
            return Nil.value;
        };
        if (_416 instanceof Nil) {
            return Nil.value;
        };
        if (_416 instanceof Cons) {
            return new Cons(_416.value0, Data_Lazy.defer(function (_413) {
                return take(n - 1)(Data_Lazy.force(_416.value1));
            }));
        };
        throw new Error("Failed pattern match");
    };
};
var showList = function (__dict_Show_0) {
    return new Prelude.Show(function (l) {
        return "List(" + (showItems(Data_Array.map(Prelude.show(__dict_Show_0))(toArray(l))) + ")");
    });
};
var semigroupList = new Prelude.Semigroup(function (xs) {
    return function (ys) {
        return $less$dot$greater(xs)(Data_Lazy.defer(function (_409) {
            return ys;
        }));
    };
});
var repeat = function (x) {
    return new Cons(x, Data_Lazy.defer(function (_412) {
        return repeat(x);
    }));
};
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, Nil.value);
var functorList = new Prelude.Functor(function (f) {
    return function (_420) {
        if (_420 instanceof Nil) {
            return Nil.value;
        };
        if (_420 instanceof Cons) {
            return new Cons(f(_420.value0), Prelude["<$>"](Data_Lazy.functorLazy)(Prelude["<$>"](functorList)(f))(_420.value1));
        };
        throw new Error("Failed pattern match");
    };
});
var fromArray = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (x) {
    return function (xs) {
        return new Cons(x, Data_Lazy.defer(function (_411) {
            return xs;
        }));
    };
})(Nil.value);
var eqList = function (__dict_Eq_1) {
    return new Prelude.Eq(function (l) {
        return function (l$prime) {
            return !Prelude["=="](eqList(__dict_Eq_1))(l)(l$prime);
        };
    }, function (_418) {
        return function (_419) {
            if (_418 instanceof Nil && _419 instanceof Nil) {
                return true;
            };
            if (_418 instanceof Cons && _419 instanceof Cons) {
                return Prelude["=="](__dict_Eq_1)(_418.value0)(_419.value0) && Prelude["=="](eqList(__dict_Eq_1))(Data_Lazy.force(_418.value1))(Data_Lazy.force(_419.value1));
            };
            return false;
        };
    });
};
var drop = function (__copy_n) {
    return function (__copy__417) {
        var n = __copy_n;
        var _417 = __copy__417;
        tco: while (true) {
            if (n < 1) {
                return _417;
            };
            if (_417 instanceof Nil) {
                return Nil.value;
            };
            if (_417 instanceof Cons) {
                var __tco_n = n - 1;
                var __tco__417 = Data_Lazy.force(_417.value1);
                n = __tco_n;
                _417 = __tco__417;
                continue tco;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var monadList = new Prelude.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var bindList = new Prelude.Bind(function (_421) {
    return function (f) {
        if (_421 instanceof Nil) {
            return Nil.value;
        };
        if (_421 instanceof Cons) {
            return $less$dot$greater(f(_421.value0))(Prelude["<$>"](Data_Lazy.functorLazy)(function (xs$prime) {
                return Prelude[">>="](bindList)(xs$prime)(f);
            })(_421.value1));
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyList;
});
var applyList = new Prelude.Apply(Prelude.ap(monadList), function () {
    return functorList;
});
var applicativeList = new Prelude.Applicative(function () {
    return applyList;
}, function (x) {
    return new Cons(x, Data_Lazy.defer(function (_410) {
        return Nil.value;
    }));
});
module.exports = {
    Nil: Nil, 
    Cons: Cons, 
    drop: drop, 
    take: take, 
    repeat: repeat, 
    fromArray: fromArray, 
    toArray: toArray, 
    eqList: eqList, 
    showList: showList, 
    semigroupList: semigroupList, 
    monoidList: monoidList, 
    functorList: functorList, 
    applyList: applyList, 
    applicativeList: applicativeList, 
    bindList: bindList, 
    monadList: monadList
};
