-- Generated by psc-make version 0.6.9.5
module Control.Monad.RWS.Trans where
import Prelude ()
import Control.Monad.RWS.Trans ()
import Data.Tuple ()
import Data.Monoid ()
import Prim ()
import Prelude ()
import Control.Monad.Trans ()
import Data.Monoid ()
import Data.Tuple ()
newtype RWST (r :: *) (w :: *) (s :: *) (m :: * -> *) (a :: *) = RWST (r -> s -> m (Control.Monad.RWS.Trans.See s a w))
type See (s :: *) (a :: *) (w :: *) = { log :: w, result :: a, state :: s }
foreign import withRWST :: forall r1 r2 w s m a. (r2 -> s -> Data.Tuple.Tuple r1 s) -> Control.Monad.RWS.Trans.RWST r1 w s m a -> Control.Monad.RWS.Trans.RWST r2 w s m a
foreign import mapRWST :: forall r w1 w2 s m1 m2 a1 a2. (m1 (Control.Monad.RWS.Trans.See s a1 w1) -> m2 (Control.Monad.RWS.Trans.See s a2 w2)) -> Control.Monad.RWS.Trans.RWST r w1 s m1 a1 -> Control.Monad.RWS.Trans.RWST r w2 s m2 a2
foreign import execRWST :: forall r w s m a. (Prelude.Monad m) => Control.Monad.RWS.Trans.RWST r w s m a -> r -> s -> m (Data.Tuple.Tuple s w)
foreign import evalRWST :: forall r w s m a. (Prelude.Monad m) => Control.Monad.RWS.Trans.RWST r w s m a -> r -> s -> m (Data.Tuple.Tuple a w)
foreign import runRWST :: forall r w s m a. Control.Monad.RWS.Trans.RWST r w s m a -> r -> s -> m (Control.Monad.RWS.Trans.See s a w)
foreign import mkSee :: forall s a w. (Data.Monoid.Monoid w) => s -> a -> w -> Control.Monad.RWS.Trans.See s a w
foreign import instance functorRWST :: (Prelude.Functor m) => Prelude.Functor (Control.Monad.RWS.Trans.RWST r w s m)
foreign import instance applyRWST :: (Prelude.Apply m, Prelude.Semigroup w) => Prelude.Apply (Control.Monad.RWS.Trans.RWST r w s m)
foreign import instance bindRWST :: (Prelude.Bind m, Prelude.Semigroup w) => Prelude.Bind (Control.Monad.RWS.Trans.RWST r w s m)
foreign import instance applicativeRWST :: (Prelude.Applicative m, Data.Monoid.Monoid w) => Prelude.Applicative (Control.Monad.RWS.Trans.RWST r w s m)
foreign import instance monadRWST :: (Prelude.Monad m, Data.Monoid.Monoid w) => Prelude.Monad (Control.Monad.RWS.Trans.RWST r w s m)
foreign import instance monadTransRWST :: (Data.Monoid.Monoid w) => Control.Monad.Trans.MonadTrans (Control.Monad.RWS.Trans.RWST r w s)
