// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Comonad = require("Control.Comonad");
var Control_Comonad_Trans = require("Control.Comonad.Trans");
var Data_Tuple = require("Data.Tuple");
var EnvT = function (x) {
    return x;
};
var withEnvT = function (f) {
    return function (_205) {
        return EnvT(new Data_Tuple.Tuple(f(_205.value0), _205.value1));
    };
};
var runEnvT = function (_204) {
    return _204;
};
var mapEnvT = function (f) {
    return function (_206) {
        return EnvT(new Data_Tuple.Tuple(_206.value0, f(_206.value1)));
    };
};
var functorEnvT = function (__dict_Functor_0) {
    return new Prelude.Functor(function (f) {
        return function (_207) {
            return EnvT(new Data_Tuple.Tuple(_207.value0, Prelude["<$>"](__dict_Functor_0)(f)(_207.value1)));
        };
    });
};
var extendEnvT = function (__dict_Extend_1) {
    return new Control_Extend.Extend(function (f) {
        return function (_208) {
            return EnvT(new Data_Tuple.Tuple(_208.value0, Prelude["<$>"](__dict_Extend_1["__superclass_Prelude.Functor_0"]())(f)(Control_Extend["<<="](__dict_Extend_1)(Prelude[">>>"](Prelude.semigroupoidArr)(Data_Tuple.Tuple.create(_208.value0))(EnvT))(_208.value1))));
        };
    }, function () {
        return functorEnvT(__dict_Extend_1["__superclass_Prelude.Functor_0"]());
    });
};
var comonadTransEnvT = new Control_Comonad_Trans.ComonadTrans(function (__dict_Comonad_2) {
    return function (_210) {
        return _210.value1;
    };
});
var comonadEnvT = function (__dict_Comonad_3) {
    return new Control_Comonad.Comonad(function () {
        return extendEnvT(__dict_Comonad_3["__superclass_Control.Extend.Extend_0"]());
    }, function (_209) {
        return Control_Comonad.extract(__dict_Comonad_3)(_209.value1);
    });
};
module.exports = {
    EnvT: EnvT, 
    mapEnvT: mapEnvT, 
    withEnvT: withEnvT, 
    runEnvT: runEnvT, 
    functorEnvT: functorEnvT, 
    extendEnvT: extendEnvT, 
    comonadEnvT: comonadEnvT, 
    comonadTransEnvT: comonadTransEnvT
};
