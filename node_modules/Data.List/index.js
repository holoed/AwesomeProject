// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Data_Unfoldable = require("Data.Unfoldable");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var $bang = function (__copy__532) {
    return function (__copy__533) {
        var _532 = __copy__532;
        var _533 = __copy__533;
        tco: while (true) {
            if (_532 instanceof Nil) {
                return Data_Maybe.Nothing.value;
            };
            if (_532 instanceof Cons && _533 === 0) {
                return new Data_Maybe.Just(_532.value0);
            };
            if (_532 instanceof Cons) {
                var __tco__532 = _532.value1;
                var __tco__533 = _533 - 1;
                _532 = __tco__532;
                _533 = __tco__533;
                continue tco;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var zipWith = function (f) {
    return function (_546) {
        return function (_547) {
            if (_546 instanceof Nil) {
                return Nil.value;
            };
            if (_547 instanceof Nil) {
                return Nil.value;
            };
            if (_546 instanceof Cons && _547 instanceof Cons) {
                return new Cons(f(_546.value0)(_547.value0), zipWith(f)(_546.value1)(_547.value1));
            };
            throw new Error("Failed pattern match");
        };
    };
};
var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
    return function (b) {
        var go = function (_572) {
            if (_572 instanceof Data_Maybe.Nothing) {
                return Nil.value;
            };
            if (_572 instanceof Data_Maybe.Just) {
                return new Cons(_572.value0.value0, go(f(_572.value0.value1)));
            };
            throw new Error("Failed pattern match");
        };
        return go(f(b));
    };
});
var uncons = function (_543) {
    if (_543 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_543 instanceof Cons) {
        return Data_Maybe.Just.create(new Data_Tuple.Tuple(_543.value0, _543.value1));
    };
    throw new Error("Failed pattern match");
};
var toArray = (function () {
    var step = function (_577) {
        if (_577 instanceof Nil) {
            return Data_Maybe.Nothing.value;
        };
        if (_577 instanceof Cons) {
            return new Data_Maybe.Just(new Data_Tuple.Tuple(_577.value0, _577.value1));
        };
        throw new Error("Failed pattern match");
    };
    return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(step);
})();
var take = function (_536) {
    return function (_537) {
        if (_536 === 0) {
            return Nil.value;
        };
        if (_537 instanceof Nil) {
            return Nil.value;
        };
        if (_537 instanceof Cons) {
            return new Cons(_537.value0, take(_536 - 1)(_537.value1));
        };
        throw new Error("Failed pattern match");
    };
};
var tail = function (_542) {
    if (_542 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_542 instanceof Cons) {
        return new Data_Maybe.Just(_542.value1);
    };
    throw new Error("Failed pattern match");
};
var span = function (p) {
    return function (_549) {
        if (_549 instanceof Cons) {
            if (p(_549.value0)) {
                var _2661 = span(p)(_549.value1);
                return new Data_Tuple.Tuple(new Cons(_549.value0, _2661.value0), _2661.value1);
            };
            if (Prelude.otherwise) {
                return new Data_Tuple.Tuple(Nil.value, _549);
            };
        };
        throw new Error("Failed pattern match");
    };
};
var singleton = function (a) {
    return new Cons(a, Nil.value);
};
var showList = function (__dict_Show_2) {
    return new Prelude.Show(function (_562) {
        if (_562 instanceof Nil) {
            return "Nil";
        };
        if (_562 instanceof Cons) {
            return "Cons (" + (Prelude.show(__dict_Show_2)(_562.value0) + (") (" + (Prelude.show(showList(__dict_Show_2))(_562.value1) + ")")));
        };
        throw new Error("Failed pattern match");
    });
};
var semigroupList = new Prelude.Semigroup(function (_567) {
    return function (ys) {
        if (_567 instanceof Nil) {
            return ys;
        };
        if (_567 instanceof Cons) {
            return new Cons(_567.value0, Prelude["<>"](semigroupList)(_567.value1)(ys));
        };
        throw new Error("Failed pattern match");
    };
});
var reverse = (function () {
    var go = function (__copy_acc) {
        return function (__copy__578) {
            var acc = __copy_acc;
            var _578 = __copy__578;
            tco: while (true) {
                if (_578 instanceof Nil) {
                    return acc;
                };
                if (_578 instanceof Cons) {
                    var __tco_acc = new Cons(_578.value0, acc);
                    var __tco__578 = _578.value1;
                    acc = __tco_acc;
                    _578 = __tco__578;
                    continue tco;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    return go(Nil.value);
})();
var $$null = function (_548) {
    if (_548 instanceof Nil) {
        return true;
    };
    return false;
};
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, Nil.value);
var mapMaybe = function (f) {
    return function (_540) {
        if (_540 instanceof Nil) {
            return Nil.value;
        };
        if (_540 instanceof Cons) {
            var _2680 = f(_540.value0);
            if (_2680 instanceof Data_Maybe.Nothing) {
                return mapMaybe(f)(_540.value1);
            };
            if (_2680 instanceof Data_Maybe.Just) {
                return new Cons(_2680.value0, mapMaybe(f)(_540.value1));
            };
            throw new Error("Failed pattern match");
        };
        throw new Error("Failed pattern match");
    };
};
var length = function (_538) {
    if (_538 instanceof Nil) {
        return 0;
    };
    if (_538 instanceof Cons) {
        return 1 + length(_538.value1);
    };
    throw new Error("Failed pattern match");
};
var last = function (__copy__544) {
    var _544 = __copy__544;
    tco: while (true) {
        if (_544 instanceof Cons && _544.value1 instanceof Nil) {
            return new Data_Maybe.Just(_544.value0);
        };
        if (_544 instanceof Cons) {
            var __tco__544 = _544.value1;
            _544 = __tco__544;
            continue tco;
        };
        return Data_Maybe.Nothing.value;
    };
};
var insertBy = function (cmp) {
    return function (x) {
        return function (_551) {
            if (_551 instanceof Nil) {
                return new Cons(x, Nil.value);
            };
            if (_551 instanceof Cons) {
                var _2695 = cmp(x)(_551.value0);
                if (_2695 instanceof Prelude.GT) {
                    return new Cons(_551.value0, insertBy(cmp)(x)(_551.value1));
                };
                return new Cons(x, _551);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var insertAt = function (_552) {
    return function (x) {
        return function (_553) {
            if (_552 === 0) {
                return new Data_Maybe.Just(new Cons(x, _553));
            };
            if (_553 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_553.value0))(insertAt(_552 - 1)(x)(_553.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var insert = function (__dict_Ord_4) {
    return insertBy(Prelude.compare(__dict_Ord_4));
};
var init = function (_545) {
    if (_545 instanceof Cons && _545.value1 instanceof Nil) {
        return new Data_Maybe.Just(Nil.value);
    };
    if (_545 instanceof Cons) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_545.value0))(init(_545.value1));
    };
    return Data_Maybe.Nothing.value;
};
var head = function (_541) {
    if (_541 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_541 instanceof Cons) {
        return new Data_Maybe.Just(_541.value0);
    };
    throw new Error("Failed pattern match");
};
var groupBy = function (eq) {
    return function (_550) {
        if (_550 instanceof Nil) {
            return Nil.value;
        };
        if (_550 instanceof Cons) {
            var _2713 = span(eq(_550.value0))(_550.value1);
            return new Cons(new Cons(_550.value0, _2713.value0), groupBy(eq)(_2713.value1));
        };
        throw new Error("Failed pattern match");
    };
};
var group = function (__dict_Eq_5) {
    return groupBy(Prelude["=="](__dict_Eq_5));
};
var functorList = new Prelude.Functor(function (f) {
    return function (_568) {
        if (_568 instanceof Nil) {
            return Nil.value;
        };
        if (_568 instanceof Cons) {
            return new Cons(f(_568.value0), Prelude["<$>"](functorList)(f)(_568.value1));
        };
        throw new Error("Failed pattern match");
    };
});
var fromArray = Data_Foldable.foldr(Data_Foldable.foldableArray)(Cons.create)(Nil.value);
var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_6) {
    return function (f) {
        return function (_571) {
            if (_571 instanceof Nil) {
                return Data_Monoid.mempty(__dict_Monoid_6);
            };
            if (_571 instanceof Cons) {
                return Prelude["<>"](__dict_Monoid_6["__superclass_Prelude.Semigroup_0"]())(f(_571.value0))(Data_Foldable.foldMap(foldableList)(__dict_Monoid_6)(f)(_571.value1));
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (o) {
    return function (b) {
        return function (_570) {
            if (_570 instanceof Nil) {
                return b;
            };
            if (_570 instanceof Cons) {
                return Data_Foldable.foldl(foldableList)(o)(o(b)(_570.value0))(_570.value1);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (o) {
    return function (b) {
        return function (_569) {
            if (_569 instanceof Nil) {
                return b;
            };
            if (_569 instanceof Cons) {
                return o(_569.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_569.value1));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (__dict_Applicative_1) {
    return function (_574) {
        if (_574 instanceof Nil) {
            return Prelude.pure(__dict_Applicative_1)(Nil.value);
        };
        if (_574 instanceof Cons) {
            return Prelude["<*>"](__dict_Applicative_1["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(_574.value0))(Data_Traversable.sequence(traversableList)(__dict_Applicative_1)(_574.value1));
        };
        throw new Error("Failed pattern match");
    };
}, function (__dict_Applicative_0) {
    return function (f) {
        return function (_573) {
            if (_573 instanceof Nil) {
                return Prelude.pure(__dict_Applicative_0)(Nil.value);
            };
            if (_573 instanceof Cons) {
                return Prelude["<*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(f(_573.value0)))(Data_Traversable.traverse(traversableList)(__dict_Applicative_0)(f)(_573.value1));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var filter = function (p) {
    return function (_539) {
        if (_539 instanceof Nil) {
            return Nil.value;
        };
        if (_539 instanceof Cons && p(_539.value0)) {
            return new Cons(_539.value0, filter(p)(_539.value1));
        };
        if (_539 instanceof Cons) {
            return filter(p)(_539.value1);
        };
        throw new Error("Failed pattern match");
    };
};
var intersectBy = function (eq) {
    return function (_560) {
        return function (_561) {
            if (_560 instanceof Nil) {
                return Nil.value;
            };
            if (_561 instanceof Nil) {
                return Nil.value;
            };
            return filter(function (x) {
                return Data_Foldable.any(foldableList)(eq(x))(_561);
            })(_560);
        };
    };
};
var intersect = function (__dict_Eq_7) {
    return intersectBy(Prelude["=="](__dict_Eq_7));
};
var nubBy = function ($eq$eq) {
    return function (_559) {
        if (_559 instanceof Nil) {
            return Nil.value;
        };
        if (_559 instanceof Cons) {
            return new Cons(_559.value0, nubBy($eq$eq)(filter(function (y) {
                return !$eq$eq(_559.value0)(y);
            })(_559.value1)));
        };
        throw new Error("Failed pattern match");
    };
};
var nub = function (__dict_Eq_8) {
    return nubBy(Prelude["=="](__dict_Eq_8));
};
var eqList = function (__dict_Eq_9) {
    return new Prelude.Eq(function (xs) {
        return function (ys) {
            return !Prelude["=="](eqList(__dict_Eq_9))(xs)(ys);
        };
    }, function (_563) {
        return function (_564) {
            if (_563 instanceof Nil && _564 instanceof Nil) {
                return true;
            };
            if (_563 instanceof Cons && _564 instanceof Cons) {
                return Prelude["=="](__dict_Eq_9)(_563.value0)(_564.value0) && Prelude["=="](eqList(__dict_Eq_9))(_563.value1)(_564.value1);
            };
            return false;
        };
    });
};
var ordList = function (__dict_Ord_3) {
    return new Prelude.Ord(function () {
        return eqList(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
    }, function (_565) {
        return function (_566) {
            if (_565 instanceof Nil && _566 instanceof Nil) {
                return Prelude.EQ.value;
            };
            if (_565 instanceof Nil) {
                return Prelude.LT.value;
            };
            if (_566 instanceof Nil) {
                return Prelude.GT.value;
            };
            if (_565 instanceof Cons && _566 instanceof Cons) {
                var _2764 = Prelude.compare(__dict_Ord_3)(_565.value0)(_566.value0);
                if (_2764 instanceof Prelude.EQ) {
                    return Prelude.compare(ordList(__dict_Ord_3))(_565.value1)(_566.value1);
                };
                return _2764;
            };
            throw new Error("Failed pattern match");
        };
    });
};
var drop = function (__copy__534) {
    return function (__copy__535) {
        var _534 = __copy__534;
        var _535 = __copy__535;
        tco: while (true) {
            if (_534 === 0) {
                return _535;
            };
            if (_535 instanceof Nil) {
                return Nil.value;
            };
            if (_535 instanceof Cons) {
                var __tco__534 = _534 - 1;
                var __tco__535 = _535.value1;
                _534 = __tco__534;
                _535 = __tco__535;
                continue tco;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var deleteBy = function ($eq$eq) {
    return function (x) {
        return function (_554) {
            if (_554 instanceof Nil) {
                return Nil.value;
            };
            if (_554 instanceof Cons && $eq$eq(x)(_554.value0)) {
                return _554.value1;
            };
            if (_554 instanceof Cons) {
                return new Cons(_554.value0, deleteBy($eq$eq)(x)(_554.value1));
            };
            throw new Error("Failed pattern match");
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (__dict_Eq_10) {
    return unionBy(Prelude["=="](__dict_Eq_10));
};
var deleteAt = function (_555) {
    return function (_556) {
        if (_555 === 0 && _556 instanceof Cons) {
            return new Data_Maybe.Just(_556.value1);
        };
        if (_556 instanceof Cons) {
            return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_556.value0))(deleteAt(_555 - 1)(_556.value1));
        };
        return Data_Maybe.Nothing.value;
    };
};
var $$delete = function (__dict_Eq_11) {
    return deleteBy(Prelude["=="](__dict_Eq_11));
};
var $bslash$bslash = function (__dict_Eq_12) {
    return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(__dict_Eq_12)));
};
var catMaybes = mapMaybe(Prelude.id(Prelude.categoryArr));
var applyList = new Prelude.Apply(function (_575) {
    return function (xs) {
        if (_575 instanceof Nil) {
            return Nil.value;
        };
        if (_575 instanceof Cons) {
            return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(_575.value0)(xs))(Prelude["<*>"](applyList)(_575.value1)(xs));
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorList;
});
var bindList = new Prelude.Bind(function (_576) {
    return function (f) {
        if (_576 instanceof Nil) {
            return Nil.value;
        };
        if (_576 instanceof Cons) {
            return Prelude["<>"](semigroupList)(f(_576.value0))(Prelude[">>="](bindList)(_576.value1)(f));
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyList;
});
var applicativeList = new Prelude.Applicative(function () {
    return applyList;
}, function (a) {
    return new Cons(a, Nil.value);
});
var monadList = new Prelude.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var alterAt = function (_557) {
    return function (f) {
        return function (_558) {
            if (_557 === 0 && _558 instanceof Cons) {
                return Data_Maybe.Just.create((function () {
                    var _2797 = f(_558.value0);
                    if (_2797 instanceof Data_Maybe.Nothing) {
                        return _558.value1;
                    };
                    if (_2797 instanceof Data_Maybe.Just) {
                        return new Cons(_2797.value0, _558.value1);
                    };
                    throw new Error("Failed pattern match");
                })());
            };
            if (_558 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_558.value0))(alterAt(_557 - 1)(f)(_558.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var altList = new Control_Alt.Alt(Prelude["<>"](semigroupList), function () {
    return functorList;
});
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, Nil.value);
var alternativeList = new Control_Alternative.Alternative(function () {
    return plusList;
}, function () {
    return applicativeList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return alternativeList;
}, function () {
    return monadList;
});
module.exports = {
    Nil: Nil, 
    Cons: Cons, 
    unionBy: unionBy, 
    union: union, 
    uncons: uncons, 
    intersectBy: intersectBy, 
    intersect: intersect, 
    nubBy: nubBy, 
    nub: nub, 
    reverse: reverse, 
    alterAt: alterAt, 
    deleteAt: deleteAt, 
    deleteBy: deleteBy, 
    "delete": $$delete, 
    insertAt: insertAt, 
    insertBy: insertBy, 
    insert: insert, 
    "\\\\": $bslash$bslash, 
    groupBy: groupBy, 
    group: group, 
    span: span, 
    "null": $$null, 
    zipWith: zipWith, 
    init: init, 
    last: last, 
    tail: tail, 
    head: head, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    filter: filter, 
    length: length, 
    take: take, 
    drop: drop, 
    "!": $bang, 
    toArray: toArray, 
    fromArray: fromArray, 
    showList: showList, 
    eqList: eqList, 
    ordList: ordList, 
    semigroupList: semigroupList, 
    monoidList: monoidList, 
    functorList: functorList, 
    foldableList: foldableList, 
    unfoldableList: unfoldableList, 
    traversableList: traversableList, 
    applyList: applyList, 
    applicativeList: applicativeList, 
    bindList: bindList, 
    monadList: monadList, 
    altList: altList, 
    plusList: plusList, 
    alternativeList: alternativeList, 
    monadPlusList: monadPlusList
};
