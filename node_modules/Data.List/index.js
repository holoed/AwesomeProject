// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Data_Unfoldable = require("Data.Unfoldable");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var $bang = function (__copy__552) {
    return function (__copy__553) {
        var _552 = __copy__552;
        var _553 = __copy__553;
        tco: while (true) {
            if (_552 instanceof Nil) {
                return Data_Maybe.Nothing.value;
            };
            if (_552 instanceof Cons && _553 === 0) {
                return new Data_Maybe.Just(_552.value0);
            };
            if (_552 instanceof Cons) {
                var __tco__552 = _552.value1;
                var __tco__553 = _553 - 1;
                _552 = __tco__552;
                _553 = __tco__553;
                continue tco;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var zipWith = function (f) {
    return function (_566) {
        return function (_567) {
            if (_566 instanceof Nil) {
                return Nil.value;
            };
            if (_567 instanceof Nil) {
                return Nil.value;
            };
            if (_566 instanceof Cons && _567 instanceof Cons) {
                return new Cons(f(_566.value0)(_567.value0), zipWith(f)(_566.value1)(_567.value1));
            };
            throw new Error("Failed pattern match");
        };
    };
};
var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
    return function (b) {
        var go = function (_592) {
            if (_592 instanceof Data_Maybe.Nothing) {
                return Nil.value;
            };
            if (_592 instanceof Data_Maybe.Just) {
                return new Cons(_592.value0.value0, go(f(_592.value0.value1)));
            };
            throw new Error("Failed pattern match");
        };
        return go(f(b));
    };
});
var uncons = function (_563) {
    if (_563 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_563 instanceof Cons) {
        return Data_Maybe.Just.create(new Data_Tuple.Tuple(_563.value0, _563.value1));
    };
    throw new Error("Failed pattern match");
};
var toArray = (function () {
    var step = function (_597) {
        if (_597 instanceof Nil) {
            return Data_Maybe.Nothing.value;
        };
        if (_597 instanceof Cons) {
            return new Data_Maybe.Just(new Data_Tuple.Tuple(_597.value0, _597.value1));
        };
        throw new Error("Failed pattern match");
    };
    return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(step);
})();
var take = function (_556) {
    return function (_557) {
        if (_556 === 0) {
            return Nil.value;
        };
        if (_557 instanceof Nil) {
            return Nil.value;
        };
        if (_557 instanceof Cons) {
            return new Cons(_557.value0, take(_556 - 1)(_557.value1));
        };
        throw new Error("Failed pattern match");
    };
};
var tail = function (_562) {
    if (_562 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_562 instanceof Cons) {
        return new Data_Maybe.Just(_562.value1);
    };
    throw new Error("Failed pattern match");
};
var span = function (p) {
    return function (_569) {
        if (_569 instanceof Cons) {
            if (p(_569.value0)) {
                var _2719 = span(p)(_569.value1);
                return new Data_Tuple.Tuple(new Cons(_569.value0, _2719.value0), _2719.value1);
            };
            if (Prelude.otherwise) {
                return new Data_Tuple.Tuple(Nil.value, _569);
            };
        };
        throw new Error("Failed pattern match");
    };
};
var singleton = function (a) {
    return new Cons(a, Nil.value);
};
var showList = function (__dict_Show_2) {
    return new Prelude.Show(function (_582) {
        if (_582 instanceof Nil) {
            return "Nil";
        };
        if (_582 instanceof Cons) {
            return "Cons (" + (Prelude.show(__dict_Show_2)(_582.value0) + (") (" + (Prelude.show(showList(__dict_Show_2))(_582.value1) + ")")));
        };
        throw new Error("Failed pattern match");
    });
};
var semigroupList = new Prelude.Semigroup(function (_587) {
    return function (ys) {
        if (_587 instanceof Nil) {
            return ys;
        };
        if (_587 instanceof Cons) {
            return new Cons(_587.value0, Prelude["<>"](semigroupList)(_587.value1)(ys));
        };
        throw new Error("Failed pattern match");
    };
});
var reverse = (function () {
    var go = function (__copy_acc) {
        return function (__copy__598) {
            var acc = __copy_acc;
            var _598 = __copy__598;
            tco: while (true) {
                if (_598 instanceof Nil) {
                    return acc;
                };
                if (_598 instanceof Cons) {
                    var __tco_acc = new Cons(_598.value0, acc);
                    var __tco__598 = _598.value1;
                    acc = __tco_acc;
                    _598 = __tco__598;
                    continue tco;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    return go(Nil.value);
})();
var $$null = function (_568) {
    if (_568 instanceof Nil) {
        return true;
    };
    return false;
};
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, Nil.value);
var mapMaybe = function (f) {
    return function (_560) {
        if (_560 instanceof Nil) {
            return Nil.value;
        };
        if (_560 instanceof Cons) {
            var _2738 = f(_560.value0);
            if (_2738 instanceof Data_Maybe.Nothing) {
                return mapMaybe(f)(_560.value1);
            };
            if (_2738 instanceof Data_Maybe.Just) {
                return new Cons(_2738.value0, mapMaybe(f)(_560.value1));
            };
            throw new Error("Failed pattern match");
        };
        throw new Error("Failed pattern match");
    };
};
var length = function (_558) {
    if (_558 instanceof Nil) {
        return 0;
    };
    if (_558 instanceof Cons) {
        return 1 + length(_558.value1);
    };
    throw new Error("Failed pattern match");
};
var last = function (__copy__564) {
    var _564 = __copy__564;
    tco: while (true) {
        if (_564 instanceof Cons && _564.value1 instanceof Nil) {
            return new Data_Maybe.Just(_564.value0);
        };
        if (_564 instanceof Cons) {
            var __tco__564 = _564.value1;
            _564 = __tco__564;
            continue tco;
        };
        return Data_Maybe.Nothing.value;
    };
};
var insertBy = function (cmp) {
    return function (x) {
        return function (_571) {
            if (_571 instanceof Nil) {
                return new Cons(x, Nil.value);
            };
            if (_571 instanceof Cons) {
                var _2753 = cmp(x)(_571.value0);
                if (_2753 instanceof Prelude.GT) {
                    return new Cons(_571.value0, insertBy(cmp)(x)(_571.value1));
                };
                return new Cons(x, _571);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var insertAt = function (_572) {
    return function (x) {
        return function (_573) {
            if (_572 === 0) {
                return new Data_Maybe.Just(new Cons(x, _573));
            };
            if (_573 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_573.value0))(insertAt(_572 - 1)(x)(_573.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var insert = function (__dict_Ord_4) {
    return insertBy(Prelude.compare(__dict_Ord_4));
};
var init = function (_565) {
    if (_565 instanceof Cons && _565.value1 instanceof Nil) {
        return new Data_Maybe.Just(Nil.value);
    };
    if (_565 instanceof Cons) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_565.value0))(init(_565.value1));
    };
    return Data_Maybe.Nothing.value;
};
var head = function (_561) {
    if (_561 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_561 instanceof Cons) {
        return new Data_Maybe.Just(_561.value0);
    };
    throw new Error("Failed pattern match");
};
var groupBy = function (eq) {
    return function (_570) {
        if (_570 instanceof Nil) {
            return Nil.value;
        };
        if (_570 instanceof Cons) {
            var _2771 = span(eq(_570.value0))(_570.value1);
            return new Cons(new Cons(_570.value0, _2771.value0), groupBy(eq)(_2771.value1));
        };
        throw new Error("Failed pattern match");
    };
};
var group = function (__dict_Eq_5) {
    return groupBy(Prelude["=="](__dict_Eq_5));
};
var functorList = new Prelude.Functor(function (f) {
    return function (_588) {
        if (_588 instanceof Nil) {
            return Nil.value;
        };
        if (_588 instanceof Cons) {
            return new Cons(f(_588.value0), Prelude["<$>"](functorList)(f)(_588.value1));
        };
        throw new Error("Failed pattern match");
    };
});
var fromArray = Data_Foldable.foldr(Data_Foldable.foldableArray)(Cons.create)(Nil.value);
var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_6) {
    return function (f) {
        return function (_591) {
            if (_591 instanceof Nil) {
                return Data_Monoid.mempty(__dict_Monoid_6);
            };
            if (_591 instanceof Cons) {
                return Prelude["<>"](__dict_Monoid_6["__superclass_Prelude.Semigroup_0"]())(f(_591.value0))(Data_Foldable.foldMap(foldableList)(__dict_Monoid_6)(f)(_591.value1));
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (o) {
    return function (b) {
        return function (_590) {
            if (_590 instanceof Nil) {
                return b;
            };
            if (_590 instanceof Cons) {
                return Data_Foldable.foldl(foldableList)(o)(o(b)(_590.value0))(_590.value1);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (o) {
    return function (b) {
        return function (_589) {
            if (_589 instanceof Nil) {
                return b;
            };
            if (_589 instanceof Cons) {
                return o(_589.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_589.value1));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (__dict_Applicative_1) {
    return function (_594) {
        if (_594 instanceof Nil) {
            return Prelude.pure(__dict_Applicative_1)(Nil.value);
        };
        if (_594 instanceof Cons) {
            return Prelude["<*>"](__dict_Applicative_1["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(_594.value0))(Data_Traversable.sequence(traversableList)(__dict_Applicative_1)(_594.value1));
        };
        throw new Error("Failed pattern match");
    };
}, function (__dict_Applicative_0) {
    return function (f) {
        return function (_593) {
            if (_593 instanceof Nil) {
                return Prelude.pure(__dict_Applicative_0)(Nil.value);
            };
            if (_593 instanceof Cons) {
                return Prelude["<*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(f(_593.value0)))(Data_Traversable.traverse(traversableList)(__dict_Applicative_0)(f)(_593.value1));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var filter = function (p) {
    return function (_559) {
        if (_559 instanceof Nil) {
            return Nil.value;
        };
        if (_559 instanceof Cons && p(_559.value0)) {
            return new Cons(_559.value0, filter(p)(_559.value1));
        };
        if (_559 instanceof Cons) {
            return filter(p)(_559.value1);
        };
        throw new Error("Failed pattern match");
    };
};
var intersectBy = function (eq) {
    return function (_580) {
        return function (_581) {
            if (_580 instanceof Nil) {
                return Nil.value;
            };
            if (_581 instanceof Nil) {
                return Nil.value;
            };
            return filter(function (x) {
                return Data_Foldable.any(foldableList)(eq(x))(_581);
            })(_580);
        };
    };
};
var intersect = function (__dict_Eq_7) {
    return intersectBy(Prelude["=="](__dict_Eq_7));
};
var nubBy = function ($eq$eq) {
    return function (_579) {
        if (_579 instanceof Nil) {
            return Nil.value;
        };
        if (_579 instanceof Cons) {
            return new Cons(_579.value0, nubBy($eq$eq)(filter(function (y) {
                return !$eq$eq(_579.value0)(y);
            })(_579.value1)));
        };
        throw new Error("Failed pattern match");
    };
};
var nub = function (__dict_Eq_8) {
    return nubBy(Prelude["=="](__dict_Eq_8));
};
var eqList = function (__dict_Eq_9) {
    return new Prelude.Eq(function (xs) {
        return function (ys) {
            return !Prelude["=="](eqList(__dict_Eq_9))(xs)(ys);
        };
    }, function (_583) {
        return function (_584) {
            if (_583 instanceof Nil && _584 instanceof Nil) {
                return true;
            };
            if (_583 instanceof Cons && _584 instanceof Cons) {
                return Prelude["=="](__dict_Eq_9)(_583.value0)(_584.value0) && Prelude["=="](eqList(__dict_Eq_9))(_583.value1)(_584.value1);
            };
            return false;
        };
    });
};
var ordList = function (__dict_Ord_3) {
    return new Prelude.Ord(function () {
        return eqList(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
    }, function (_585) {
        return function (_586) {
            if (_585 instanceof Nil && _586 instanceof Nil) {
                return Prelude.EQ.value;
            };
            if (_585 instanceof Nil) {
                return Prelude.LT.value;
            };
            if (_586 instanceof Nil) {
                return Prelude.GT.value;
            };
            if (_585 instanceof Cons && _586 instanceof Cons) {
                var _2822 = Prelude.compare(__dict_Ord_3)(_585.value0)(_586.value0);
                if (_2822 instanceof Prelude.EQ) {
                    return Prelude.compare(ordList(__dict_Ord_3))(_585.value1)(_586.value1);
                };
                return _2822;
            };
            throw new Error("Failed pattern match");
        };
    });
};
var drop = function (__copy__554) {
    return function (__copy__555) {
        var _554 = __copy__554;
        var _555 = __copy__555;
        tco: while (true) {
            if (_554 === 0) {
                return _555;
            };
            if (_555 instanceof Nil) {
                return Nil.value;
            };
            if (_555 instanceof Cons) {
                var __tco__554 = _554 - 1;
                var __tco__555 = _555.value1;
                _554 = __tco__554;
                _555 = __tco__555;
                continue tco;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var deleteBy = function ($eq$eq) {
    return function (x) {
        return function (_574) {
            if (_574 instanceof Nil) {
                return Nil.value;
            };
            if (_574 instanceof Cons && $eq$eq(x)(_574.value0)) {
                return _574.value1;
            };
            if (_574 instanceof Cons) {
                return new Cons(_574.value0, deleteBy($eq$eq)(x)(_574.value1));
            };
            throw new Error("Failed pattern match");
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (__dict_Eq_10) {
    return unionBy(Prelude["=="](__dict_Eq_10));
};
var deleteAt = function (_575) {
    return function (_576) {
        if (_575 === 0 && _576 instanceof Cons) {
            return new Data_Maybe.Just(_576.value1);
        };
        if (_576 instanceof Cons) {
            return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_576.value0))(deleteAt(_575 - 1)(_576.value1));
        };
        return Data_Maybe.Nothing.value;
    };
};
var $$delete = function (__dict_Eq_11) {
    return deleteBy(Prelude["=="](__dict_Eq_11));
};
var $bslash$bslash = function (__dict_Eq_12) {
    return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(__dict_Eq_12)));
};
var catMaybes = mapMaybe(Prelude.id(Prelude.categoryArr));
var applyList = new Prelude.Apply(function (_595) {
    return function (xs) {
        if (_595 instanceof Nil) {
            return Nil.value;
        };
        if (_595 instanceof Cons) {
            return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(_595.value0)(xs))(Prelude["<*>"](applyList)(_595.value1)(xs));
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorList;
});
var bindList = new Prelude.Bind(function (_596) {
    return function (f) {
        if (_596 instanceof Nil) {
            return Nil.value;
        };
        if (_596 instanceof Cons) {
            return Prelude["<>"](semigroupList)(f(_596.value0))(Prelude[">>="](bindList)(_596.value1)(f));
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyList;
});
var applicativeList = new Prelude.Applicative(function () {
    return applyList;
}, function (a) {
    return new Cons(a, Nil.value);
});
var monadList = new Prelude.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var alterAt = function (_577) {
    return function (f) {
        return function (_578) {
            if (_577 === 0 && _578 instanceof Cons) {
                return Data_Maybe.Just.create((function () {
                    var _2855 = f(_578.value0);
                    if (_2855 instanceof Data_Maybe.Nothing) {
                        return _578.value1;
                    };
                    if (_2855 instanceof Data_Maybe.Just) {
                        return new Cons(_2855.value0, _578.value1);
                    };
                    throw new Error("Failed pattern match");
                })());
            };
            if (_578 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_578.value0))(alterAt(_577 - 1)(f)(_578.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var altList = new Control_Alt.Alt(Prelude["<>"](semigroupList), function () {
    return functorList;
});
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, Nil.value);
var alternativeList = new Control_Alternative.Alternative(function () {
    return plusList;
}, function () {
    return applicativeList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return alternativeList;
}, function () {
    return monadList;
});
module.exports = {
    Nil: Nil, 
    Cons: Cons, 
    unionBy: unionBy, 
    union: union, 
    uncons: uncons, 
    intersectBy: intersectBy, 
    intersect: intersect, 
    nubBy: nubBy, 
    nub: nub, 
    reverse: reverse, 
    alterAt: alterAt, 
    deleteAt: deleteAt, 
    deleteBy: deleteBy, 
    "delete": $$delete, 
    insertAt: insertAt, 
    insertBy: insertBy, 
    insert: insert, 
    "\\\\": $bslash$bslash, 
    groupBy: groupBy, 
    group: group, 
    span: span, 
    "null": $$null, 
    zipWith: zipWith, 
    init: init, 
    last: last, 
    tail: tail, 
    head: head, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    filter: filter, 
    length: length, 
    take: take, 
    drop: drop, 
    "!": $bang, 
    toArray: toArray, 
    fromArray: fromArray, 
    showList: showList, 
    eqList: eqList, 
    ordList: ordList, 
    semigroupList: semigroupList, 
    monoidList: monoidList, 
    functorList: functorList, 
    foldableList: foldableList, 
    unfoldableList: unfoldableList, 
    traversableList: traversableList, 
    applyList: applyList, 
    applicativeList: applicativeList, 
    bindList: bindList, 
    monadList: monadList, 
    altList: altList, 
    plusList: plusList, 
    alternativeList: alternativeList, 
    monadPlusList: monadPlusList
};
