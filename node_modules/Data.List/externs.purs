-- Generated by psc-make version 0.6.9.5
module Data.List where
import Prelude ()
import Data.Foldable ()
import Data.Monoid ()
import Data.Traversable ()
import Data.Unfoldable ()
import Data.List ()
import Prim ()
import Prelude ()
import Data.Maybe ()
import Data.Tuple ()
import Data.Monoid ()
import Data.Foldable ()
import Data.Unfoldable ()
import Data.Traversable ()
import Control.Alt ()
import Control.Plus ()
import Control.Alternative ()
import Control.MonadPlus ()
infix 4 !
infix 5 \\
data List (a :: *) = Nil  | Cons a (Data.List.List a)
foreign import unionBy :: forall a. (a -> a -> Prim.Boolean) -> Data.List.List a -> Data.List.List a -> Data.List.List a
foreign import union :: forall a. (Prelude.Eq a) => Data.List.List a -> Data.List.List a -> Data.List.List a
foreign import uncons :: forall a. Data.List.List a -> Data.Maybe.Maybe (Data.Tuple.Tuple a (Data.List.List a))
foreign import intersectBy :: forall a. (a -> a -> Prim.Boolean) -> Data.List.List a -> Data.List.List a -> Data.List.List a
foreign import intersect :: forall a. (Prelude.Eq a) => Data.List.List a -> Data.List.List a -> Data.List.List a
foreign import nubBy :: forall a. (a -> a -> Prim.Boolean) -> Data.List.List a -> Data.List.List a
foreign import nub :: forall a. (Prelude.Eq a) => Data.List.List a -> Data.List.List a
foreign import reverse :: forall a. Data.List.List a -> Data.List.List a
foreign import alterAt :: forall a. Prim.Number -> (a -> Data.Maybe.Maybe a) -> Data.List.List a -> Data.Maybe.Maybe (Data.List.List a)
foreign import deleteAt :: forall a. Prim.Number -> Data.List.List a -> Data.Maybe.Maybe (Data.List.List a)
foreign import deleteBy :: forall a. (a -> a -> Prim.Boolean) -> a -> Data.List.List a -> Data.List.List a
foreign import delete :: forall a. (Prelude.Eq a) => a -> Data.List.List a -> Data.List.List a
foreign import insertAt :: forall a. Prim.Number -> a -> Data.List.List a -> Data.Maybe.Maybe (Data.List.List a)
foreign import insertBy :: forall a. (a -> a -> Prelude.Ordering) -> a -> Data.List.List a -> Data.List.List a
foreign import insert :: forall a. (Prelude.Ord a) => a -> Data.List.List a -> Data.List.List a
foreign import (\\) :: forall a. (Prelude.Eq a) => Data.List.List a -> Data.List.List a -> Data.List.List a
foreign import groupBy :: forall a. (a -> a -> Prim.Boolean) -> Data.List.List a -> Data.List.List (Data.List.List a)
foreign import group :: forall a. (Prelude.Eq a) => Data.List.List a -> Data.List.List (Data.List.List a)
foreign import span :: forall a. (a -> Prim.Boolean) -> Data.List.List a -> Data.Tuple.Tuple (Data.List.List a) (Data.List.List a)
foreign import null :: forall a. Data.List.List a -> Prim.Boolean
foreign import zipWith :: forall a b c. (a -> b -> c) -> Data.List.List a -> Data.List.List b -> Data.List.List c
foreign import init :: forall a. Data.List.List a -> Data.Maybe.Maybe (Data.List.List a)
foreign import last :: forall a. Data.List.List a -> Data.Maybe.Maybe a
foreign import tail :: forall a. Data.List.List a -> Data.Maybe.Maybe (Data.List.List a)
foreign import head :: forall a. Data.List.List a -> Data.Maybe.Maybe a
foreign import catMaybes :: forall a. Data.List.List (Data.Maybe.Maybe a) -> Data.List.List a
foreign import mapMaybe :: forall a b. (a -> Data.Maybe.Maybe b) -> Data.List.List a -> Data.List.List b
foreign import filter :: forall a. (a -> Prim.Boolean) -> Data.List.List a -> Data.List.List a
foreign import length :: forall a. Data.List.List a -> Prim.Number
foreign import take :: forall a. Prim.Number -> Data.List.List a -> Data.List.List a
foreign import drop :: forall a. Prim.Number -> Data.List.List a -> Data.List.List a
foreign import (!) :: forall a. Data.List.List a -> Prim.Number -> Data.Maybe.Maybe a
foreign import toArray :: forall a. Data.List.List a -> [a]
foreign import fromArray :: forall a. [a] -> Data.List.List a
foreign import instance showList :: (Prelude.Show a) => Prelude.Show (Data.List.List a)
foreign import instance eqList :: (Prelude.Eq a) => Prelude.Eq (Data.List.List a)
foreign import instance ordList :: (Prelude.Ord a) => Prelude.Ord (Data.List.List a)
foreign import instance semigroupList :: Prelude.Semigroup (Data.List.List a)
foreign import instance monoidList :: Data.Monoid.Monoid (Data.List.List a)
foreign import instance functorList :: Prelude.Functor Data.List.List
foreign import instance foldableList :: Data.Foldable.Foldable Data.List.List
foreign import instance unfoldableList :: Data.Unfoldable.Unfoldable Data.List.List
foreign import instance traversableList :: Data.Traversable.Traversable Data.List.List
foreign import instance applyList :: Prelude.Apply Data.List.List
foreign import instance applicativeList :: Prelude.Applicative Data.List.List
foreign import instance bindList :: Prelude.Bind Data.List.List
foreign import instance monadList :: Prelude.Monad Data.List.List
foreign import instance altList :: Control.Alt.Alt Data.List.List
foreign import instance plusList :: Control.Plus.Plus Data.List.List
foreign import instance alternativeList :: Control.Alternative.Alternative Data.List.List
foreign import instance monadPlusList :: Control.MonadPlus.MonadPlus Data.List.List
