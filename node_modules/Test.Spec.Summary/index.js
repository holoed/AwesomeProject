// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Test_Spec = require("Test.Spec");
var Count = (function () {
    function Count(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Count.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Count(value0, value1, value2);
            };
        };
    };
    return Count;
})();
var semigroupCount = new Prelude.Semigroup(function (_637) {
    return function (_638) {
        return new Count(_637.value0 + _638.value0, _637.value1 + _638.value1, _637.value2 + _638.value2);
    };
});
var summarize = function (_636) {
    if (_636.length === 0) {
        return new Count(0, 0, 0);
    };
    if (_636.length >= 1) {
        var _2993 = _636.slice(1);
        if (_636[0] instanceof Test_Spec.It && (_636[0]).value1 instanceof Test_Spec.Success) {
            return Prelude["<>"](semigroupCount)(new Count(1, 0, 0))(summarize(_2993));
        };
    };
    if (_636.length >= 1) {
        var _2998 = _636.slice(1);
        if (_636[0] instanceof Test_Spec.It && (_636[0]).value1 instanceof Test_Spec.Failure) {
            return Prelude["<>"](semigroupCount)(new Count(0, 1, 0))(summarize(_2998));
        };
    };
    if (_636.length >= 1) {
        var _3001 = _636.slice(1);
        if (_636[0] instanceof Test_Spec.Pending) {
            return Prelude["<>"](semigroupCount)(new Count(0, 0, 1))(summarize(_3001));
        };
    };
    if (_636.length >= 1) {
        var _3005 = _636.slice(1);
        if (_636[0] instanceof Test_Spec.Describe) {
            return Prelude["<>"](semigroupCount)(summarize((_636[0]).value1))(summarize(_3005));
        };
    };
    throw new Error("Failed pattern match");
};
var successful = function (groups) {
    var _3006 = summarize(groups);
    if (_3006.value1 === 0) {
        return true;
    };
    return false;
};
module.exports = {
    Count: Count, 
    successful: successful, 
    summarize: summarize, 
    semigroupCount: semigroupCount
};
