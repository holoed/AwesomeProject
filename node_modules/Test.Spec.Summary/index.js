// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Test_Spec = require("Test.Spec");
var Count = (function () {
    function Count(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Count.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Count(value0, value1, value2);
            };
        };
    };
    return Count;
})();
var semigroupCount = new Prelude.Semigroup(function (_628) {
    return function (_629) {
        return new Count(_628.value0 + _629.value0, _628.value1 + _629.value1, _628.value2 + _629.value2);
    };
});
var summarize = function (_627) {
    if (_627.length === 0) {
        return new Count(0, 0, 0);
    };
    if (_627.length >= 1) {
        var _2984 = _627.slice(1);
        if (_627[0] instanceof Test_Spec.It && (_627[0]).value1 instanceof Test_Spec.Success) {
            return Prelude["<>"](semigroupCount)(new Count(1, 0, 0))(summarize(_2984));
        };
    };
    if (_627.length >= 1) {
        var _2989 = _627.slice(1);
        if (_627[0] instanceof Test_Spec.It && (_627[0]).value1 instanceof Test_Spec.Failure) {
            return Prelude["<>"](semigroupCount)(new Count(0, 1, 0))(summarize(_2989));
        };
    };
    if (_627.length >= 1) {
        var _2992 = _627.slice(1);
        if (_627[0] instanceof Test_Spec.Pending) {
            return Prelude["<>"](semigroupCount)(new Count(0, 0, 1))(summarize(_2992));
        };
    };
    if (_627.length >= 1) {
        var _2996 = _627.slice(1);
        if (_627[0] instanceof Test_Spec.Describe) {
            return Prelude["<>"](semigroupCount)(summarize((_627[0]).value1))(summarize(_2996));
        };
    };
    throw new Error("Failed pattern match");
};
var successful = function (groups) {
    var _2997 = summarize(groups);
    if (_2997.value1 === 0) {
        return true;
    };
    return false;
};
module.exports = {
    Count: Count, 
    successful: successful, 
    summarize: summarize, 
    semigroupCount: semigroupCount
};
