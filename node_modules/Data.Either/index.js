// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Extend = require("Control.Extend");
var Left = (function () {
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    return Left;
})();
var Right = (function () {
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    return Right;
})();
var showEither = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_126) {
            if (_126 instanceof Left) {
                return "Left (" + (Prelude.show(__dict_Show_0)(_126.value0) + ")");
            };
            if (_126 instanceof Right) {
                return "Right (" + (Prelude.show(__dict_Show_1)(_126.value0) + ")");
            };
            throw new Error("Failed pattern match");
        });
    };
};
var functorEither = new Prelude.Functor(function (f) {
    return function (_122) {
        if (_122 instanceof Left) {
            return new Left(_122.value0);
        };
        if (_122 instanceof Right) {
            return new Right(f(_122.value0));
        };
        throw new Error("Failed pattern match");
    };
});
var extendEither = new Control_Extend.Extend(function (f) {
    return function (_125) {
        if (_125 instanceof Left) {
            return new Left(_125.value0);
        };
        return new Right(f(_125));
    };
}, function () {
    return functorEither;
});
var eqEither = function (__dict_Eq_4) {
    return function (__dict_Eq_5) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqEither(__dict_Eq_4)(__dict_Eq_5))(a)(b);
            };
        }, function (_127) {
            return function (_128) {
                if (_127 instanceof Left && _128 instanceof Left) {
                    return Prelude["=="](__dict_Eq_4)(_127.value0)(_128.value0);
                };
                if (_127 instanceof Right && _128 instanceof Right) {
                    return Prelude["=="](__dict_Eq_5)(_127.value0)(_128.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (__dict_Ord_2) {
    return function (__dict_Ord_3) {
        return new Prelude.Ord(function () {
            return eqEither(__dict_Ord_2["__superclass_Prelude.Eq_0"]())(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
        }, function (_129) {
            return function (_130) {
                if (_129 instanceof Left && _130 instanceof Left) {
                    return Prelude.compare(__dict_Ord_2)(_129.value0)(_130.value0);
                };
                if (_129 instanceof Right && _130 instanceof Right) {
                    return Prelude.compare(__dict_Ord_3)(_129.value0)(_130.value0);
                };
                if (_129 instanceof Left) {
                    return Prelude.LT.value;
                };
                if (_130 instanceof Left) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
};
var either = function (f) {
    return function (g) {
        return function (_121) {
            if (_121 instanceof Left) {
                return f(_121.value0);
            };
            if (_121 instanceof Right) {
                return g(_121.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
var isRight = either(Prelude["const"](false))(Prelude["const"](true));
var applyEither = new Prelude.Apply(function (_123) {
    return function (r) {
        if (_123 instanceof Left) {
            return new Left(_123.value0);
        };
        if (_123 instanceof Right) {
            return Prelude["<$>"](functorEither)(_123.value0)(r);
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorEither;
});
var bindEither = new Prelude.Bind(either(function (e) {
    return function (_120) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}), function () {
    return applyEither;
});
var applicativeEither = new Prelude.Applicative(function () {
    return applyEither;
}, Right.create);
var monadEither = new Prelude.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function (_124) {
    return function (r) {
        if (_124 instanceof Left) {
            return r;
        };
        return _124;
    };
}, function () {
    return functorEither;
});
module.exports = {
    Left: Left, 
    Right: Right, 
    isRight: isRight, 
    isLeft: isLeft, 
    either: either, 
    functorEither: functorEither, 
    applyEither: applyEither, 
    applicativeEither: applicativeEither, 
    altEither: altEither, 
    bindEither: bindEither, 
    monadEither: monadEither, 
    extendEither: extendEither, 
    showEither: showEither, 
    eqEither: eqEither, 
    ordEither: ordEither
};
