// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_Extend = require("Control.Extend");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");
var Nothing = (function () {
    function Nothing() {

    };
    Nothing.value = new Nothing();
    return Nothing;
})();
var Just = (function () {
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    return Just;
})();
var showMaybe = function (__dict_Show_0) {
    return new Prelude.Show(function (_128) {
        if (_128 instanceof Just) {
            return "Just (" + (Prelude.show(__dict_Show_0)(_128.value0) + ")");
        };
        if (_128 instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match");
    });
};
var semigroupMaybe = function (__dict_Semigroup_1) {
    return new Prelude.Semigroup(function (_126) {
        return function (_127) {
            if (_126 instanceof Nothing) {
                return _127;
            };
            if (_127 instanceof Nothing) {
                return _126;
            };
            if (_126 instanceof Just && _127 instanceof Just) {
                return new Just(Prelude["<>"](__dict_Semigroup_1)(_126.value0)(_127.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
};
var maybe = function (b) {
    return function (f) {
        return function (_120) {
            if (_120 instanceof Nothing) {
                return b;
            };
            if (_120 instanceof Just) {
                return f(_120.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isNothing = maybe(true)(Prelude["const"](false));
var isJust = maybe(false)(Prelude["const"](true));
var functorMaybe = new Prelude.Functor(function (fn) {
    return function (_121) {
        if (_121 instanceof Just) {
            return new Just(fn(_121.value0));
        };
        return Nothing.value;
    };
});
var fromMaybe = function (a) {
    return maybe(a)(Prelude.id(Prelude.categoryArr));
};
var extendMaybe = new Control_Extend.Extend(function (f) {
    return function (_125) {
        if (_125 instanceof Nothing) {
            return Nothing.value;
        };
        return new Just(f(_125));
    };
}, function () {
    return functorMaybe;
});
var eqMaybe = function (__dict_Eq_3) {
    return new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqMaybe(__dict_Eq_3))(a)(b);
        };
    }, function (_129) {
        return function (_130) {
            if (_129 instanceof Nothing && _130 instanceof Nothing) {
                return true;
            };
            if (_129 instanceof Just && _130 instanceof Just) {
                return Prelude["=="](__dict_Eq_3)(_129.value0)(_130.value0);
            };
            return false;
        };
    });
};
var ordMaybe = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqMaybe(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_131) {
        return function (_132) {
            if (_131 instanceof Just && _132 instanceof Just) {
                return Prelude.compare(__dict_Ord_2)(_131.value0)(_132.value0);
            };
            if (_131 instanceof Nothing && _132 instanceof Nothing) {
                return Prelude.EQ.value;
            };
            if (_131 instanceof Nothing) {
                return Prelude.LT.value;
            };
            if (_132 instanceof Nothing) {
                return Prelude.GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
};
var applyMaybe = new Prelude.Apply(function (_122) {
    return function (x) {
        if (_122 instanceof Just) {
            return Prelude["<$>"](functorMaybe)(_122.value0)(x);
        };
        if (_122 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorMaybe;
});
var bindMaybe = new Prelude.Bind(function (_124) {
    return function (k) {
        if (_124 instanceof Just) {
            return k(_124.value0);
        };
        if (_124 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyMaybe;
});
var applicativeMaybe = new Prelude.Applicative(function () {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Prelude.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function (_123) {
    return function (r) {
        if (_123 instanceof Nothing) {
            return r;
        };
        return _123;
    };
}, function () {
    return functorMaybe;
});
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return plusMaybe;
}, function () {
    return applicativeMaybe;
});
var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Nothing: Nothing, 
    Just: Just, 
    isNothing: isNothing, 
    isJust: isJust, 
    fromMaybe: fromMaybe, 
    maybe: maybe, 
    functorMaybe: functorMaybe, 
    applyMaybe: applyMaybe, 
    applicativeMaybe: applicativeMaybe, 
    altMaybe: altMaybe, 
    plusMaybe: plusMaybe, 
    alternativeMaybe: alternativeMaybe, 
    bindMaybe: bindMaybe, 
    monadMaybe: monadMaybe, 
    monadPlusMaybe: monadPlusMaybe, 
    extendMaybe: extendMaybe, 
    semigroupMaybe: semigroupMaybe, 
    showMaybe: showMaybe, 
    eqMaybe: eqMaybe, 
    ordMaybe: ordMaybe
};
