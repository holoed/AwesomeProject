-- Generated by psc-make version 0.6.9.5
module Data.String where
import Data.Function ()
import Data.String ()
import Data.Char ()
import Prelude ()
import Data.String.Unsafe ()
import Prim ()
import Prelude ()
import Data.Maybe ()
import Data.Char ()
import Data.Function ()
import Data.String.Unsafe ()
--  | Converts an array of characters into a string.
--  | Returns the index of the first occurrence of the first string in the
--  | second string. Returns `-1` if there is no match.
--  | Returns the index of the first occurrence of the first string in the
--  | second string, starting at the given index. Returns `-1` if there is
--  | no match.
--  | Returns the index of the last occurrence of the first string in the
--  | second string. Returns `-1` if there is no match.
--  | Returns the index of the first occurrence of the last string in the
--  | second string, starting at the given index. Returns `-1` if there is
--  | no match.
--  | Returns the number of characters the string is composed of.
--  | Locale-aware sort order comparison. Returns a negative number if the
--  | first string occurs before the second in a sort, a positive number
--  | if the first string occurs after the second, and `0` if their sort order
--  | is equal.
--  | Replaces the first occurence of the first argument with the second argument.
--  | Returns the first `n` characters of the string.
--  | Returns the string without the first `n` characters.
--  | Returns the number of characters in the string for which the predicate holds.
--  | Returns the substrings of the first string separated along occurences
--  | of the second string.
--  | Converts the string into an array of characters.
--  | Returns the argument converted to lowercase.
--  | Returns the argument converted to uppercase.
--  | Removes whitespace from the beginning and end of a string, including
--  | [whitespace characters](http://www.ecma-international.org/ecma-262/5.1/#sec-7.2)
--  | and [line terminators](http://www.ecma-international.org/ecma-262/5.1/#sec-7.3).
--  | Joins the strings in the array together, inserting the first argument
--  | as separator between them.
--  | Returns the longest prefix (possibly empty) of characters that satisfy
--  | the predicate:
--  | Returns `true` if the given string is empty.
--  | Returns the first character and the rest of the string,
--  | if the string is not empty.
--  | Returns a string of length `1` containing the given character.
--  | Returns a string of length `1` containing the given character.
--  | Same as `fromChar`.
--  | Returns the suffix remaining after `takeWhile`.
--  | Returns the numeric Unicode value of the character at the given index,
--  | if the index is within bounds.
--  | Returns the character at the given index, if the index is within bounds.
foreign import joinWith :: Prim.String -> [Prim.String] -> Prim.String
foreign import trim :: Prim.String -> Prim.String
foreign import toUpper :: Prim.String -> Prim.String
foreign import toLower :: Prim.String -> Prim.String
foreign import toCharArray :: Prim.String -> [Data.Char.Char]
foreign import split :: Prim.String -> Prim.String -> [Prim.String]
foreign import dropWhile :: (Data.Char.Char -> Prim.Boolean) -> Prim.String -> Prim.String
foreign import drop :: Prim.Number -> Prim.String -> Prim.String
foreign import takeWhile :: (Data.Char.Char -> Prim.Boolean) -> Prim.String -> Prim.String
foreign import take :: Prim.Number -> Prim.String -> Prim.String
foreign import count :: (Data.Char.Char -> Prim.Boolean) -> Prim.String -> Prim.Number
foreign import replace :: Prim.String -> Prim.String -> Prim.String -> Prim.String
foreign import localeCompare :: Prim.String -> Prim.String -> Prim.Number
foreign import singleton :: Data.Char.Char -> Prim.String
foreign import length :: Prim.String -> Prim.Number
foreign import uncons :: Prim.String -> Data.Maybe.Maybe { tail :: Prim.String, head :: Data.Char.Char }
foreign import null :: Prim.String -> Prim.Boolean
foreign import lastIndexOf' :: Prim.String -> Prim.Number -> Prim.String -> Prim.Number
foreign import lastIndexOf :: Prim.String -> Prim.String -> Prim.Number
foreign import indexOf' :: Prim.String -> Prim.Number -> Prim.String -> Prim.Number
foreign import indexOf :: Prim.String -> Prim.String -> Prim.Number
foreign import fromChar :: Data.Char.Char -> Prim.String
foreign import fromCharArray :: [Data.Char.Char] -> Prim.String
foreign import charCodeAt :: Prim.Number -> Prim.String -> Data.Maybe.Maybe Prim.Number
foreign import charAt :: Prim.Number -> Prim.String -> Data.Maybe.Maybe Data.Char.Char
