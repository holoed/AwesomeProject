// Generated by psc-make version 0.6.9.5
"use strict";
var Prelude = require("Prelude");
var Data_String = require("Data.String");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var Data_Map = require("Data.Map");
var HttpClient = require("HttpClient");
var Config = require("Config");
var Data_Traversable = require("Data.Traversable");
var Data_Array = require("Data.Array");
var Data_Array_Unsafe = require("Data.Array.Unsafe");
var TMDBTypes = require("TMDBTypes");
var Data_Function = require("Data.Function");
var Data_Either = require("Data.Either");
var Control_Bind = require("Control.Bind");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_Monad_Cont_Trans = require("Control.Monad.Cont.Trans");
var Data_Foreign = require("Data.Foreign");
var Data_Foreign_Class = require("Data.Foreign.Class");
var Data_Foldable = require("Data.Foldable");
var Data_Tuple = require("Data.Tuple");
var replaceSpaceWithPlus = encodeURI;
var getMyList = function (url) {
    return HttpClient.fetchUrl(url);
};
var fetchTVShowExtraInfo = function (tvshowId) {
    var url = "http://api.themoviedb.org/3/tv/" + (Prelude.show(Prelude.showNumber)(tvshowId) + ("?api_key=" + (Config.apiKey + "&append_to_response=credits,content_ratings")));
    var response = HttpClient.fetchUrl(url);
    return Prelude["<$>"](Control_Monad_Cont_Trans.functorContT(Control_Monad_Eff.monadEff))(function (details) {
        return {
            tvshowId: details.id,
            actors: Data_String.joinWith(", ")(Data_Array.take(5)(Prelude["<$>"](Data_Array.functorArray)(function (x) {
                return x.name;
            })(details.credits.cast))),
            runtime: Data_Array_Unsafe.head(details.episode_run_time),
            popularity: details.popularity,
            genre: Data_String.joinWith(", ")(Data_Array.take(5)(Prelude["<$>"](Data_Array.functorArray)(function (x) {
                return x.name;
            })(details.genres))),
            rating: Data_String.joinWith(" ")(Data_Array.take(1)(Prelude["<$>"](Data_Array.functorArray)(function (x) {
                return x.rating;
            })(details.content_ratings.results)))
        };
    })(response);
};
var fetchTVShowEpisode = function (episode) {
    var url = "http://api.themoviedb.org/3/tv/" + (Prelude.show(Prelude.showNumber)(episode.seriesId) + ("/season/" + (episode.season + ("/episode/" + (episode.episode + ("?api_key=" + Config.apiKey))))));
    var response = HttpClient.fetchUrl(url);
    return Prelude["<$>"](Control_Monad_Cont_Trans.functorContT(Control_Monad_Eff.monadEff))(function (details) {
        return {
            title: details.name,
            season: Prelude.show(Prelude.showString)(details.season_number),
            episode: Prelude.show(Prelude.showString)(details.episode_number),
            plot: details.overview,
            release: details.air_date,
            source: episode.source,
            director: Data_String.joinWith(",")(Prelude["<$>"](Data_Array.functorArray)(function (x) {
                return x.name;
            })(Data_Array.filter(function (x) {
                return x.job === "Director";
            })(details.crew))),
            writer: Data_String.joinWith(",")(Prelude["<$>"](Data_Array.functorArray)(function (x) {
                return x.name;
            })(Data_Array.filter(function (x) {
                return x.job === "Writer" || x.job === "Screenplay";
            })(details.crew))),
            actors: Data_String.joinWith(",")(Data_Array.take(5)(Prelude["<$>"](Data_Array.functorArray)(function (x) {
                return x.name;
            })(details.guest_stars))),
            poster: "http://image.tmdb.org/t/p/w500/" + details.still_path
        };
    })(response);
};
var fetchTVShowEpisodesDetails = function (episodesSpecs) {
    return Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Cont_Trans.applicativeContT(Control_Monad_Eff.functorEff)(Control_Monad_Eff.monadEff))(Prelude["<$>"](Data_Array.functorArray)(fetchTVShowEpisode)(episodesSpecs));
};
var fetchTVShowsSeasonsDetails = function (tvshow) {
    var f = function (x) {
        return Prelude["<$>"](Control_Monad_Cont_Trans.functorContT(Control_Monad_Eff.monadEff))(function (eps) {
            return {
                season: x.season,
                episodes: eps
            };
        })(fetchTVShowEpisodesDetails(Prelude["<$>"](Data_Array.functorArray)(function (v) {
            var _3218 = {};
            for (var _3219 in v) {
                if (v.hasOwnProperty(_3219)) {
                    _3218[_3219] = v[_3219];
                };
            };
            _3218.seriesId = tvshow.seriesId;
            return _3218;
        })(x.episodes)));
    };
    return Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Cont_Trans.applicativeContT(Control_Monad_Eff.functorEff)(Control_Monad_Eff.monadEff))(Prelude["<$>"](Data_Array.functorArray)(f)(tvshow.seasons));
};
var fetchTVShow$prime = function (tvshow) {
    var year = "&year=" + tvshow.year;
    var query = "&query=" + replaceSpaceWithPlus(tvshow.title);
    var url = "http://api.themoviedb.org/3/search/tv?api_key=" + (Config.apiKey + (query + year));
    var response = HttpClient.fetchUrl(url);
    return Prelude["<$>"](Control_Monad_Cont_Trans.functorContT(Control_Monad_Eff.monadEff))(function (details) {
        return {
            seriesId: details.id,
            title: details.name,
            year: details.first_air_date,
            plot: details.overview,
            poster: "http://image.tmdb.org/t/p/w500/" + details.poster_path,
            seasons: [  ],
            actors: "",
            runtime: 0,
            popularity: 0,
            rating: "",
            genre: ""
        };
    })(Prelude["<$>"](Control_Monad_Cont_Trans.functorContT(Control_Monad_Eff.monadEff))(function (x) {
        return Data_Array_Unsafe.head(x.results);
    })(response));
};
var fetchTVShow = function (tvshow) {
    return Prelude[">>="](Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.monadEff))(fetchTVShow$prime(tvshow))(function (_72) {
        return Prelude[">>="](Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.monadEff))(fetchTVShowExtraInfo(_72.seriesId))(function (_71) {
            return Prelude["return"](Control_Monad_Cont_Trans.monadContT(Control_Monad_Eff.monadEff))((function () {
                var _3222 = {};
                for (var _3223 in _72) {
                    if (_72.hasOwnProperty(_3223)) {
                        _3222[_3223] = _72[_3223];
                    };
                };
                _3222.actors = _71.actors;
                _3222.runtime = _71.runtime;
                _3222.popularity = _71.popularity;
                _3222.genre = _71.genre;
                _3222.rating = _71.rating;
                return _3222;
            })());
        });
    });
};
var fetchTVShowsDetails = function (tvShowsSpecs) {
    var f = function (x) {
        return Prelude[">>="](Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.monadEff))(fetchTVShow(x))(function (_68) {
            return Prelude[">>="](Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.monadEff))(fetchTVShowsSeasonsDetails((function () {
                var _3225 = {};
                for (var _3226 in x) {
                    if (x.hasOwnProperty(_3226)) {
                        _3225[_3226] = x[_3226];
                    };
                };
                _3225.seriesId = _68.seriesId;
                return _3225;
            })()))(function (_67) {
                return Prelude["return"](Control_Monad_Cont_Trans.monadContT(Control_Monad_Eff.monadEff))((function () {
                    var _3228 = {};
                    for (var _3229 in _68) {
                        if (_68.hasOwnProperty(_3229)) {
                            _3228[_3229] = _68[_3229];
                        };
                    };
                    _3228.seasons = _67;
                    return _3228;
                })());
            });
        });
    };
    return Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Cont_Trans.applicativeContT(Control_Monad_Eff.functorEff)(Control_Monad_Eff.monadEff))(Prelude["<$>"](Data_Array.functorArray)(f)(tvShowsSpecs));
};
var fetchMovieExtraInfo = function (movieId) {
    var url = "http://api.themoviedb.org/3/movie/" + (Prelude.show(Prelude.showNumber)(movieId) + ("?api_key=" + (Config.apiKey + "&append_to_response=credits,releases")));
    var response = HttpClient.fetchUrl(url);
    return Prelude["<$>"](Control_Monad_Cont_Trans.functorContT(Control_Monad_Eff.monadEff))(function (details) {
        return {
            movieId: details.id,
            director: Data_String.joinWith(", ")(Prelude["<$>"](Data_Array.functorArray)(function (x) {
                return x.name;
            })(Data_Array.filter(function (x) {
                return x.job === "Director";
            })(details.credits.crew))),
            writer: Data_String.joinWith(", ")(Prelude["<$>"](Data_Array.functorArray)(function (x) {
                return x.name;
            })(Data_Array.filter(function (x) {
                return x.job === "Writer" || x.job === "Screenplay";
            })(details.credits.crew))),
            actors: Data_String.joinWith(", ")(Data_Array.take(5)(Prelude["<$>"](Data_Array.functorArray)(function (x) {
                return x.name;
            })(details.credits.cast))),
            rated: (Data_Array_Unsafe.head(details.releases.countries)).certification,
            runtime: details.runtime
        };
    })(response);
};
var fetchMovie$prime = function (movie) {
    var year = "&year=" + movie.year;
    var query = "&query=" + replaceSpaceWithPlus(movie.title);
    var url = "http://api.themoviedb.org/3/search/movie?api_key=" + (Config.apiKey + (query + year));
    var response = HttpClient.fetchUrl(url);
    return Prelude["<$>"](Control_Monad_Cont_Trans.functorContT(Control_Monad_Eff.monadEff))(function (results) {
        var _3230 = Data_Array.length(results) > 0;
        if (_3230) {
            var details = Data_Array_Unsafe.head(results);
            var _3231 = {};
            for (var _3232 in TMDBTypes.emptyMovie) {
                if (TMDBTypes.emptyMovie.hasOwnProperty(_3232)) {
                    _3231[_3232] = TMDBTypes.emptyMovie[_3232];
                };
            };
            _3231.movieId = details.id;
            _3231.title = details.title;
            _3231.plot = details.overview;
            _3231.poster = "http://image.tmdb.org/t/p/w500/" + details.poster_path;
            _3231.year = movie.year;
            _3231.release = details.release_date;
            _3231.genresIds = details.genre_ids;
            _3231.source = movie.source;
            _3231.popularity = details.popularity;
            return _3231;
        };
        if (!_3230) {
            var _3233 = {};
            for (var _3234 in TMDBTypes.emptyMovie) {
                if (TMDBTypes.emptyMovie.hasOwnProperty(_3234)) {
                    _3233[_3234] = TMDBTypes.emptyMovie[_3234];
                };
            };
            _3233.movieId = -1;
            _3233.title = movie.title;
            _3233.year = movie.year;
            _3233.source = movie.source;
            _3233.poster = movie.poster;
            return _3233;
        };
        throw new Error("Failed pattern match");
    })(Prelude["<$>"](Control_Monad_Cont_Trans.functorContT(Control_Monad_Eff.monadEff))(function (x) {
        return x.results;
    })(response));
};
var fetchMovie = function (movie) {
    return Prelude[">>="](Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.monadEff))(fetchMovie$prime(movie))(function (_70) {
        return Prelude[">>="](Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.monadEff))((function () {
            var _3236 = _70.movieId > -1;
            if (_3236) {
                return fetchMovieExtraInfo(_70.movieId);
            };
            if (!_3236) {
                return Prelude["return"](Control_Monad_Cont_Trans.monadContT(Control_Monad_Eff.monadEff))(TMDBTypes.emptyExtraInfo);
            };
            throw new Error("Failed pattern match");
        })())(function (_69) {
            return Prelude["return"](Control_Monad_Cont_Trans.monadContT(Control_Monad_Eff.monadEff))((function () {
                var _3238 = {};
                for (var _3239 in _70) {
                    if (_70.hasOwnProperty(_3239)) {
                        _3238[_3239] = _70[_3239];
                    };
                };
                _3238.director = _69.director;
                _3238.writer = _69.writer;
                _3238.actors = _69.actors;
                _3238.runtime = _69.runtime;
                _3238.rated = _69.rated;
                return _3238;
            })());
        });
    });
};
var fetchMoviesDetails = function (moviesSpecs) {
    return Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Cont_Trans.applicativeContT(Control_Monad_Eff.functorEff)(Control_Monad_Eff.monadEff))(Prelude["<$>"](Data_Array.functorArray)(fetchMovie)(moviesSpecs));
};
var fetchGenreList = Prelude[">>="](Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.monadEff))(HttpClient.fetchUrl("http://api.themoviedb.org/3/genre/movie/list?api_key=" + Config.apiKey))(function (_66) {
    return Prelude["return"](Control_Monad_Cont_Trans.monadContT(Control_Monad_Eff.monadEff))(Data_Map.fromList(Prelude.ordNumber)(Prelude["<$>"](Data_Array.functorArray)(function (y) {
        return new Data_Tuple.Tuple(y.id, y.name);
    })(_66.genres)));
});
var getState = function (url) {
    return Prelude[">>="](Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.monadEff))(getMyList(url))(function (_65) {
        return Prelude[">>="](Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.monadEff))(fetchGenreList)(function (_64) {
            return Prelude[">>="](Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.monadEff))(fetchMoviesDetails(_65.movies))(function (_63) {
                return Prelude[">>="](Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.monadEff))(fetchTVShowsDetails(_65.tvshows))(function (_62) {
                    return Prelude["return"](Control_Monad_Cont_Trans.monadContT(Control_Monad_Eff.monadEff))({
                        movies: Prelude["<$>"](Data_Array.functorArray)(function (m) {
                            var _3245 = {};
                            for (var _3246 in m) {
                                if (m.hasOwnProperty(_3246)) {
                                    _3245[_3246] = m[_3246];
                                };
                            };
                            _3245.genre = Data_String.joinWith(", ")(Prelude["<$>"](Data_Array.functorArray)(function (k) {
                                return Data_Maybe_Unsafe.fromJust(Data_Map.lookup(Prelude.ordNumber)(k)(_64));
                            })(m.genresIds));
                            return _3245;
                        })(_63),
                        tvshows: _62
                    });
                });
            });
        });
    });
};
module.exports = {
    replaceSpaceWithPlus: replaceSpaceWithPlus,
    encodeURI: encodeURI,
    fetchTVShowEpisode: fetchTVShowEpisode,
    fetchTVShowExtraInfo: fetchTVShowExtraInfo,
    "fetchTVShow'": fetchTVShow$prime,
    fetchTVShow: fetchTVShow,
    "fetchMovie'": fetchMovie$prime,
    fetchMovie: fetchMovie,
    fetchMovieExtraInfo: fetchMovieExtraInfo,
    fetchTVShowEpisodesDetails: fetchTVShowEpisodesDetails,
    fetchTVShowsSeasonsDetails: fetchTVShowsSeasonsDetails,
    fetchTVShowsDetails: fetchTVShowsDetails,
    fetchMoviesDetails: fetchMoviesDetails,
    fetchGenreList: fetchGenreList,
    getMyList: getMyList,
    getState: getState
};
